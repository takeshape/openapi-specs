openapi: 3.0.0
info:
  title: EPCC API
  version: '2022-06-02T19:38:36.250Z'
  description: API for price books functionality.
servers:
  - url: 'https://api.moltin.com'
  - url: 'https://useast.api.elasticpath.com'
components:
  parameters:
    filter:
      in: query
      description: A filter specification
      name: filter
      required: false
      schema:
        type: string
    page:
      name: page
      in: query
      required: false
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/PageInput'
  requestBodies:
    bundle-configuration-data:
      content:
        application/json:
          schema:
            type: object
            title: BundleConfigurationData
            description: Container for a bundle configuration.
            properties:
              data:
                $ref: '#/components/schemas/ProductBundleConfiguration'
            required:
              - data
      description: The bundle configuration.
      required: true
    products-for-cart-configuration:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductsForCartConfiguration'
      description: A list of product id or sku and bundle configuration for cart.
      required: true
  schemas:
    Sales:
      type: object
      description: A set of sale specifications.
      additionalProperties:
        $ref: '#/components/schemas/Sale'
    Currencies:
      type: object
      description: List of currency specific amounts.
      additionalProperties:
        $ref: '#/components/schemas/CurrencyAmount'
    Sale:
      type: object
      description: A set of sale prices and a validity period.
      properties:
        bundle_ids:
          $ref: '#/components/schemas/BundleIDs'
        schedule:
          $ref: '#/components/schemas/Schedule'
        currencies:
          $ref: '#/components/schemas/Currencies'

    CurrencyAmount:
      type: object
      description: Combination of an amount of a tax included indicator.
      properties:
        amount:
          $ref: '#/components/schemas/Amount'
        includes_tax:
          $ref: '#/components/schemas/IncludesTax'
        tiers:
          type: object
          description: An optional set of tier prices with minimum quantities.
          additionalProperties:
            $ref: '#/components/schemas/TierPrice'
    PageInput:
      type: object
      properties:
        limit:
          description: Number of resource entities per page.
          type: integer
          format: int64
          minimum: 1
        offset:
          description: Offset of first resource entity on page.
          type: integer
          format: int64
          minimum: 0
    PageMeta:
      type: object
      title: PageMeta
      properties:
        results:
          type: object
          properties:
            total:
              type: integer
        page:
          type: object
          properties:
            limit:
              type: integer
            offset:
              type: integer
            current:
              type: integer
            total:
              type: integer
    Links:
      type: object
      properties:
        self:
          type: string
          format: uri
          nullable: true
        first:
          type: string
          format: uri
          nullable: true
        last:
          type: string
          format: uri
          nullable: true
        prev:
          type: string
          format: uri
          nullable: true
        next:
          type: string
          format: uri
          nullable: true
    ProductBundleConfiguration:
      type: object
      title: BundleConfiguration
      description: A specification of a bundle's configuration.
      properties:
        selected_options:
          type: object
          description: The configuration of each component
          additionalProperties:
            type: object
            additionalProperties:
              type: integer
              format: int64
      required:
        - selected_options
      x-go-name: ProductBundleConfiguration
    ID:
      type: string
      example: 4c45e4ec-26e0-4043-86e4-c15b9cf985a7
      x-go-name: ID
    SKU:
      type: string
      x-go-name: SKU
      nullable: true
    ProductList:
      type: array
      items:
        $ref: '#/components/schemas/ProductList'
      x-go-name: Data
    ProductListData:
      type: object
      title: ProductListData
      description: Container for a list of products.
      properties:
        meta:
          $ref: '#/components/schemas/PageMeta'
        data:
          $ref: '#/components/schemas/ProductList'
        links:
          $ref: '#/components/schemas/Links'
    ProductsForCartConfiguration:
      type: object
      title: ProductsForCartConfiguration
      description: A list of product id or sku and bundle configuration for cart.
      properties:
        data:
          $ref: '#/components/schemas/ProductList'
      required:
        - data
      x-go-name: ProductsForCartConfiguration
    Detail:
      type: string
      example: The price book already exists
      x-go-name: Detail
    Status:
      type: string
      example: '409'
      x-go-name: Status
    Title:
      type: string
      example: conflict
      x-go-name: Title
    ApiError:
      type: object
      title: ApiError
      description: This is a json-api style part of an error response
      properties:
        detail:
          $ref: '#/components/schemas/Detail'
        status:
          $ref: '#/components/schemas/Status'
        title:
          $ref: '#/components/schemas/Title'
      additionalProperties: false
      x-go-name: ApiError
    Errors:
      type: array
      items:
        $ref: '#/components/schemas/ApiError'
      x-go-name: Errors
    ErrorResponse:
      type: object
      title: ErrorResponse
      description: This is a json-api style Error response
      properties:
        errors:
          $ref: '#/components/schemas/Errors'
      additionalProperties: false
      x-go-name: ErrorResponse
    BundleIDs:
      type: array
      description: A list of bundle IDs that this sale price applied to.
      items:
        type: string
        format: uuid
      x-omitempty: true
      x-go-name: BundleIDs
    ValidFrom:
      type: string
      example: '2020-09-22 09:00:00+00:00'
      format: date-time
      x-go-name: ValidFrom
      nullable: true
    ValidTo:
      type: string
      example: '2020-09-22 09:00:00+00:00'
      format: date-time
      x-go-name: ValidTo
      nullable: true
    Schedule:
      type: object
      description: A definition of the times at which a sale is valid
      properties:
        valid_from:
          $ref: '#/components/schemas/ValidFrom'
        valid_to:
          $ref: '#/components/schemas/ValidTo'
      x-go-name: Schedule
    Amount:
      type: integer
      format: int64
      example: '50'
      x-go-name: Amount
      nullable: true
    IncludesTax:
      type: boolean
      example: false
      default: false
      x-go-name: IncludesTax
    MinQuantity:
      type: integer
      description: 'A value 1 or larger. If it does not exist, an error will be returned.'
      format: int64
      example: '10'
      x-go-name: MinQuantity
      nullable: true
    TierPrice:
      type: object
      description: A definition of a tier price
      properties:
        minimum_quantity:
          $ref: '#/components/schemas/MinQuantity'
        amount:
          $ref: '#/components/schemas/Amount'
      x-go-name: TierPrice
    Type:
      type: string
      x-go-name: Type
      default: price-modifier
      example: price-modifier
      enum:
        - price-modifier
    CreatedAt:
      type: string
      format: date-time
      example: '2020-09-22 09:00:00+00:00'
      x-go-name: CreatedAt
    Description:
      type: string
      example: This is a price book
      x-go-name: Description
      nullable: true
    Name:
      type: string
      example: large-supplement
      minLength: 1
      x-go-name: Name
      nullable: true
    UpdatedAt:
      type: string
      example: '2020-09-22 09:00:00+00:00'
      format: date-time
      x-go-name: UpdatedAt
    Pricebook:
      type: object
      title: Pricebook
      description: >-
        Top level entity in the price books domain model. It contains a list of
        product prices.
      properties:
        id:
          $ref: '#/components/schemas/ID'
        type:
          $ref: '#/components/schemas/Type'
        attributes:
          type: object
          properties:
            created_at:
              $ref: '#/components/schemas/CreatedAt'
            description:
              $ref: '#/components/schemas/Description'
            name:
              $ref: '#/components/schemas/Name'
            updated_at:
              $ref: '#/components/schemas/UpdatedAt'
          required:
            - name
            - created_at
            - updated_at
      required:
        - id
        - type
        - attributes
      additionalProperties: false
      x-go-name: Pricebook
    PricebookUpdate:
      type: object
      title: Pricebook
      description: Price book update request.
      properties:
        id:
          $ref: '#/components/schemas/ID'
        type:
          $ref: '#/components/schemas/Type'
        attributes:
          type: object
          properties:
            description:
              $ref: '#/components/schemas/Description'
            name:
              $ref: '#/components/schemas/Name'
          additionalProperties: false
      required:
        - id
        - type
        - attributes
      additionalProperties: false
      x-go-name: PricebookUpdate
    PricebookCreateParam:
      type: object
      title: PricebookWithoutId
      description: >-
        Top level entity in the price books domain model. It contains a list of
        product prices.
      properties:
        type:
          $ref: '#/components/schemas/Type'
        attributes:
          type: object
          properties:
            description:
              $ref: '#/components/schemas/Description'
            name:
              $ref: '#/components/schemas/Name'
          required:
            - name
          additionalProperties: false
      required:
        - type
        - attributes
      additionalProperties: false
      x-go-name: PricebookCreateParam
    PricebookCreateData:
      type: object
      title: PricebookCreateData
      description: Json-api style data object containing a price book to be created.
      properties:
        data:
          $ref: '#/components/schemas/PricebookCreateParam'
      required:
        - data
      additionalProperties: false
      x-go-name: PricebookCreateData
    PricebookUpdateData:
      type: object
      title: PricebookCreateData
      description: Json-api style data object containing a price book to be created.
      properties:
        data:
          $ref: '#/components/schemas/PricebookUpdate'
      required:
        - data
      additionalProperties: false
      x-go-name: PricebookUpdateData
    PricebookReplicate:
      type: object
      title: Pricebook
      description: Price book replicate request.
      properties:
        type:
          $ref: '#/components/schemas/Type'
        attributes:
          type: object
          properties:
            description:
              $ref: '#/components/schemas/Description'
            name:
              $ref: '#/components/schemas/Name'
          additionalProperties: false
      required:
        - type
        - attributes
      additionalProperties: false
      x-go-name: PricebookReplicate
    PricebookReplicateData:
      type: object
      title: PricebookReplicateData
      description: Json-api style data object containing a price book to be replicated.
      properties:
        data:
          $ref: '#/components/schemas/PricebookReplicate'
      required:
        - data
      additionalProperties: false
      x-go-name: PricebookReplicateData
    ProductPrice:
      type: object
      title: ProductPrice
      description: >-
        ProductPrice associates a collection of locale specific prices with a
        product SKU.
      properties:
        type:
          type: string
          example: product-price
          default: product-price
          enum:
            - product-price
        attributes:
          type: object
          properties:
            currencies:
              $ref: '#/components/schemas/Currencies'
            sku:
              type: string
              minLength: 1
              example: product-sku-a
            sales:
              $ref: '#/components/schemas/Sales'
          required:
            - sku
        id:
          $ref: '#/components/schemas/ID'
      required:
        - type
        - attributes
        - id
      additionalProperties: false
      x-go-name: ProductPrice
    PricebookData:
      type: object
      title: PricebookData
      description: Json-api style data object containing a price book.
      properties:
        data:
          $ref: '#/components/schemas/Pricebook'
        links:
          $ref: '#/components/schemas/Links'
      required:
        - data
      additionalProperties: false
      x-go-name: PricebookData
    PricebookListData:
      type: object
      title: PricebookListData
      description: Json-api style array containing a list of price books
      properties:
        meta:
          $ref: '#/components/schemas/PageMeta'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Pricebook'
        links:
          $ref: '#/components/schemas/Links'
      required:
        - data
      additionalProperties: false
      x-go-name: PricebookListData
    ProductPriceCreateArg:
      type: object
      title: ProductPriceCreateArg
      description: >-
        ProductPrice associates a collection of locale specific prices with a
        product SKU.
      properties:
        type:
          type: string
          example: product-price
          default: product-price
          enum:
            - product-price
        attributes:
          type: object
          properties:
            currencies:
              $ref: '#/components/schemas/Currencies'
            sku:
              type: string
              minLength: 1
              example: product-sku-a
            sales:
              $ref: '#/components/schemas/Sales'
          required:
            - currencies
            - sku
      required:
        - type
        - attributes
      additionalProperties: false
      x-go-name: ProductPriceCreateArg
    ProductPriceCreateData:
      type: object
      title: ProductPriceCreateData
      description: Json-api style data object containing a single product price.
      properties:
        data:
          $ref: '#/components/schemas/ProductPriceCreateArg'
      required:
        - data
      additionalProperties: false
      x-go-name: ProductPriceCreateData
    ProductPriceData:
      type: object
      title: ProductPriceData
      description: Json-api style data object containing a single product price.
      properties:
        data:
          $ref: '#/components/schemas/ProductPrice'
        links:
          $ref: '#/components/schemas/Links'
      required:
        - data
      additionalProperties: false
      x-go-name: ProductPriceData
    ProductPriceListData:
      type: object
      title: ProductPriceListData
      description: Json-api style array containing a list of product prices.
      properties:
        meta:
          $ref: '#/components/schemas/PageMeta'
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductPrice'
        links:
          $ref: '#/components/schemas/Links'
      required:
        - data
      additionalProperties: false
      x-go-name: ProductPriceListData
    PriceModifier:
      type: object
      title: PriceModifier
      description: PriceModifier specifies how an existing product price may be modified.
      properties:
        type:
          type: string
          example: price-modifier
          default: price-modifier
          enum:
            - price-modifier
        attributes:
          type: object
          properties:
            currencies:
              $ref: '#/components/schemas/Currencies'
            name:
              type: string
              example: large-supplement
            modifier_type:
              type: string
              example: price_equals
              enum:
                - price_equals
                - price_increment
                - price_decrement
          required:
            - name
            - modifier_type
            - currencies
        id:
          $ref: '#/components/schemas/ID'
      required:
        - type
        - attributes
        - id
      additionalProperties: false
      x-go-name: PriceModifier
    PriceModifierData:
      type: object
      title: PriceModifierData
      description: Json-api style data object containing a single price modifier.
      properties:
        data:
          $ref: '#/components/schemas/PriceModifier'
        links:
          $ref: '#/components/schemas/Links'
      required:
        - data
      additionalProperties: false
      x-go-name: PriceModifierData
    ModifierType:
      type: string
      example: price_equals
      enum:
        - price_equals
        - price_increment
        - price_decrement
      x-go-name: ModifierType
      nullable: true
    PriceModifierUpdate:
      type: object
      title: PriceModifier
      description: Price modifier update request.
      properties:
        id:
          $ref: '#/components/schemas/ID'
        type:
          $ref: '#/components/schemas/Type'
        attributes:
          type: object
          properties:
            currencies:
              $ref: '#/components/schemas/Currencies'
            name:
              $ref: '#/components/schemas/Name'
            modifier_type:
              $ref: '#/components/schemas/ModifierType'
          additionalProperties: false
      required:
        - id
        - type
        - attributes
      additionalProperties: false
      x-go-name: PriceModifierUpdate
    PriceModifierUpdateData:
      type: object
      title: PriceModifierUpdateData
      description: Json-api style data object containing a price modifier to be updated.
      properties:
        data:
          $ref: '#/components/schemas/PriceModifierUpdate'
      required:
        - data
      additionalProperties: false
      x-go-name: PriceModifierUpdateData
    PriceModifierCreate:
      type: object
      title: PriceModifier
      description: Price modifier create request.
      properties:
        type:
          $ref: '#/components/schemas/Type'
        attributes:
          type: object
          properties:
            currencies:
              $ref: '#/components/schemas/Currencies'
            name:
              $ref: '#/components/schemas/Name'
            modifier_type:
              $ref: '#/components/schemas/ModifierType'
          required:
            - name
            - modifier_type
            - currencies
          additionalProperties: false
      required:
        - type
        - attributes
      additionalProperties: false
      x-go-name: PriceModifierCreate
    PriceModifierCreateData:
      type: object
      title: PriceModifierCreateData
      description: Json-api style data object containing a price modifier to be created.
      properties:
        data:
          $ref: '#/components/schemas/PriceModifierCreate'
      required:
        - data
      additionalProperties: false
      x-go-name: PriceModifierCreateData
    PriceModifierListData:
      type: object
      title: PriceModifierListData
      description: Json-api style array containing a list of price modifiers.
      properties:
        meta:
          $ref: '#/components/schemas/PageMeta'
        data:
          type: array
          items:
            $ref: '#/components/schemas/PriceModifier'
        links:
          $ref: '#/components/schemas/Links'
      required:
        - data
      additionalProperties: false
      x-go-name: PriceModifierListData
    PrioritizedPricebook:
      type: object
      properties:
        id:
          type: string
          format: uuid
        priority:
          type: integer
      required:
        - priority
        - id
      x-go-name: PrioritizedPricebook
    APIError:
      type: object
      title: APIError
      description: APIError is a json-api style part of an error response.
      properties:
        detail:
          $ref: '#/components/schemas/Detail'
        status:
          $ref: '#/components/schemas/Status'
        title:
          $ref: '#/components/schemas/Title'
      x-go-name: APIError
    Label:
      type: string
      example: category
      x-go-name: Label
    NodeReference:
      type: object
      title: NodeReference
      description: Minimum set of information to identify a catalog node.
      properties:
        id:
          $ref: '#/components/schemas/ID'
        label:
          $ref: '#/components/schemas/Label'
        name:
          $ref: '#/components/schemas/Name'
      x-go-name: NodeReference
    RootNodes:
      type: array
      items:
        $ref: '#/components/schemas/NodeReference'
      x-go-name: RootNodes
    ReleaseRelationships:
      type: object
      title: ReleaseRelationships
      description: 'Relationships to hierarchies, and products.'
      properties:
        products:
          type: object
          properties:
            links:
              type: object
              properties:
                related:
                  type: string
              required:
                - related
        hierarchies:
          type: object
          properties:
            links:
              type: object
              properties:
                related:
                  type: string
              required:
                - related
          required:
            - links
      x-go-name: ReleaseRelationships
    IsFullPublish:
      type: boolean
      example: false
      default: false
      x-go-name: IsFullPublish
    ReleaseMeta:
      type: object
      title: ReleaseMeta
      description: A release's metadata.
      properties:
        created_at:
          type: string
          format: date-time
          example: '1970-01-01 00:00:00+00:00'
        started_at:
          type: string
          format: date-time
          example: '1970-01-01 00:00:00+00:00'
          nullable: true
        release_status:
          type: string
          enum:
            - PENDING
            - IN_PROGRESS
            - FAILED
            - PUBLISHED
        language:
          type: string
          example: en-GB
        is_full_publish:
          $ref: '#/components/schemas/IsFullPublish'
      x-go-name: ReleaseMeta
      x-omitempty: true
    Release:
      type: object
      title: Release
      description: A catalog release represents a collection of hierarchical product data.
      properties:
        id:
          $ref: '#/components/schemas/ID'
        attributes:
          type: object
          properties:
            name:
              type: string
              example: Clothing
            published_at:
              type: string
              format: date-time
              example: '1970-01-01 00:00:00+00:00'
              nullable: true
            catalog_id:
              type: string
              example: 0194f54d-f2a1-4e33-9a6e-9ec366152490
            description:
              type: string
              example: Catalog for Store 123
              default: ''
            hierarchies:
              $ref: '#/components/schemas/RootNodes'
        relationships:
          $ref: '#/components/schemas/ReleaseRelationships'
        type:
          $ref: '#/components/schemas/Type'
        meta:
          $ref: '#/components/schemas/ReleaseMeta'
      x-go-name: Release
    RuleSchedule:
      type: object
      title: Catalog Schedule
      description: A period of time during which a catalog is valid
      properties:
        valid_from:
          $ref: '#/components/schemas/ValidFrom'
        valid_to:
          $ref: '#/components/schemas/ValidTo'
      x-go-name: RuleSchedule
    Slug:
      type: string
      example: formal
      x-go-name: Slug
    HierarchyAttributes:
      type: object
      title: HierarchyAttributes
      description: Resource attributes of a catalog hierarchy.
      properties:
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        published_at:
          type: string
          format: date-time
          example: '1970-01-01 00:00:00+00:00'
          nullable: true
        description:
          $ref: '#/components/schemas/Description'
        label:
          $ref: '#/components/schemas/Label'
        name:
          $ref: '#/components/schemas/Name'
        slug:
          $ref: '#/components/schemas/Slug'
        status:
          $ref: '#/components/schemas/Status'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      x-go-name: HierarchyAttributes
    HierarchyRelationships:
      type: object
      title: HierarchyRelationships
      description: 'Relationships to child nodes, and products.'
      properties:
        products:
          type: object
          properties:
            links:
              type: object
              properties:
                related:
                  type: string
              required:
                - related
        children:
          type: object
          properties:
            links:
              type: object
              properties:
                related:
                  type: string
              required:
                - related
          required:
            - links
        nodes:
          type: object
          properties:
            links:
              type: object
              properties:
                related:
                  type: string
              required:
                - related
          required:
            - links
      x-go-name: HierarchyRelationships
    HierarchyMeta:
      type: object
      title: HierarchyMeta
      description: A hierarchy's metadata.
      properties:
        language:
          type: string
          example: en-GB
      x-go-name: HierarchyMeta
      x-omitempty: true
    Hierarchy:
      type: object
      title: Hierarchy
      description: >-
        A hierarchy in a catalog (e.g. a category hierarchy). Hierarchies can
        have child nodes, as well as a list of attached products
      properties:
        attributes:
          $ref: '#/components/schemas/HierarchyAttributes'
        id:
          $ref: '#/components/schemas/ID'
        relationships:
          $ref: '#/components/schemas/HierarchyRelationships'
        type:
          $ref: '#/components/schemas/Type'
        meta:
          $ref: '#/components/schemas/HierarchyMeta'
      x-go-name: Hierarchy
    NodeAttributes:
      type: object
      title: NodeAttributes
      description: Resource attributes of a catalog node.
      properties:
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        published_at:
          type: string
          format: date-time
          example: '1970-01-01 00:00:00+00:00'
          nullable: true
        description:
          $ref: '#/components/schemas/Description'
        label:
          $ref: '#/components/schemas/Label'
        name:
          $ref: '#/components/schemas/Name'
        slug:
          $ref: '#/components/schemas/Slug'
        status:
          $ref: '#/components/schemas/Status'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
      x-go-name: NodeAttributes
    ProductReference:
      type: object
      title: ProductReference
      description: A product identifier.
      x-nullable: 'true'
      properties:
        id:
          $ref: '#/components/schemas/ID'
        type:
          $ref: '#/components/schemas/Type'
      x-go-name: ProductReference
    NodeRelationships:
      type: object
      title: NodeRelationships
      description: 'Relationships to parent and child nodes, and products.'
      properties:
        products:
          type: object
          properties:
            data:
              type: array
              x-omitempty: true
              items:
                $ref: '#/components/schemas/ProductReference'
            links:
              type: object
              properties:
                related:
                  type: string
              required:
                - related
        children:
          type: object
          properties:
            links:
              type: object
              properties:
                related:
                  type: string
              required:
                - related
          required:
            - links
        parent:
          type: object
          properties:
            data:
              type: object
              properties:
                type:
                  type: string
                  example: node
                  enum:
                    - node
                id:
                  $ref: '#/components/schemas/ID'
              required:
                - id
                - type
            links:
              type: object
              properties:
                related:
                  type: string
              required:
                - related
          required:
            - data
        hierarchy:
          type: object
          properties:
            data:
              type: object
              properties:
                type:
                  type: string
                  example: hierarchy
                  enum:
                    - hierarchy
                id:
                  $ref: '#/components/schemas/ID'
              required:
                - id
                - type
            links:
              type: object
              properties:
                related:
                  type: string
              required:
                - related
          required:
            - data
      x-go-name: NodeRelationships
    NodeMeta:
      type: object
      title: NodeMeta
      description: A node's metadata.
      properties:
        language:
          type: string
          example: en-GB
        bread_crumb:
          type: array
          items:
            type: string
            example: 8dbb35b2-ef04-477e-974d-e5f3abe6faae
          x-omitempty: true
      x-go-name: NodeMeta
      x-omitempty: true
    Node:
      type: object
      title: Node
      description: >-
        A node in a catalog (e.g. a category node). Nodes can have child nodes,
        as well as a list of attached products
      properties:
        attributes:
          $ref: '#/components/schemas/NodeAttributes'
        id:
          $ref: '#/components/schemas/ID'
        relationships:
          $ref: '#/components/schemas/NodeRelationships'
        type:
          $ref: '#/components/schemas/Type'
        meta:
          $ref: '#/components/schemas/NodeMeta'
      x-go-name: Node
    Availability:
      type: string
      example: available
      x-go-name: Availability
    BaseProduct:
      type: boolean
      example: false
      default: false
      x-go-name: BaseProduct
    BaseProductID:
      type: string
      example: cdf574bc-e36e-48fc-9eac-01c87839b285
      x-go-name: BaseProductID
    CommodityType:
      type: string
      example: physical
      x-go-name: CommodityType
    UpcEan:
      type: string
      example: '0123456'
      x-go-name: UpcEan
    ManufacturerPartNum:
      type: string
      example: mfn1
      x-go-name: ManufacturerPartNum
    PriceModifiers:
      type: array
      description: A list of price modifier names
      items:
        type: string
        example: modifier-1
      x-go-name: PriceModifiers
      x-omitempty: true
    Dimensions:
      type: string
      example: 4x5x2
      x-go-name: Dimensions
    ManageStock:
      type: boolean
      example: false
      default: false
      x-go-name: ManageStock
    PriceAmount:
      type: object
      title: Amount
      description: A current specific price for a product.
      properties:
        amount:
          $ref: '#/components/schemas/Amount'
        includes_tax:
          $ref: '#/components/schemas/IncludesTax'
      x-go-name: PriceAmount
    Min:
      type: integer
      x-go-name: Min
      nullable: true
    Max:
      type: integer
      x-go-name: Max
      nullable: true
    Quantity:
      type: integer
      example: 2
      x-go-name: Quantity
    Options:
      type: array
      items:
        type: object
        title: Component Product Option
        description: A component product option for a bundle product.
        properties:
          id:
            $ref: '#/components/schemas/ID'
          type:
            $ref: '#/components/schemas/Type'
          quantity:
            $ref: '#/components/schemas/Quantity'
      x-go-name: Options
    ProductHash:
      type: string
      x-go-name: ProductHash
    Sku:
      type: string
      example: blue-shirt
      x-go-name: Sku
    G:
      type: number
      format: double
      x-go-name: G
    Kg:
      type: number
      format: double
      x-go-name: Kg
    Lb:
      type: number
      format: double
      x-go-name: Lb
    Oz:
      type: number
      format: double
      x-go-name: Oz
    Weight:
      type: object
      title: Weight
      description: A product's weight.
      properties:
        g:
          $ref: '#/components/schemas/G'
        kg:
          $ref: '#/components/schemas/Kg'
        lb:
          $ref: '#/components/schemas/Lb'
        oz:
          $ref: '#/components/schemas/Oz'
      x-go-name: Weight
    ProductAttributes:
      type: object
      title: ProductAttributes
      description: A product's attributes.
      properties:
        availability:
          $ref: '#/components/schemas/Availability'
        published_at:
          type: string
          format: date-time
          example: '1970-01-01 00:00:00+00:00'
          nullable: true
        base_product:
          $ref: '#/components/schemas/BaseProduct'
        base_product_id:
          $ref: '#/components/schemas/BaseProductID'
        commodity_type:
          $ref: '#/components/schemas/CommodityType'
        upc_ean:
          $ref: '#/components/schemas/UpcEan'
        manufacturer_part_num:
          $ref: '#/components/schemas/ManufacturerPartNum'
        price_modifiers:
          $ref: '#/components/schemas/PriceModifiers'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        description:
          $ref: '#/components/schemas/Description'
        dimensions:
          $ref: '#/components/schemas/Dimensions'
        manage_stock:
          $ref: '#/components/schemas/ManageStock'
        name:
          $ref: '#/components/schemas/Name'
        price:
          type: object
          title: Currencies
          description: Collection of currency specific prices for a product.
          additionalProperties:
            $ref: '#/components/schemas/PriceAmount'
        tiers:
          type: object
          title: Tiers
          description: Collection of tiered prices for a product.
          additionalProperties:
            type: object
            title: Tier
            description: A tiered price for a product.
            properties:
              minimum_quantity:
                type: integer
                example: '5'
              price:
                type: object
                title: Currencies
                description: Collection of currency specific prices for a product.
                additionalProperties:
                  $ref: '#/components/schemas/PriceAmount'
        components:
          type: object
          title: Components
          description: Collection of products for a bundle product.
          additionalProperties:
            type: object
            title: Component Product
            description: A component product definition for a bundle product.
            properties:
              name:
                $ref: '#/components/schemas/Name'
              min:
                $ref: '#/components/schemas/Min'
              max:
                $ref: '#/components/schemas/Max'
              options:
                $ref: '#/components/schemas/Options'
        product_hash:
          $ref: '#/components/schemas/ProductHash'
        sku:
          $ref: '#/components/schemas/Sku'
        slug:
          $ref: '#/components/schemas/Slug'
        status:
          $ref: '#/components/schemas/Status'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        weight:
          $ref: '#/components/schemas/Weight'
        extensions:
          type: object
          title: Extensions
          description: Collection of extension data for a product.
          additionalProperties:
            type: object
            title: Extension
            description: An extension data for a product.
            additionalProperties:
              type: object
      x-go-name: ProductAttributes
    Categories:
      type: array
      items:
        $ref: '#/components/schemas/NodeReference'
      x-go-name: Categories
      x-omitempty: true
    Brands:
      type: array
      items:
        $ref: '#/components/schemas/NodeReference'
      x-go-name: Brands
      x-omitempty: true
    Collections:
      type: array
      items:
        $ref: '#/components/schemas/NodeReference'
      x-go-name: Collections
      x-omitempty: true
    Parent:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ProductReference'
      x-go-name: Parent
      x-omitempty: true
    ProductReferences:
      type: array
      title: ProductReferences
      description: A list of product identifiers.
      items:
        $ref: '#/components/schemas/ProductReference'
      x-go-name: ProductReferences
    Children:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ProductReferences'
      x-go-name: Children
      x-omitempty: true
    CustomModifiers:
      type: array
      items:
        type: string
      x-go-name: CustomModifiers
      x-omitempty: true
    FileRelationship:
      type: object
      properties:
        type:
          type: string
          example: file
          enum:
            - file
        id:
          type: string
          format: uuid
        created_at:
          $ref: '#/components/schemas/CreatedAt'
      x-go-name: FileRelationship
    Modifiers:
      type: array
      items:
        type: string
      x-go-name: Modifiers
      x-omitempty: true
    ProductSpec:
      type: array
      items:
        type: string
      x-go-name: ProductSpec
      x-omitempty: true
    VariationOpts:
      type: array
      items:
        type: string
      x-go-name: VariationOpts
      x-omitempty: true
    Variations:
      type: array
      items:
        type: string
      x-go-name: Variations
      x-omitempty: true
    ProductRelationships:
      type: object
      title: ProductRelationships
      description: 'Relationships to child and parent products, and catalog nodes.'
      properties:
        categories:
          $ref: '#/components/schemas/Categories'
        brands:
          $ref: '#/components/schemas/Brands'
        collections:
          $ref: '#/components/schemas/Collections'
        parent:
          $ref: '#/components/schemas/Parent'
        children:
          $ref: '#/components/schemas/Children'
        custom_modifiers:
          $ref: '#/components/schemas/CustomModifiers'
        files:
          type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/FileRelationship'
          x-omitempty: true
        main_image:
          type: object
          properties:
            data:
              type: object
              x-nullable: 'true'
              properties:
                type:
                  type: string
                  example: main_image
                  enum:
                    - main_image
                id:
                  type: string
                  format: uuid
          x-omitempty: true
        component_products:
          type: object
          properties:
            links:
              type: object
              properties:
                self:
                  type: string
              required:
                - self
          x-omitempty: true
        modifiers:
          $ref: '#/components/schemas/Modifiers'
        product_spec:
          $ref: '#/components/schemas/ProductSpec'
        variationOpts:
          $ref: '#/components/schemas/VariationOpts'
        variations:
          $ref: '#/components/schemas/Variations'
      x-go-name: ProductRelationships
      x-omitempty: true
    CatalogID:
      type: string
      example: 362a16dc-f7c6-4280-83d6-4fcc152af091
      x-go-name: CatalogID
    PricebookID:
      type: string
      example: f5466169-0037-460c-b181-b02682b6f4de
      x-go-name: PricebookID
      nullable: true
    CatalogSource:
      type: string
      example: pim
      enum:
        - legacy
        - pim
      x-go-name: CatalogSource
    SaleID:
      type: string
      x-go-name: SaleID
    SaleExpires:
      type: string
      format: date-time
      example: '1970-01-01 00:00:00+00:00'
      x-go-name: SaleExpires
      nullable: true
    ComponentProductMeta:
      type: object
      properties:
        sale_id:
          $ref: '#/components/schemas/SaleID'
        sale_expires:
          $ref: '#/components/schemas/SaleExpires'
        price:
          type: object
          title: Currencies
          description: Collection of currency specific prices for a product.
          additionalProperties:
            $ref: '#/components/schemas/PriceAmount'
        display_price:
          type: object
          x-omitempty: true
          properties:
            with_tax:
              type: object
              title: FormattedPrice
              x-omitempty: true
              description: A price formatted for display.
              properties:
                amount:
                  type: integer
                  x-omitempty: false
                  example: '47500'
                currency:
                  type: string
                  example: USD
                formatted:
                  type: string
                  example: $475.00
            without_tax:
              type: object
              title: FormattedPrice
              x-omitempty: true
              description: A price formatted for display.
              properties:
                amount:
                  type: integer
                  x-omitempty: false
                  example: '47500'
                currency:
                  type: string
                  example: USD
                formatted:
                  type: string
                  example: $475.00
        original_price:
          type: object
          title: Currencies
          description: Collection of currency specific prices for a product.
          additionalProperties:
            $ref: '#/components/schemas/PriceAmount'
        original_display_price:
          type: object
          x-omitempty: true
          properties:
            with_tax:
              type: object
              title: FormattedPrice
              x-omitempty: true
              description: A price formatted for display.
              properties:
                amount:
                  type: integer
                  x-omitempty: false
                  example: '47500'
                currency:
                  type: string
                  example: USD
                formatted:
                  type: string
                  example: $475.00
            without_tax:
              type: object
              title: FormattedPrice
              x-omitempty: true
              description: A price formatted for display.
              properties:
                amount:
                  type: integer
                  x-omitempty: false
                  example: '47500'
                currency:
                  type: string
                  example: USD
                formatted:
                  type: string
                  example: $475.00
        pricebook_id:
          $ref: '#/components/schemas/PricebookID'
      x-go-name: ComponentProductMeta
    PriceModifierMeta:
      type: object
      properties:
        modifier_type:
          type: string
          example: price_equals
        currencies:
          type: object
          title: Currencies
          description: Collection of currency specific prices for a product.
          additionalProperties:
            $ref: '#/components/schemas/PriceAmount'
      x-go-name: PriceModifierMeta
    ProductMetaTier:
      type: object
      properties:
        sale_id:
          $ref: '#/components/schemas/SaleID'
        sale_expires:
          $ref: '#/components/schemas/SaleExpires'
        display_price:
          type: object
          x-omitempty: true
          properties:
            with_tax:
              type: object
              title: FormattedPrice
              x-omitempty: true
              description: A price formatted for display.
              properties:
                amount:
                  type: integer
                  x-omitempty: false
                  example: '47500'
                currency:
                  type: string
                  example: USD
                formatted:
                  type: string
                  example: $475.00
            without_tax:
              type: object
              title: FormattedPrice
              x-omitempty: true
              description: A price formatted for display.
              properties:
                amount:
                  type: integer
                  x-omitempty: false
                  example: '47500'
                currency:
                  type: string
                  example: USD
                formatted:
                  type: string
                  example: $475.00
        original_price:
          type: object
          title: Currencies
          description: Collection of currency specific prices for a product.
          additionalProperties:
            $ref: '#/components/schemas/PriceAmount'
        original_display_price:
          type: object
          x-omitempty: true
          properties:
            with_tax:
              type: object
              title: FormattedPrice
              x-omitempty: true
              description: A price formatted for display.
              properties:
                amount:
                  type: integer
                  x-omitempty: false
                  example: '47500'
                currency:
                  type: string
                  example: USD
                formatted:
                  type: string
                  example: $475.00
            without_tax:
              type: object
              title: FormattedPrice
              x-omitempty: true
              description: A price formatted for display.
              properties:
                amount:
                  type: integer
                  x-omitempty: false
                  example: '47500'
                currency:
                  type: string
                  example: USD
                formatted:
                  type: string
                  example: $475.00
      x-go-name: ProductMetaTier
    ProductMetaTiers:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ProductMetaTier'
      x-go-name: ProductMetaTiers
    ProductVariationOption:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
        description:
          type: string
      x-go-name: ProductVariationOption
    ProductVariation:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariationOption'
      x-go-name: ProductVariation
    ProductMeta:
      type: object
      title: ProductMeta
      description: A product's metadata.
      properties:
        bread_crumb:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
              example: 8dbb35b2-ef04-477e-974d-e5f3abe6faae
          x-omitempty: true
        catalog_id:
          $ref: '#/components/schemas/CatalogID'
        pricebook_id:
          $ref: '#/components/schemas/PricebookID'
        display_price:
          type: object
          x-omitempty: true
          properties:
            with_tax:
              type: object
              title: FormattedPrice
              x-omitempty: true
              description: A price formatted for display.
              properties:
                amount:
                  type: integer
                  x-omitempty: false
                  example: '47500'
                currency:
                  type: string
                  example: USD
                formatted:
                  type: string
                  example: $475.00
            without_tax:
              type: object
              title: FormattedPrice
              x-omitempty: true
              description: A price formatted for display.
              properties:
                amount:
                  type: integer
                  x-omitempty: false
                  example: '47500'
                currency:
                  type: string
                  example: USD
                formatted:
                  type: string
                  example: $475.00
        catalog_source:
          $ref: '#/components/schemas/CatalogSource'
        sale_id:
          $ref: '#/components/schemas/SaleID'
        sale_expires:
          $ref: '#/components/schemas/SaleExpires'
        original_price:
          type: object
          title: Currencies
          description: Collection of currency specific prices for a product.
          additionalProperties:
            $ref: '#/components/schemas/PriceAmount'
        original_display_price:
          type: object
          x-omitempty: true
          properties:
            with_tax:
              type: object
              title: FormattedPrice
              x-omitempty: true
              description: A price formatted for display.
              properties:
                amount:
                  type: integer
                  x-omitempty: false
                  example: '47500'
                currency:
                  type: string
                  example: USD
                formatted:
                  type: string
                  example: $475.00
            without_tax:
              type: object
              title: FormattedPrice
              x-omitempty: true
              description: A price formatted for display.
              properties:
                amount:
                  type: integer
                  x-omitempty: false
                  example: '47500'
                currency:
                  type: string
                  example: USD
                formatted:
                  type: string
                  example: $475.00
        bundle_configuration:
          $ref: '#/components/schemas/ProductBundleConfiguration'
        component_products:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ComponentProductMeta'
        price_modifiers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PriceModifierMeta'
        tiers:
          $ref: '#/components/schemas/ProductMetaTiers'
        variation_matrix:
          type: object
        variations:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariation'
          x-omitempty: true
        language:
          type: string
          example: en-GB
      x-go-name: ProductMeta
      x-omitempty: true
    Product:
      type: object
      title: Product
      description: A product in a catalog.
      properties:
        attributes:
          $ref: '#/components/schemas/ProductAttributes'
        id:
          $ref: '#/components/schemas/ID'
        relationships:
          $ref: '#/components/schemas/ProductRelationships'
        type:
          $ref: '#/components/schemas/Type'
        meta:
          $ref: '#/components/schemas/ProductMeta'
      x-go-name: Product
  securitySchemes:
    bearerAuthentication:
      type: apiKey
      in: header
      name: Authorization
paths:
  /pcm/catalogs:
    get:
      tags:
        - Catalogs
      summary: Gets all authorized catalogs.
      operationId: getCatalogs
      parameters: []
      responses:
        '200':
          description: The list of catalogs.
          content:
            application/json:
              schema:
                type: object
                title: CatalogListData
                description: Container for a list of catalogs.
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      title: Catalog
                      description: >-
                        A catalog combines pricebooks, product lists, and
                        hierarchies.
                      properties:
                        id:
                          type: string
                          description: >-
                            The catalog ID. Use this to modify the catalog's
                            catalog, or to retrieve the catalog produced by this
                            catalog.
                          example: 8dbb35b2-ef04-477e-974d-e5f3abe6faae
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                              example: catalog-123
                            description:
                              type: string
                              example: Catalog for Store 123
                              default: ''
                            hierarchy_ids:
                              type: array
                              items:
                                type: string
                            pricebook_id:
                              type: string
                            pricebook_ids:
                              type: array
                              items:
                                $ref: '#/components/schemas/PrioritizedPricebook'
                            locales:
                              type: object
                              additionalProperties:
                                type: object
                                additionalProperties:
                                  type: string
                            created_at:
                              type: string
                              example: '2020-09-22 09:00:00+00:00'
                              format: date-time
                            updated_at:
                              type: string
                              example: '2020-09-22 09:00:00+00:00'
                              format: date-time
                          required:
                            - name
                            - hierarchy_ids
                            - created_at
                            - updated_at
                        relationships:
                          type: object
                          title: CatalogRelationships
                          description: Relationships to rules
                          properties:
                            rules:
                              type: object
                              properties:
                                links:
                                  type: object
                                  properties:
                                    related:
                                      type: string
                                  required:
                                    - related
                            releases:
                              type: object
                              properties:
                                links:
                                  type: object
                                  properties:
                                    related:
                                      type: string
                                  required:
                                    - related
                                meta:
                                  type: object
                                  properties:
                                    count:
                                      type: integer
                        type:
                          type: string
                          example: catalog
                          enum:
                            - catalog
                      required:
                        - id
                        - type
                        - attributes
                  links:
                    $ref: '#/components/schemas/Links'
                required:
                  - data
        default:
          description: An unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    post:
      tags:
        - Catalogs
      summary: Creates a new catalog.
      operationId: createCatalog
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: CatalogCreateData
              description: 'A catalog combines pricebooks, product lists, and hierarchies.'
              properties:
                data:
                  type: object
                  properties:
                    attributes:
                      type: object
                      properties:
                        name:
                          type: string
                          minLength: 1
                          example: catalog-123
                        description:
                          type: string
                          example: Catalog for Store 123
                          nullable: true
                        hierarchy_ids:
                          type: array
                          items:
                            type: string
                        pricebook_id:
                          type: string
                        pricebook_ids:
                          type: array
                          items:
                            $ref: '#/components/schemas/PrioritizedPricebook'
                        locales:
                          type: object
                          additionalProperties:
                            type: object
                            additionalProperties:
                              type: string
                      required:
                        - name
                        - hierarchy_ids
                    type:
                      type: string
                      example: catalog
                      enum:
                        - catalog
                  required:
                    - type
                    - attributes
              required:
                - data
        description: The catalog to create.
        required: true
      responses:
        '201':
          description: The created catalog
          content:
            application/json:
              schema:
                type: object
                title: CatalogData
                description: Container for a single catalog.
                properties:
                  data:
                    type: object
                    title: Catalog
                    description: >-
                      A catalog combines pricebooks, product lists, and
                      hierarchies.
                    properties:
                      id:
                        type: string
                        description: >-
                          The catalog ID. Use this to modify the catalog's
                          catalog, or to retrieve the catalog produced by this
                          catalog.
                        example: 8dbb35b2-ef04-477e-974d-e5f3abe6faae
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: catalog-123
                          description:
                            type: string
                            example: Catalog for Store 123
                            default: ''
                          hierarchy_ids:
                            type: array
                            items:
                              type: string
                          pricebook_id:
                            type: string
                          pricebook_ids:
                            type: array
                            items:
                              $ref: '#/components/schemas/PrioritizedPricebook'
                          locales:
                            type: object
                            additionalProperties:
                              type: object
                              additionalProperties:
                                type: string
                          created_at:
                            type: string
                            example: '2020-09-22 09:00:00+00:00'
                            format: date-time
                          updated_at:
                            type: string
                            example: '2020-09-22 09:00:00+00:00'
                            format: date-time
                        required:
                          - name
                          - hierarchy_ids
                          - created_at
                          - updated_at
                      relationships:
                        type: object
                        title: CatalogRelationships
                        description: Relationships to rules
                        properties:
                          rules:
                            type: object
                            properties:
                              links:
                                type: object
                                properties:
                                  related:
                                    type: string
                                required:
                                  - related
                          releases:
                            type: object
                            properties:
                              links:
                                type: object
                                properties:
                                  related:
                                    type: string
                                required:
                                  - related
                              meta:
                                type: object
                                properties:
                                  count:
                                    type: integer
                      type:
                        type: string
                        example: catalog
                        enum:
                          - catalog
                    required:
                      - id
                      - type
                      - attributes
                  links:
                    $ref: '#/components/schemas/Links'
                required:
                  - data
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalogs/{catalog_id}':
    get:
      tags:
        - Catalogs
      summary: Get a catalog by ID.
      operationId: getCatalogByID
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The catalog.
          content:
            application/json:
              schema:
                type: object
                title: CatalogData
                description: Container for a single catalog.
                properties:
                  data:
                    type: object
                    title: Catalog
                    description: >-
                      A catalog combines pricebooks, product lists, and
                      hierarchies.
                    properties:
                      id:
                        type: string
                        description: >-
                          The catalog ID. Use this to modify the catalog's
                          catalog, or to retrieve the catalog produced by this
                          catalog.
                        example: 8dbb35b2-ef04-477e-974d-e5f3abe6faae
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: catalog-123
                          description:
                            type: string
                            example: Catalog for Store 123
                            default: ''
                          hierarchy_ids:
                            type: array
                            items:
                              type: string
                          pricebook_id:
                            type: string
                          pricebook_ids:
                            type: array
                            items:
                              $ref: '#/components/schemas/PrioritizedPricebook'
                          locales:
                            type: object
                            additionalProperties:
                              type: object
                              additionalProperties:
                                type: string
                          created_at:
                            type: string
                            example: '2020-09-22 09:00:00+00:00'
                            format: date-time
                          updated_at:
                            type: string
                            example: '2020-09-22 09:00:00+00:00'
                            format: date-time
                        required:
                          - name
                          - hierarchy_ids
                          - created_at
                          - updated_at
                      relationships:
                        type: object
                        title: CatalogRelationships
                        description: Relationships to rules
                        properties:
                          rules:
                            type: object
                            properties:
                              links:
                                type: object
                                properties:
                                  related:
                                    type: string
                                required:
                                  - related
                          releases:
                            type: object
                            properties:
                              links:
                                type: object
                                properties:
                                  related:
                                    type: string
                                required:
                                  - related
                              meta:
                                type: object
                                properties:
                                  count:
                                    type: integer
                      type:
                        type: string
                        example: catalog
                        enum:
                          - catalog
                    required:
                      - id
                      - type
                      - attributes
                  links:
                    $ref: '#/components/schemas/Links'
                required:
                  - data
        default:
          description: An unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    put:
      tags:
        - Catalogs
      summary: Updates a catalog.
      operationId: updateCatalog
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: CatalogUpdateData
              description: 'A catalog combines pricebooks, product lists, and hierarchies.'
              properties:
                data:
                  type: object
                  properties:
                    attributes:
                      type: object
                      properties:
                        name:
                          type: string
                          minLength: 1
                          example: catalog-123
                          nullable: true
                        description:
                          type: string
                          example: Catalog for Store 123
                          nullable: true
                        hierarchy_ids:
                          type: array
                          items:
                            type: string
                          nullable: true
                        pricebook_id:
                          type: string
                          nullable: true
                        pricebook_ids:
                          type: array
                          items:
                            $ref: '#/components/schemas/PrioritizedPricebook'
                        locales:
                          type: object
                          additionalProperties:
                            type: object
                            additionalProperties:
                              type: string
                    id:
                      $ref: '#/components/schemas/ID'
                    type:
                      type: string
                      example: catalog
                      enum:
                        - catalog
                  required:
                    - type
                    - id
                    - attributes
              required:
                - data
        description: Updated catalog.
        required: true
      responses:
        '200':
          description: Updated catalog response.
          content:
            application/json:
              schema:
                type: object
                title: CatalogData
                description: Container for a single catalog.
                properties:
                  data:
                    type: object
                    title: Catalog
                    description: >-
                      A catalog combines pricebooks, product lists, and
                      hierarchies.
                    properties:
                      id:
                        type: string
                        description: >-
                          The catalog ID. Use this to modify the catalog's
                          catalog, or to retrieve the catalog produced by this
                          catalog.
                        example: 8dbb35b2-ef04-477e-974d-e5f3abe6faae
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: catalog-123
                          description:
                            type: string
                            example: Catalog for Store 123
                            default: ''
                          hierarchy_ids:
                            type: array
                            items:
                              type: string
                          pricebook_id:
                            type: string
                          pricebook_ids:
                            type: array
                            items:
                              $ref: '#/components/schemas/PrioritizedPricebook'
                          locales:
                            type: object
                            additionalProperties:
                              type: object
                              additionalProperties:
                                type: string
                          created_at:
                            type: string
                            example: '2020-09-22 09:00:00+00:00'
                            format: date-time
                          updated_at:
                            type: string
                            example: '2020-09-22 09:00:00+00:00'
                            format: date-time
                        required:
                          - name
                          - hierarchy_ids
                          - created_at
                          - updated_at
                      relationships:
                        type: object
                        title: CatalogRelationships
                        description: Relationships to rules
                        properties:
                          rules:
                            type: object
                            properties:
                              links:
                                type: object
                                properties:
                                  related:
                                    type: string
                                required:
                                  - related
                          releases:
                            type: object
                            properties:
                              links:
                                type: object
                                properties:
                                  related:
                                    type: string
                                required:
                                  - related
                              meta:
                                type: object
                                properties:
                                  count:
                                    type: integer
                      type:
                        type: string
                        example: catalog
                        enum:
                          - catalog
                    required:
                      - id
                      - type
                      - attributes
                  links:
                    $ref: '#/components/schemas/Links'
                required:
                  - data
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    delete:
      tags:
        - Catalogs
      summary: >-
        Deletes a catalog only when the catalog is not published or its release
        has been deleted.
      operationId: deleteCatalogByID
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: A 204 response indicates that the catalog has been deleted.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalogs/{catalog_id}/releases':
    get:
      tags:
        - Catalog Releases
      summary: Gets all authorized catalog releases.
      operationId: getReleases
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The list of catalogs.
          content:
            application/json:
              schema:
                type: object
                title: ReleaseListData
                description: Container for a list of catalog releases.
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Release'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    post:
      tags:
        - Catalog Releases
      summary: Publishes a catalog.
      operationId: publishRelease
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Publish action summary.
          content:
            application/json:
              schema:
                type: object
                title: Release Data
                description: Container for a catalog release.
                properties:
                  data:
                    $ref: '#/components/schemas/Release'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    delete:
      tags:
        - Catalog Releases
      summary: Deletes all releases.
      operationId: deleteReleases
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: A 204 response indicates that the releases have been deleted.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalogs/{catalog_id}/releases/{release_id}':
    get:
      tags:
        - Catalog Releases
      summary: Get a catalog release by ID.
      operationId: getReleaseByID
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog release ID.
          name: release_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The catalog.
          content:
            application/json:
              schema:
                type: object
                title: Release Data
                description: Container for a catalog release.
                properties:
                  data:
                    $ref: '#/components/schemas/Release'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    delete:
      tags:
        - Catalog Releases
      summary: Deletes a release.
      operationId: deleteReleaseByID
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog release ID.
          name: release_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: A 204 response indicates that the release has been deleted.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  /pcm/catalogs/rules:
    get:
      tags:
        - Catalog Rules
      summary: Gets all authorized catalog rules.
      operationId: getRules
      parameters:
        - name: filter
          in: query
          description: A filter specification
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: The list of catalog rules.
          content:
            application/json:
              schema:
                type: object
                title: CatalogRuleListData
                description: Container for a list of catalog rules.
                properties:
                  meta:
                    $ref: '#/components/schemas/PageMeta'
                  data:
                    type: array
                    items:
                      type: object
                      title: Catalog Rule
                      description: >-
                        A catalog rule specifies which catalog to use for a
                        given shopper context.
                      properties:
                        id:
                          type: string
                          description: >-
                            The catalog rule ID. Use this to get, modify, or
                            delete the catalog rule.
                          example: 8dbb35b2-ef04-477e-974d-e5f3abe6faae
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                              example: rule-123
                            description:
                              type: string
                              example: Catalog Rule for most favored customers
                              default: ''
                              x-omitempty: true
                            account_ids:
                              type: array
                              items:
                                type: string
                              x-omitempty: true
                            customer_ids:
                              type: array
                              items:
                                type: string
                              x-omitempty: true
                            channels:
                              type: array
                              items:
                                type: string
                              x-omitempty: true
                            tags:
                              type: array
                              items:
                                type: string
                              x-omitempty: true
                            schedules:
                              type: array
                              items:
                                $ref: '#/components/schemas/RuleSchedule'
                              x-omitempty: true
                            catalog_id:
                              type: string
                              description: >-
                                Either the ID of a catalog, or 'legacy' to use
                                catalog data set up with `/v2/products`
                              example: d09b4e16-08a5-4f42-817c-6e0d98acbb63
                            created_at:
                              type: string
                              example: '2020-09-22 09:00:00+00:00'
                              format: date-time
                            updated_at:
                              type: string
                              example: '2020-09-22 09:00:00+00:00'
                              format: date-time
                          required:
                            - name
                            - catalog_id
                            - created_at
                            - updated_at
                        type:
                          type: string
                          example: catalog_rule
                          enum:
                            - catalog_rule
                      required:
                        - id
                        - type
                        - attributes
                  links:
                    $ref: '#/components/schemas/Links'
                required:
                  - data
        default:
          description: An unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    post:
      tags:
        - Catalog Rules
      summary: Creates a new catalog rule.
      operationId: createRule
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: CatalogRuleCreateData
              description: >-
                A catalog rule specifies which catalog to use for a given
                shopper context.
              properties:
                data:
                  type: object
                  properties:
                    attributes:
                      type: object
                      properties:
                        name:
                          type: string
                          minLength: 1
                          example: rule-123
                        description:
                          type: string
                          example: Catalog Rule for most favored customers
                          default: ''
                          nullable: true
                        account_ids:
                          type: array
                          items:
                            type: string
                          nullable: true
                        customer_ids:
                          type: array
                          items:
                            type: string
                          nullable: true
                        channels:
                          type: array
                          items:
                            type: string
                          nullable: true
                        tags:
                          type: array
                          items:
                            type: string
                          nullable: true
                        schedules:
                          type: array
                          items:
                            $ref: '#/components/schemas/RuleSchedule'
                          nullable: true
                        catalog_id:
                          type: string
                          description: >-
                            Either the ID of a catalog, or 'legacy' to use
                            catalog data set up with `/v2/products`
                          example: d09b4e16-08a5-4f42-817c-6e0d98acbb63
                      required:
                        - name
                        - catalog_id
                    type:
                      type: string
                      example: catalog_rule
                      enum:
                        - catalog_rule
                  required:
                    - type
                    - attributes
              required:
                - data
        description: The catalog rule to create.
        required: true
      responses:
        '201':
          description: The created catalog rule
          content:
            application/json:
              schema:
                type: object
                title: CatalogRuleData
                description: Container for a single catalog rule.
                properties:
                  data:
                    type: object
                    title: Catalog Rule
                    description: >-
                      A catalog rule specifies which catalog to use for a given
                      shopper context.
                    properties:
                      id:
                        type: string
                        description: >-
                          The catalog rule ID. Use this to get, modify, or
                          delete the catalog rule.
                        example: 8dbb35b2-ef04-477e-974d-e5f3abe6faae
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: rule-123
                          description:
                            type: string
                            example: Catalog Rule for most favored customers
                            default: ''
                            x-omitempty: true
                          account_ids:
                            type: array
                            items:
                              type: string
                            x-omitempty: true
                          customer_ids:
                            type: array
                            items:
                              type: string
                            x-omitempty: true
                          channels:
                            type: array
                            items:
                              type: string
                            x-omitempty: true
                          tags:
                            type: array
                            items:
                              type: string
                            x-omitempty: true
                          schedules:
                            type: array
                            items:
                              $ref: '#/components/schemas/RuleSchedule'
                            x-omitempty: true
                          catalog_id:
                            type: string
                            description: >-
                              Either the ID of a catalog, or 'legacy' to use
                              catalog data set up with `/v2/products`
                            example: d09b4e16-08a5-4f42-817c-6e0d98acbb63
                          created_at:
                            type: string
                            example: '2020-09-22 09:00:00+00:00'
                            format: date-time
                          updated_at:
                            type: string
                            example: '2020-09-22 09:00:00+00:00'
                            format: date-time
                        required:
                          - name
                          - catalog_id
                          - created_at
                          - updated_at
                      type:
                        type: string
                        example: catalog_rule
                        enum:
                          - catalog_rule
                    required:
                      - id
                      - type
                      - attributes
                  links:
                    $ref: '#/components/schemas/Links'
                required:
                  - data
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalogs/rules/{catalog_rule_id}':
    get:
      tags:
        - Catalog Rules
      summary: Get a catalog rule by ID.
      operationId: getRuleByID
      parameters:
        - description: The catalog rule ID.
          name: catalog_rule_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The catalog rile.
          content:
            application/json:
              schema:
                type: object
                title: CatalogRuleData
                description: Container for a single catalog rule.
                properties:
                  data:
                    type: object
                    title: Catalog Rule
                    description: >-
                      A catalog rule specifies which catalog to use for a given
                      shopper context.
                    properties:
                      id:
                        type: string
                        description: >-
                          The catalog rule ID. Use this to get, modify, or
                          delete the catalog rule.
                        example: 8dbb35b2-ef04-477e-974d-e5f3abe6faae
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: rule-123
                          description:
                            type: string
                            example: Catalog Rule for most favored customers
                            default: ''
                            x-omitempty: true
                          account_ids:
                            type: array
                            items:
                              type: string
                            x-omitempty: true
                          customer_ids:
                            type: array
                            items:
                              type: string
                            x-omitempty: true
                          channels:
                            type: array
                            items:
                              type: string
                            x-omitempty: true
                          tags:
                            type: array
                            items:
                              type: string
                            x-omitempty: true
                          schedules:
                            type: array
                            items:
                              $ref: '#/components/schemas/RuleSchedule'
                            x-omitempty: true
                          catalog_id:
                            type: string
                            description: >-
                              Either the ID of a catalog, or 'legacy' to use
                              catalog data set up with `/v2/products`
                            example: d09b4e16-08a5-4f42-817c-6e0d98acbb63
                          created_at:
                            type: string
                            example: '2020-09-22 09:00:00+00:00'
                            format: date-time
                          updated_at:
                            type: string
                            example: '2020-09-22 09:00:00+00:00'
                            format: date-time
                        required:
                          - name
                          - catalog_id
                          - created_at
                          - updated_at
                      type:
                        type: string
                        example: catalog_rule
                        enum:
                          - catalog_rule
                    required:
                      - id
                      - type
                      - attributes
                  links:
                    $ref: '#/components/schemas/Links'
                required:
                  - data
        default:
          description: An unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    put:
      tags:
        - Catalog Rules
      summary: Updates a catalogRule.
      operationId: updateRule
      parameters:
        - description: The catalog rule ID.
          name: catalog_rule_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: CatalogRuleUpdateData
              description: >-
                A catalog rule specifies which catalog to use for a given
                shopper context.
              properties:
                data:
                  type: object
                  properties:
                    id:
                      type: string
                      description: >-
                        The catalog rule ID. Use this to get, modify, or delete
                        the catalog rule.
                      example: 8dbb35b2-ef04-477e-974d-e5f3abe6faae
                    attributes:
                      type: object
                      properties:
                        name:
                          type: string
                          minLength: 1
                          example: rule-123
                          nullable: true
                        description:
                          type: string
                          example: Catalog Rule for most favored customers
                          default: ''
                          nullable: true
                        account_ids:
                          type: array
                          items:
                            type: string
                          nullable: true
                        customer_ids:
                          type: array
                          items:
                            type: string
                          nullable: true
                        channels:
                          type: array
                          items:
                            type: string
                          nullable: true
                        schedules:
                          type: array
                          items:
                            $ref: '#/components/schemas/RuleSchedule'
                          nullable: true
                        tags:
                          type: array
                          items:
                            type: string
                          nullable: true
                        catalog_id:
                          type: string
                          description: >-
                            Either the ID of a catalog, or 'legacy' to use
                            catalog data set up with `/v2/products`
                          example: d09b4e16-08a5-4f42-817c-6e0d98acbb63
                          nullable: true
                    type:
                      type: string
                      example: catalog_rule
                      enum:
                        - catalog_rule
                  required:
                    - id
                    - type
              required:
                - data
        description: Updated catalog rule.
        required: true
      responses:
        '200':
          description: Updated catalog rule response.
          content:
            application/json:
              schema:
                type: object
                title: CatalogRuleData
                description: Container for a single catalog rule.
                properties:
                  data:
                    type: object
                    title: Catalog Rule
                    description: >-
                      A catalog rule specifies which catalog to use for a given
                      shopper context.
                    properties:
                      id:
                        type: string
                        description: >-
                          The catalog rule ID. Use this to get, modify, or
                          delete the catalog rule.
                        example: 8dbb35b2-ef04-477e-974d-e5f3abe6faae
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: rule-123
                          description:
                            type: string
                            example: Catalog Rule for most favored customers
                            default: ''
                            x-omitempty: true
                          account_ids:
                            type: array
                            items:
                              type: string
                            x-omitempty: true
                          customer_ids:
                            type: array
                            items:
                              type: string
                            x-omitempty: true
                          channels:
                            type: array
                            items:
                              type: string
                            x-omitempty: true
                          tags:
                            type: array
                            items:
                              type: string
                            x-omitempty: true
                          schedules:
                            type: array
                            items:
                              $ref: '#/components/schemas/RuleSchedule'
                            x-omitempty: true
                          catalog_id:
                            type: string
                            description: >-
                              Either the ID of a catalog, or 'legacy' to use
                              catalog data set up with `/v2/products`
                            example: d09b4e16-08a5-4f42-817c-6e0d98acbb63
                          created_at:
                            type: string
                            example: '2020-09-22 09:00:00+00:00'
                            format: date-time
                          updated_at:
                            type: string
                            example: '2020-09-22 09:00:00+00:00'
                            format: date-time
                        required:
                          - name
                          - catalog_id
                          - created_at
                          - updated_at
                      type:
                        type: string
                        example: catalog_rule
                        enum:
                          - catalog_rule
                    required:
                      - id
                      - type
                      - attributes
                  links:
                    $ref: '#/components/schemas/Links'
                required:
                  - data
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    delete:
      tags:
        - Catalog Rules
      summary: Deletes a catalog rule.
      operationId: deleteRuleByID
      parameters:
        - description: The catalog rule ID.
          name: catalog_rule_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: A 204 response indicates that the catalog rule has been deleted.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  /pcm/catalog:
    get:
      tags:
        - Catalog Releases
      summary: Get the catalog release.
      operationId: getByContextRelease
      parameters: []
      responses:
        '200':
          description: The catalog.
          headers:
            Surrogate-Control:
              schema:
                type: string
            Expires:
              schema:
                type: string
            Vary:
              schema:
                type: string
            Surrogate-Key:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                title: Release Data
                description: Container for a catalog release.
                properties:
                  data:
                    $ref: '#/components/schemas/Release'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalogs/{catalog_id}/releases/{release_id}/hierarchies':
    get:
      tags:
        - Catalog Hierarchies
      summary: Get all hierarchies in a catalog release.
      operationId: getAllHierarchies
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog release ID.
          name: release_id
          in: path
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: A filter specification
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: The hierarchies of a catalog.
          content:
            application/json:
              schema:
                type: object
                title: HierarchyListData
                description: Container for a list of hierarchies.
                properties:
                  meta:
                    $ref: '#/components/schemas/PageMeta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Hierarchy'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: An unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalogs/{catalog_id}/releases/{release_id}/hierarchies/{hierarchy_id}':
    get:
      tags:
        - Catalog Hierarchies
      summary: Get a specific hierarchy in a catalog release.
      operationId: getHierarchy
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog release ID.
          name: release_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog hierarchy ID.
          name: hierarchy_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The catalog hierarchy.
          content:
            application/json:
              schema:
                type: object
                title: HierarchyData
                description: Container for hierarchies.
                properties:
                  data:
                    $ref: '#/components/schemas/Hierarchy'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalogs/{catalog_id}/releases/{release_id}/hierarchies/{hierarchy_id}/nodes':
    get:
      tags:
        - Catalog Nodes
      summary: Get all of a hierarchy's nodes.
      operationId: getHierarchyNodes
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog release ID.
          name: release_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog hierarchy ID.
          name: hierarchy_id
          in: path
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: A filter specification
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: The child nodes of a catalog hierarchy.
          content:
            application/json:
              schema:
                type: object
                title: NodeListData
                description: Container for a list of nodes.
                properties:
                  meta:
                    $ref: '#/components/schemas/PageMeta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalogs/{catalog_id}/releases/{release_id}/hierarchies/{hierarchy_id}/children':
    get:
      tags:
        - Catalog Hierarchies
      summary: Get child nodes.
      operationId: getHierarchyChildNodes
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog release ID.
          name: release_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog hierarchy ID.
          name: hierarchy_id
          in: path
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: A filter specification
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: The child nodes of a catalog hierarchy.
          content:
            application/json:
              schema:
                type: object
                title: NodeListData
                description: Container for a list of nodes.
                properties:
                  meta:
                    $ref: '#/components/schemas/PageMeta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalogs/{catalog_id}/releases/{release_id}/hierarchies/{hierarchy_id}/products':
    get:
      tags:
        - Catalog Products
      summary: Get hierarchy products.
      operationId: getProductsForHierarchy
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog release ID.
          name: release_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog hierarchy ID.
          name: hierarchy_id
          in: path
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: A filter specification
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: The products of a catalog hierarchy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListData'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalogs/{catalog_id}/releases/{release_id}/nodes':
    get:
      tags:
        - Catalog Nodes
      summary: Get all nodes in a catalog release.
      operationId: getAllNodes
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog release ID.
          name: release_id
          in: path
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: A filter specification
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: The nodes of a catalog.
          content:
            application/json:
              schema:
                type: object
                title: NodeListData
                description: Container for a list of nodes.
                properties:
                  meta:
                    $ref: '#/components/schemas/PageMeta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: An unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  /pcm/catalog/hierarchies:
    get:
      tags:
        - Catalog Hierarchies
      summary: Get all hierarchies in a catalog release.
      operationId: getByContextAllHierarchies
      parameters:
        - name: filter
          in: query
          description: A filter specification
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: The hierarchies of the catalog.
          headers:
            Surrogate-Control:
              schema:
                type: string
            Expires:
              schema:
                type: string
            Vary:
              schema:
                type: string
            Surrogate-Key:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                title: HierarchyListData
                description: Container for a list of hierarchies.
                properties:
                  meta:
                    $ref: '#/components/schemas/PageMeta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Hierarchy'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: An unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalog/hierarchies/{hierarchy_id}':
    get:
      tags:
        - Catalog Hierarchies
      summary: Get a specific hierarchy in the catalog release.
      operationId: getByContextHierarchy
      parameters:
        - description: The catalog hierarchy ID.
          name: hierarchy_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The catalog hierarchy.
          headers:
            Surrogate-Control:
              schema:
                type: string
            Expires:
              schema:
                type: string
            Vary:
              schema:
                type: string
            Surrogate-Key:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                title: HierarchyData
                description: Container for hierarchies.
                properties:
                  data:
                    $ref: '#/components/schemas/Hierarchy'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalog/hierarchies/{hierarchy_id}/nodes':
    get:
      tags:
        - Catalog Nodes
      summary: Get all of a hierarchy's nodes.
      operationId: getByContextHierarchyNodes
      parameters:
        - name: filter
          in: query
          description: A filter specification
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - description: The catalog hierarchy ID.
          name: hierarchy_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The child nodes of a catalog hierarchy.
          headers:
            Surrogate-Control:
              schema:
                type: string
            Expires:
              schema:
                type: string
            Vary:
              schema:
                type: string
            Surrogate-Key:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                title: NodeListData
                description: Container for a list of nodes.
                properties:
                  meta:
                    $ref: '#/components/schemas/PageMeta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalog/hierarchies/{hierarchy_id}/children':
    get:
      tags:
        - Catalog Hierarchies
      summary: Get child nodes.
      operationId: getByContextHierarchyChildNodes
      parameters:
        - name: filter
          in: query
          description: A filter specification
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - description: The catalog hierarchy ID.
          name: hierarchy_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The child nodes of a catalog hierarchy.
          headers:
            Surrogate-Control:
              schema:
                type: string
            Expires:
              schema:
                type: string
            Vary:
              schema:
                type: string
            Surrogate-Key:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                title: NodeListData
                description: Container for a list of nodes.
                properties:
                  meta:
                    $ref: '#/components/schemas/PageMeta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalog/hierarchies/{hierarchy_id}/products':
    get:
      tags:
        - Catalog Products
      summary: Get hierarchy products.
      operationId: getByContextProductsForHierarchy
      parameters:
        - name: filter
          in: query
          description: A filter specification
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - description: The catalog hierarchy ID.
          name: hierarchy_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The products of a catalog hierarchy.
          headers:
            Surrogate-Control:
              schema:
                type: string
            Expires:
              schema:
                type: string
            Vary:
              schema:
                type: string
            Surrogate-Key:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListData'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  /pcm/catalog/nodes:
    get:
      tags:
        - Catalog Nodes
      summary: Get all nodes in a catalog release.
      operationId: getByContextAllNodes
      parameters:
        - name: filter
          in: query
          description: A filter specification
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: The nodes of the catalog.
          headers:
            Surrogate-Control:
              schema:
                type: string
            Expires:
              schema:
                type: string
            Vary:
              schema:
                type: string
            Surrogate-Key:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                title: NodeListData
                description: Container for a list of nodes.
                properties:
                  meta:
                    $ref: '#/components/schemas/PageMeta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: An unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalogs/{catalog_id}/releases/{release_id}/nodes/{node_id}':
    get:
      tags:
        - Catalog Nodes
      summary: Get a specific node in a catalog release.
      operationId: getNode
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog release ID.
          name: release_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog node ID.
          name: node_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The catalog node.
          content:
            application/json:
              schema:
                type: object
                title: NodeData
                description: Container for nodes.
                properties:
                  data:
                    $ref: '#/components/schemas/Node'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalog/nodes/{node_id}':
    get:
      tags:
        - Catalog Nodes
      summary: Get a specific node in the catalog release.
      operationId: getByContextNode
      parameters:
        - description: The catalog node ID.
          name: node_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The catalog node.
          headers:
            Surrogate-Control:
              schema:
                type: string
            Expires:
              schema:
                type: string
            Vary:
              schema:
                type: string
            Surrogate-Key:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                title: NodeData
                description: Container for nodes.
                properties:
                  data:
                    $ref: '#/components/schemas/Node'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalogs/{catalog_id}/releases/{release_id}/nodes/{node_id}/relationships/products':
    get:
      tags:
        - Catalog Products
      summary: Get products attached to a specific node.
      operationId: getProductsForNode
      parameters:
        - name: filter
          in: query
          description: A filter specification
          required: false
          schema:
            type: string
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog release ID.
          name: release_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog node ID.
          name: node_id
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: The products of a catalog node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListData'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalog/nodes/{node_id}/relationships/products':
    get:
      tags:
        - Catalog Products
      summary: Get products attached to a specific node.
      operationId: getByContextProductsForNode
      parameters:
        - name: filter
          in: query
          description: A filter specification
          required: false
          schema:
            type: string
        - description: The catalog node ID.
          name: node_id
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: The products of a catalog node.
          headers:
            Surrogate-Control:
              schema:
                type: string
            Expires:
              schema:
                type: string
            Vary:
              schema:
                type: string
            Surrogate-Key:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListData'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalogs/{catalog_id}/releases/{release_id}/products':
    get:
      tags:
        - Catalog Products
      summary: Get all products in a catalog release.
      operationId: getAllProductsInCatalogRelease
      parameters:
        - name: filter
          in: query
          description: A filter specification
          required: false
          schema:
            type: string
        - in: header
          name: EP-Product-Skus
          required: false
          schema:
            type: string
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog release ID.
          name: release_id
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: The products of a catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListData'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  /pcm/catalog/products:
    get:
      tags:
        - Catalog Products
      summary: Get all products in the catalog release.
      operationId: getByContextAllProducts
      parameters:
        - name: filter
          in: query
          description: A filter specification
          required: false
          schema:
            type: string
        - in: header
          name: EP-Product-Skus
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: The products of a catalog.
          headers:
            Surrogate-Control:
              schema:
                type: string
            Expires:
              schema:
                type: string
            Vary:
              schema:
                type: string
            Surrogate-Key:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListData'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalogs/{catalog_id}/releases/{release_id}/products/{product_id}':
    get:
      tags:
        - Catalog Products
      summary: Get a product in a catalog release.
      operationId: getProductInCatalogRelease
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog release ID.
          name: release_id
          in: path
          required: true
          schema:
            type: string
        - description: The product ID.
          name: product_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The product of a catalog.
          content:
            application/json:
              schema:
                type: object
                title: ProductData
                description: Container for products.
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalogs/{catalog_id}/releases/{release_id}/products/{product_id}/relationships/component_products':
    get:
      tags:
        - Catalog Products
      summary: >-
        Get component product IDs of a specific bundle product from a catalog
        release.
      operationId: getComponentProductIDs
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog release ID.
          name: release_id
          in: path
          required: true
          schema:
            type: string
        - description: The product ID.
          name: product_id
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: >-
            The list of component product IDs of a specific bundle product from
            a catalog.
          content:
            application/json:
              schema:
                type: object
                title: ProductReferenceListData
                description: Container for a list of product references.
                properties:
                  meta:
                    $ref: '#/components/schemas/PageMeta'
                  data:
                    $ref: '#/components/schemas/ProductReferences'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalogs/{catalog_id}/releases/{release_id}/products/{product_id}/configure':
    post:
      tags:
        - Catalog Products
      summary: Configure a bundle product in a catalog release.
      operationId: configureProduct
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog release ID.
          name: release_id
          in: path
          required: true
          schema:
            type: string
        - description: The product ID.
          name: product_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: BundleConfigurationData
              description: Container for a bundle configuration.
              properties:
                data:
                  $ref: '#/components/schemas/ProductBundleConfiguration'
              required:
                - data
        description: The bundle configuration.
        required: true
      responses:
        '200':
          description: The configured product of a catalog.
          content:
            application/json:
              schema:
                type: object
                title: ProductData
                description: Container for products.
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalog/products/{product_id}':
    get:
      tags:
        - Catalog Products
      summary: Get a product in the catalog release.
      operationId: getByContextProduct
      parameters:
        - description: The product ID.
          name: product_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The product of a catalog.
          headers:
            Surrogate-Control:
              schema:
                type: string
            Expires:
              schema:
                type: string
            Vary:
              schema:
                type: string
            Surrogate-Key:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                title: ProductData
                description: Container for products.
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalog/products/{product_id}/relationships/component_products':
    get:
      tags:
        - Catalog Products
      summary: >-
        Get a list of component product IDs for a specific bundle product in the
        catalog release.
      operationId: getByContextComponentProductIDs
      parameters:
        - description: The product ID.
          name: product_id
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: >-
            The list of component product IDs of a bundle product from a
            catalog.
          headers:
            Surrogate-Control:
              schema:
                type: string
            Expires:
              schema:
                type: string
            Vary:
              schema:
                type: string
            Surrogate-Key:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                title: ProductReferenceListData
                description: Container for a list of product references.
                properties:
                  meta:
                    $ref: '#/components/schemas/PageMeta'
                  data:
                    $ref: '#/components/schemas/ProductReferences'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalog/products/{product_id}/configure':
    post:
      tags:
        - Catalog Products
      summary: Configure a bundle product in the catalog release.
      operationId: configureByContextProduct
      parameters:
        - description: The product ID.
          name: product_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: BundleConfigurationData
              description: Container for a bundle configuration.
              properties:
                data:
                  $ref: '#/components/schemas/ProductBundleConfiguration'
              required:
                - data
        description: The bundle configuration.
        required: true
      responses:
        '200':
          description: The configured product of a catalog.
          content:
            application/json:
              schema:
                type: object
                title: ProductData
                description: Container for products.
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalogs/{catalog_id}/releases/{release_id}/nodes/{node_id}/relationships/children':
    get:
      tags:
        - Catalog Nodes
      summary: Get child nodes.
      operationId: getChildNodes
      parameters:
        - description: The catalog ID.
          name: catalog_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog release ID.
          name: release_id
          in: path
          required: true
          schema:
            type: string
        - description: The catalog node ID.
          name: node_id
          in: path
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: A filter specification
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: The child nodes of a catalog node.
          content:
            application/json:
              schema:
                type: object
                title: NodeListData
                description: Container for a list of nodes.
                properties:
                  meta:
                    $ref: '#/components/schemas/PageMeta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/catalog/nodes/{node_id}/relationships/children':
    get:
      tags:
        - Catalog Nodes
      summary: Get child nodes.
      operationId: getByContextChildNodes
      parameters:
        - name: filter
          in: query
          description: A filter specification
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - description: The catalog node ID.
          name: node_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The child nodes of a catalog node.
          headers:
            Surrogate-Control:
              schema:
                type: string
            Expires:
              schema:
                type: string
            Vary:
              schema:
                type: string
            Surrogate-Key:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                title: NodeListData
                description: Container for a list of nodes.
                properties:
                  meta:
                    $ref: '#/components/schemas/PageMeta'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
                  links:
                    $ref: '#/components/schemas/Links'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  /pcm/products:
    get:
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/page'
      summary: Get all Products
      operationId: getAllProducts
      description: >
        Retrieves a list of all products in the Product Content Management
        system.
      tags:
        - PIM Product Management
      responses:
        '200':
          description: Successfully returns a list of all products in the store
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListData'
              examples:
                list-products:
                  value:
                    data:
                      - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                        type: product
                        attributes:
                          name: Hungry Hippos
                          description: >-
                            Nom! Nom! Nom! It’s Hungry Hungry Hippo time!
                            Whichever happy hippo eats the most marbles wins the
                            game! From Henry to Harry and Homer to Happy Hippo,
                            these toothy creatures are hungry to play! For 2 to
                            4 players.
                          sku: hungry-hippos
                          slug: hungry-hippos
                          commodity_type: physical
                          upc_ean: '234567899992'
                          mpn: 1234-5678-ABCD
                          locales:
                            fr-FR:
                              name: Hippopotames affamés
                              description: >-
                                Nom! Nom! Nom! C'est l'heure de l'hippopotame
                                affamé! L'hippopotame heureux qui mange le plus
                                de billes remporte la partie! De Henry à Harry
                                et Homer à Happy Hippo, ces créatures à pleines
                                dents ont faim de jouer! Pour 2 à 4 joueurs.
                      - id: 6fa85f64-5717-4562-b3fc-2c963f66afa6
                        type: product
                        attributes:
                          name: Mouse Trap
                          description: >-
                            The Mouse Trap game, a longtime family favourite, is
                            always good for zany action and lots of laughs.
                            Scurry around the board collecting cheese and
                            stealing cheese from other players…but watch out for
                            the trap! While kids are engaged in playing the
                            Mouse Trap game, they can also practice valuable
                            skills in construction, cause and effect and
                            decision-making. As they interact with the trap, a
                            working, multi-part machine, kids can practice
                            construction skills. They can also work on
                            understanding cause and effect as they understand
                            that each action causes a reaction. Players can also
                            practice decision making as they analyse the
                            situation and determine the next best step. Most
                            importantly, kids can have so much fun playing this
                            wacky game!
                          sku: mouse-trap
                          slug: mouse-trap
                          commodity_type: physical
                          upc_ean: '234567899992'
                          mpn: 1234-5678-ABCD
      security:
        - bearerAuthentication: []
    post:
      parameters: []
      summary: Create a Product or Bundle
      description: |
        Creates a product with the attributes that are defined in the body.
      tags:
        - PIM Product Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            examples:
              create-product:
                value:
                  data:
                    type: product
                    attributes:
                      name: Hungry Hippos
                      description: >-
                        Nom! Nom! Nom! It’s Hungry Hungry Hippo time! Whichever
                        happy hippo eats the most marbles wins the game! From
                        Henry to Harry and Homer to Happy Hippo, these toothy
                        creatures are hungry to play! For 2 to 4 players.
                      sku: hungry-hippos
                      slug: hungry-hippos
                      commodity_type: physical
                      upc_ean: '234567899992'
                      mpn: 1234-5678-ABCD
                      locales:
                        fr-FR:
                          name: Hippopotames affamés
                          description: >-
                            Nom! Nom! Nom! C'est l'heure de l'hippopotame
                            affamé! L'hippopotame heureux qui mange le plus de
                            billes remporte la partie! De Henry à Harry et Homer
                            à Happy Hippo, ces créatures à pleines dents ont
                            faim de jouer! Pour 2 à 4 joueurs.
              create-bundle:
                value:
                  data:
                    type: product
                    attributes:
                      name: DOOM Franchise
                      description: All of your favorite DOOM games in one bundle
                      slug: doom-franchise
                      commodity_type: digital
                      upc_ean: '234567899992'
                      mpn: 1234-5678-ABCD
                      components:
                        games:
                          - id: 0533652f-ddff-446c-a9d8-c4535a80c184
                            type: product
                            quantity: 1
      responses:
        '201':
          description: Successfully returns the created product
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - product
                      attributes:
                        type: object
                        additionalProperties: false
                        properties:
                          name:
                            type: string
                          description:
                            type: string
                          slug:
                            type: string
                          sku:
                            type: string
                          status:
                            type: string
                            enum:
                              - live
                              - draft
                          commodity_type:
                            type: string
                            enum:
                              - physical
                              - digital
                          upc_ean:
                            type: string
                          mpn:
                            type: string
                          locales:
                            type: object
              examples:
                created-product:
                  value:
                    data:
                      id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      type: product
                      attributes:
                        name: Hungry Hippos
                        description: >-
                          Nom! Nom! Nom! It’s Hungry Hungry Hippo time!
                          Whichever happy hippo eats the most marbles wins the
                          game! From Henry to Harry and Homer to Happy Hippo,
                          these toothy creatures are hungry to play! For 2 to 4
                          players.
                        sku: hungry-hippos
                        slug: hungry-hippos
                        commodity_type: physical
                        upc_ean: '234567899992'
                        mpn: 1234-5678-ABCD
                        locales:
                          fr-FR:
                            name: Hippopotames affamés
                            description: >-
                              Nom! Nom! Nom! C'est l'heure de l'hippopotame
                              affamé! L'hippopotame heureux qui mange le plus de
                              billes remporte la partie! De Henry à Harry et
                              Homer à Happy Hippo, ces créatures à pleines dents
                              ont faim de jouer! Pour 2 à 4 joueurs.
                created-bundle:
                  value:
                    data:
                      type: product
                      attributes:
                        name: DOOM Franchise
                        description: All of your favorite DOOM games in one bundle
                        slug: doom-franchise
                        commodity_type: digital
                        upc_ean: '234567899992'
                        mpn: 1234-5678-ABCD
                        components:
                          games:
                            - id: 0533652f-ddff-446c-a9d8-c4535a80c184
                              type: product
                              quantity: 1
      security:
        - bearerAuthentication: []
  '/pcm/products/{productID}':
    get:
      parameters:
        - name: productID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the product
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      summary: Get a Product
      operationId: getProduct
      description: |
        Retrieves a product by its identifier.
      tags:
        - PIM Product Management
      responses:
        '200':
          description: Retrieves a product by its identifier.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
              examples:
                get-product:
                  value:
                    data:
                      id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      type: product
                      attributes:
                        name: Hungry Hippos
                        description: >-
                          Nom! Nom! Nom! It’s Hungry Hungry Hippo time!
                          Whichever happy hippo eats the most marbles wins the
                          game! From Henry to Harry and Homer to Happy Hippo,
                          these toothy creatures are hungry to play! For 2 to 4
                          players.
                        sku: hungry-hippos
                        slug: hungry-hippos
                        commodity_type: physical
                        upc_ean: '234567899992'
                        mpn: 1234-5678-ABCD
                        locales:
                          fr-FR:
                            name: Hippopotames affamés
                            description: >-
                              Nom! Nom! Nom! C'est l'heure de l'hippopotame
                              affamé! L'hippopotame heureux qui mange le plus de
                              billes remporte la partie! De Henry à Harry et
                              Homer à Happy Hippo, ces créatures à pleines dents
                              ont faim de jouer! Pour 2 à 4 joueurs.
      security:
        - bearerAuthentication: []
    put:
      parameters:
        - name: productID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the product
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      summary: Update a product
      description: |
        Updates the specified product.
      tags:
        - PIM Product Management
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - product
                    attributes:
                      type: object
                      additionalProperties: false
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        slug:
                          type: string
                        sku:
                          type: string
                        status:
                          type: string
                          enum:
                            - live
                            - draft
                        commodity_type:
                          type: string
                          enum:
                            - physical
                            - digital
                        upc_ean:
                          type: string
                        mpn:
                          type: string
                        locales:
                          type: object
                        components:
                          type: object
            examples:
              update-product:
                value:
                  data:
                    type: product
                    attributes:
                      name: Hungry Hippos
                      description: >-
                        Nom! Nom! Nom! It’s Hungry Hungry Hippo time! Whichever
                        happy hippo eats the most marbles wins the game! From
                        Henry to Harry and Homer to Happy Hippo, these toothy
                        creatures are hungry to play! For 2 to 4 players.
                      sku: hungry-hippos
                      slug: hungry-hippos
                      commodity_type: physical
                      upc_ean: '234567899992'
                      mpn: 1234-5678-ABCD
                      locales:
                        fr-FR:
                          name: Hippopotames affamés
                          description: >-
                            Nom! Nom! Nom! C'est l'heure de l'hippopotame
                            affamé! L'hippopotame heureux qui mange le plus de
                            billes remporte la partie! De Henry à Harry et Homer
                            à Happy Hippo, ces créatures à pleines dents ont
                            faim de jouer! Pour 2 à 4 joueurs.
      responses:
        '200':
          description: Successfully returns the updated product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                updated-product:
                  value:
                    data:
                      id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      type: product
                      attributes:
                        name: Hungry Hippos
                        description: >-
                          Nom! Nom! Nom! It’s Hungry Hungry Hippo time!
                          Whichever happy hippo eats the most marbles wins the
                          game! From Henry to Harry and Homer to Happy Hippo,
                          these toothy creatures are hungry to play! For 2 to 4
                          players.
                        sku: hungry-hippos
                        slug: hungry-hippos
                        commodity_type: physical
                        upc_ean: '234567899992'
                        mpn: 1234-5678-ABCD
                        locales:
                          fr-FR:
                            name: Hippopotames affamés
                            description: >-
                              Nom! Nom! Nom! C'est l'heure de l'hippopotame
                              affamé! L'hippopotame heureux qui mange le plus de
                              billes remporte la partie! De Henry à Harry et
                              Homer à Happy Hippo, ces créatures à pleines dents
                              ont faim de jouer! Pour 2 à 4 joueurs.
      security:
        - bearerAuthentication: []
    delete:
      parameters:
        - name: productID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the product
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      summary: Delete a product
      description: |
        Deletes the specified product.
      tags:
        - PIM Product Management
      responses:
        '204':
          description: No Content
      security:
        - bearerAuthentication: []
  '/pcm/products/{productID}/nodes':
    get:
      parameters:
        - name: productID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the product
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      summary: Get a Products Nodes
      description: |
        Gets all nodes that a product is attached to
      tags:
        - Product Relationships
      responses:
        '200':
          description: Successfully returns the product's nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                          enum:
                            - node
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                            description:
                              type: string
                            slug:
                              type: string
                            locales:
                              type: object
              examples:
                get-product-nodes:
                  value:
                    data:
                      - id: 84b4d579-aa6c-4bed-814f-135d5048474a
                        type: node
                        attributes:
                          name: Ballet Shoes
                          description: All Ballet Shoes
                          slug: ballet-shoes
                          locales:
                            fr-FR:
                              name: Chaussons de ballet
                              description: Toutes les chaussures de ballet
                      - id: 24b4d579-aa6c-4bed-814f-135d5048474a
                        type: node
                        attributes:
                          name: Winter Jackets
                          description: All Winter Jackets
                          slug: winter-jackets
                          locales:
                            fr-FR:
                              name: Vestes d'hiver
                              description: Toutes les vestes d'hiver
      security:
        - bearerAuthentication: []
  '/pcm/products/{productID}/build':
    post:
      parameters:
        - name: productID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the product
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      summary: Build Child Products
      description: >
        If any variations have been attached to the product, builds all child
        products based on the variations, options, and

        modifiers, turning the selected product into a base product.
      tags:
        - PIM Product Management
      responses:
        '204':
          description: Successfully started building child products
      security:
        - bearerAuthentication: []
  '/pcm/products/{productID}/relationships/templates':
    get:
      parameters:
        - name: productID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the product
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      summary: Get Product-Template Relationships
      description: |
        Retrives the templates that are associated with the specified product
      tags:
        - Product Relationships
      responses:
        '200':
          description: Returns all product template relationships
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                          enum:
                            - template
              examples:
                product-template-relationships:
                  value:
                    data:
                      - id: 43903bfa-5352-4a3d-9496-c9ab1229a175
                        type: template
                      - id: 50f56ce9-9381-43f6-8a52-5369a8b42e52
                        type: template
      security:
        - bearerAuthentication: []
    post:
      parameters:
        - name: productID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the product
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      summary: Create Product-Template Relationships
      description: |
        Adds the templates to the product, appending it to any already related
      tags:
        - Product Relationships
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - template
            examples:
              create-product-template-relationship:
                value:
                  data:
                    - id: 43903bfa-5352-4a3d-9496-c9ab1229a175
                      type: template
                    - id: 50f56ce9-9381-43f6-8a52-5369a8b42e52
                      type: template
      responses:
        '201':
          description: Successfully returns the created product template relationship(s)
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                          enum:
                            - template
              examples:
                product-templates:
                  value:
                    data:
                      - id: 43903bfa-5352-4a3d-9496-c9ab1229a175
                        type: template
                      - id: 50f56ce9-9381-43f6-8a52-5369a8b42e52
                        type: template
      security:
        - bearerAuthentication: []
    delete:
      parameters:
        - name: productID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the product
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      summary: Delete Product-Template Relationships
      description: |
        Removes the templates specified from the product
      tags:
        - Product Relationships
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - template
            examples:
              delete-product-template-relationship:
                value:
                  data:
                    - id: 43903bfa-5352-4a3d-9496-c9ab1229a175
                      type: template
                    - id: 50f56ce9-9381-43f6-8a52-5369a8b42e52
                      type: template
      responses:
        '204':
          description: No Content
      security:
        - bearerAuthentication: []
  '/pcm/products/{productID}/relationships/files':
    get:
      parameters:
        - name: productID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the product
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      summary: Get Product-File Relationships
      description: |
        Returns the relationships between the file and the product
      tags:
        - Product Relationships
      responses:
        '200':
          description: Returns all product file relationships
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                          enum:
                            - file
                        meta:
                          type: object
                          properties:
                            created_at:
                              type: string
              examples:
                product-file-relationships:
                  value:
                    data:
                      - id: 43903bfa-5352-4a3d-9496-c9ab1229a175
                        type: file
                        meta:
                          created_at: '2021-05-27T10:07:06.748Z'
                      - id: 50f56ce9-9381-43f6-8a52-5369a8b42e52
                        type: file
                        meta:
                          created_at: '2021-05-27T10:07:06.748Z'
      security:
        - bearerAuthentication: []
    post:
      parameters:
        - name: productID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the product
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      summary: Add Product-File Relationships.
      description: >
        Adds the file relationships to the product, appending to any existing
        file relationships that already exist.
      tags:
        - Product Relationships
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - file
                      meta:
                        type: object
                        properties:
                          tags:
                            type: array
                            items:
                              type: string
                        additionalProperties: false
            examples:
              create-product-file-relationship:
                value:
                  data:
                    - id: 43903bfa-5352-4a3d-9496-c9ab1229a175
                      type: file
                    - id: 50f56ce9-9381-43f6-8a52-5369a8b42e52
                      type: file
                      meta:
                        tags:
                          - tag-1
      responses:
        '204':
          description: No Content
      security:
        - bearerAuthentication: []
    put:
      parameters:
        - name: productID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the product
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      summary: Replace Product-File Relationships
      description: >
        Replaces the file relationships for the product with the new list
        provided.
      tags:
        - Product Relationships
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - file
                      meta:
                        type: object
                        properties:
                          tags:
                            type: array
                            items:
                              type: string
                        additionalProperties: false
            examples:
              replace-product-file-relationship:
                value:
                  data:
                    - id: 43903bfa-5352-4a3d-9496-c9ab1229a175
                      type: file
                    - id: 50f56ce9-9381-43f6-8a52-5369a8b42e52
                      type: file
                      meta:
                        tags:
                          - tag-1
      responses:
        '204':
          description: No Content
      security:
        - bearerAuthentication: []
    delete:
      parameters:
        - name: productID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the product
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      summary: Delete Product-File Relationships.
      description: |
        Removes the list of file relationships provided.
      tags:
        - Product Relationships
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - file
                      meta:
                        type: object
                        properties:
                          tags:
                            type: array
                            items:
                              type: string
                        additionalProperties: false
            examples:
              delete-product-file-relationships:
                value:
                  data:
                    - id: 43903bfa-5352-4a3d-9496-c9ab1229a175
                      type: file
                    - id: 50f56ce9-9381-43f6-8a52-5369a8b42e52
                      type: file
                      meta:
                        tags:
                          - tag-1
      responses:
        '204':
          description: No Content
      security:
        - bearerAuthentication: []
  '/pcm/products/{productID}/relationships/variations':
    get:
      parameters:
        - name: productID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the product
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      summary: Get Variation Relationships
      description: |
        Returns all variations attached to the product
      tags:
        - Product Relationships
      responses:
        '200':
          description: Returns all product variation relationships
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                          enum:
                            - product-variation
                        meta:
                          type: object
                          properties:
                            created_at:
                              type: string
              examples:
                product-variation-relationships:
                  value:
                    data:
                      - id: 43903bfa-5352-4a3d-9496-c9ab1229a175
                        type: product-variation
                        meta:
                          created_at: '2021-05-27T10:07:06.748Z'
                      - id: 50f56ce9-9381-43f6-8a52-5369a8b42e52
                        type: product-variation
                        meta:
                          created_at: '2021-05-27T10:07:06.748Z'
      security:
        - bearerAuthentication: []
    post:
      parameters:
        - name: productID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the product
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      summary: Add Variation Relationships
      description: >
        Adds the variation relationships to the product, appending to those
        already attached.
      tags:
        - Product Relationships
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - product-variation
            examples:
              create-product-variation-relationship:
                value:
                  data:
                    - id: 43903bfa-5352-4a3d-9496-c9ab1229a175
                      type: product-variation
      responses:
        '204':
          description: No Content
      security:
        - bearerAuthentication: []
    put:
      parameters:
        - name: productID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the product
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      summary: Replace Variation Relationships
      description: >
        Replaces all variation relationships on the products with the list
        supplied.
      tags:
        - Product Relationships
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - product-variation
            examples:
              replace-product-variation-relationship:
                value:
                  data:
                    - id: 43903bfa-5352-4a3d-9496-c9ab1229a175
                      type: product-variation
      responses:
        '204':
          description: No Content
      security:
        - bearerAuthentication: []
    delete:
      parameters:
        - name: productID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the product
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      summary: Delete Variation Relationships
      description: |
        Removes all the variation relationships to the product.
      tags:
        - Product Relationships
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - product-variation
            examples:
              delete-product-variation-relationships:
                value:
                  data:
                    - id: 43903bfa-5352-4a3d-9496-c9ab1229a175
                      type: product-variation
      responses:
        '204':
          description: No Content
      security:
        - bearerAuthentication: []
  /pcm/variations:
    get:
      parameters: []
      summary: Get all Variations
      description: |
        Returns a list of all variations
      tags:
        - Variations
      responses:
        '200':
          description: Successfully returns all variations
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                          enum:
                            - product-variation
                        attributes:
                          type: object
                          additionalProperties: false
                          properties:
                            name:
                              type: string
              examples:
                list-variations:
                  value:
                    data:
                      - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                        type: product-variation
                        attributes:
                          name: Paint Colour
                      - id: c1ccccba-53e4-46b5-aed8-94f32823148a
                        type: product-variation
                        attributes:
                          name: Size
      security:
        - bearerAuthentication: []
    post:
      parameters: []
      summary: Create a Variations
      description: |
        Creates a variation.
      tags:
        - Variations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - product-variation
                    attributes:
                      type: object
                      additionalProperties: false
                      properties:
                        name:
                          type: string
            examples:
              create-variation:
                value:
                  data:
                    type: product-variation
                    attributes:
                      name: Paint Colour
      responses:
        '201':
          description: Successfully returns the created variation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - product-variation
                      attributes:
                        type: object
                        additionalProperties: false
                        properties:
                          name:
                            type: string
              examples:
                created-variation:
                  value:
                    data:
                      id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      type: product-variation
                      attributes:
                        name: Paint Colour
      security:
        - bearerAuthentication: []
  '/pcm/variations/{variationID}':
    get:
      parameters:
        - name: variationID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
      summary: Get a Variation
      description: |
        Returns the variation.
      tags:
        - Variations
      responses:
        '200':
          description: Successfully returns the variation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - product-variation
                      attributes:
                        type: object
                        additionalProperties: false
                        properties:
                          name:
                            type: string
              examples:
                get-variation:
                  value:
                    data:
                      id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      type: product-variation
                      attributes:
                        name: Paint Colour
      security:
        - bearerAuthentication: []
    put:
      parameters:
        - name: variationID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
      summary: Update a Variation
      description: |
        Updates the variation.
      tags:
        - Variations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - product-variation
                    attributes:
                      type: object
                      additionalProperties: false
                      properties:
                        name:
                          type: string
            examples:
              update-variation:
                value:
                  data:
                    type: product-variation
                    attributes:
                      name: Paint Colour
      responses:
        '200':
          description: Successfully returns the updated variation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - product-variation
                      attributes:
                        type: object
                        additionalProperties: false
                        properties:
                          name:
                            type: string
              examples:
                update-variation:
                  value:
                    data:
                      id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      type: product-variation
                      attributes:
                        name: Paint Colour
      security:
        - bearerAuthentication: []
    delete:
      parameters:
        - name: variationID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
      summary: Delete a Variation
      description: |
        Deletes the variation.
      tags:
        - Variations
      responses:
        '204':
          description: No Content
      security:
        - bearerAuthentication: []
  '/pcm/variations/{variationID}/options':
    get:
      parameters:
        - name: variationID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
      summary: List Options
      description: |
        Returns a list of the options for a Variation
      tags:
        - Variation Options
      responses:
        '200':
          description: Successfully returns all variation options
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                          enum:
                            - product-variation-option
                        attributes:
                          type: object
                          additionalProperties: false
                          properties:
                            name:
                              type: string
                            description:
                              type: string
              examples:
                list-variations:
                  value:
                    data:
                      - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                        type: product-variation-option
                        attributes:
                          name: Blue
                          Description: This is a colour
      security:
        - bearerAuthentication: []
    post:
      parameters:
        - name: variationID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
      summary: Create Option
      description: |
        Creates an Option for the Variation.
      tags:
        - Variation Options
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - product-variation-option
                    attributes:
                      type: object
                      additionalProperties: false
                      properties:
                        name:
                          type: string
                        description:
                          type: string
            examples:
              create-variation-option:
                value:
                  data:
                    type: product-variation-option
                    attributes:
                      name: Blue
                      description: This is a colour
      responses:
        '201':
          description: Successfully returns the created variation option
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - product-variation-option
                      attributes:
                        type: object
                        additionalProperties: false
                        properties:
                          name:
                            type: string
                          description:
                            type: string
              examples:
                created-variation-option:
                  value:
                    data:
                      id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      type: product-variation-option
                      attributes:
                        name: Blue
                        Description: This is a colour
      security:
        - bearerAuthentication: []
  '/pcm/variations/{variationID}/options/{optionID}':
    get:
      parameters:
        - name: variationID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: optionID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation option
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
      summary: Get Option
      description: |
        Returns the Option.
      tags:
        - Variation Options
      responses:
        '200':
          description: Successfully returns the variation option
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - product-variation-option
                      attributes:
                        type: object
                        additionalProperties: false
                        properties:
                          name:
                            type: string
                          description:
                            type: string
              examples:
                get-variation-option:
                  value:
                    data:
                      id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      type: product-variation-option
                      attributes:
                        name: Blue
                        Description: This is a colour
      security:
        - bearerAuthentication: []
    put:
      parameters:
        - name: variationID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: optionID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation option
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
      summary: Update Option
      description: |
        Updates the Option.
      tags:
        - Variation Options
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - product-variation-option
                    attributes:
                      type: object
                      additionalProperties: false
                      properties:
                        name:
                          type: string
                        description:
                          type: string
            examples:
              update-variation-option:
                value:
                  data:
                    type: product-variation-option
                    attributes:
                      name: Blue
                      description: This is a colour
      responses:
        '200':
          description: Successfully returns the updated variation option
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - product-variation-option
                      attributes:
                        type: object
                        additionalProperties: false
                        properties:
                          name:
                            type: string
                          description:
                            type: string
              examples:
                updated-variation-option:
                  value:
                    data:
                      id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      type: product-variation-option
                      attributes:
                        name: Blue
                        Description: This is a colour
      security:
        - bearerAuthentication: []
    delete:
      parameters:
        - name: variationID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: optionID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation option
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
      summary: Delete Option
      description: |
        Deletes the option for the Variation.
      tags:
        - Variation Options
      responses:
        '204':
          description: No Content
      security:
        - bearerAuthentication: []
  '/pcm/variations/{variationID}/options/{optionID}/modifiers':
    get:
      parameters:
        - name: optionID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation option
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: variationID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
      summary: List Modifiers
      description: |
        Returns a list of all Modifiers on an Option
      tags:
        - Variation Modifiers
      responses:
        '200':
          description: Successfully returns all variation modifiers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                          enum:
                            - product-variation-modifier
                        attributes:
                          type: object
                          additionalProperties: false
                          properties:
                            type:
                              type: string
                            value:
                              type: string
              examples:
                list-variations:
                  value:
                    data:
                      - id: f31b037f-4ee1-4bb3-adb7-31c2214be383
                        type: product-variation-modifier
                        attributes:
                          type: commoditytype
                          value: physical
      security:
        - bearerAuthentication: []
    post:
      parameters:
        - name: variationID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: optionID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation option
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
      summary: Create Modifier
      description: |
        Creates a Modifier for an Option
      tags:
        - Variation Modifiers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - product-variation-modifier
                    attributes:
                      type: object
                      additionalProperties: false
                      properties:
                        type:
                          type: string
                        value:
                          type: string
            examples:
              create-variation-modifier:
                value:
                  data:
                    type: product-variation-modifier
                    attributes:
                      type: commoditytype
                      value: digital
      responses:
        '201':
          description: Successfully returns the created modifier
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - product-variation-modifier
                      attributes:
                        type: object
                        additionalProperties: false
                        properties:
                          value:
                            type: string
                          type:
                            type: string
              examples:
                created-variation-modifier:
                  value:
                    data:
                      id: dcada212-e61c-43e4-a1e7-bd2d237b51cf
                      type: product-variation-modifier
                      attributes:
                        type: commoditytype
                        value: physical
      security:
        - bearerAuthentication: []
  '/pcm/variations/{variationID}/options/{optionID}/modifiers/{modifierID}':
    get:
      parameters:
        - name: variationID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: optionID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation option
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: modifierID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the modifier
          example: 1d599210-e949-4979-81df-222d621790ec
      summary: Get Modifier
      description: |
        Returns the Modifier
      tags:
        - Variation Modifiers
      responses:
        '200':
          description: Successfully returns the modifier
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - product-variation-modifier
                      attributes:
                        type: object
                        additionalProperties: false
                        properties:
                          value:
                            type: string
                          type:
                            type: string
              examples:
                get-variation-modifier:
                  value:
                    data:
                      id: dcada212-e61c-43e4-a1e7-bd2d237b51cf
                      type: product-variation-modifier
                      attributes:
                        type: commoditytype
                        value: physical
      security:
        - bearerAuthentication: []
    put:
      parameters:
        - name: variationID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: optionID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation option
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: modifierID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the modifier
          example: 1d599210-e949-4979-81df-222d621790ec
      summary: Update Modifier
      description: |
        Updates and returns the Modifier
      tags:
        - Variation Modifiers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - product-variation-modifier
                    attributes:
                      type: object
                      additionalProperties: false
                      properties:
                        type:
                          type: string
                        value:
                          type: string
            examples:
              update-variation-modifier:
                value:
                  data:
                    type: product-variation-modifier
                    attributes:
                      type: commoditytype
                      value: digital
      responses:
        '200':
          description: Successfully returns the updated modifier
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - product-variation-modifier
                      attributes:
                        type: object
                        additionalProperties: false
                        properties:
                          value:
                            type: string
                          type:
                            type: string
              examples:
                updated-variation-modifier:
                  value:
                    data:
                      id: dcada212-e61c-43e4-a1e7-bd2d237b51cf
                      type: product-variation-modifier
                      attributes:
                        type: commoditytype
                        value: physical
      security:
        - bearerAuthentication: []
    delete:
      parameters:
        - name: variationID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: optionID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the variation option
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: modifierID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the modifier
          example: 1d599210-e949-4979-81df-222d621790ec
      summary: Delete Modifier
      description: |
        Deletes the Modifier
      tags:
        - Variation Modifiers
      responses:
        '204':
          description: No Content
      security:
        - bearerAuthentication: []
  /pcm/hierarchies:
    get:
      parameters: []
      summary: Get all hierarchies
      tags:
        - Hierarchy Management
      responses:
        '200':
          description: Successfully returns a list of all hierarchies
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                          enum:
                            - hierarchy
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                            description:
                              type: string
                            slug:
                              type: string
                            locales:
                              type: object
              examples:
                list-hierarchies:
                  value:
                    data:
                      - id: 84b4d579-aa6c-4bed-814f-135d5048474a
                        type: hierarchy
                        attributes:
                          name: Shoes
                          description: Shoes Category
                          slug: shoes
                          locales:
                            fr-FR:
                              name: Chaussures
                              description: Catégorie de chaussures
                      - id: 24b4d579-aa6c-4bed-814f-135d5048474a
                        type: hierarchy
                        attributes:
                          name: Jackets
                          description: Jackets Category
                          slug: jackets
                          locales:
                            fr-FR:
                              name: Vestes
                              description: Catégorie de vestes
      security:
        - bearerAuthentication: []
    post:
      parameters: []
      summary: Create a hierarchy
      tags:
        - Hierarchy Management
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - hierarchy
                    attributes:
                      type: object
                      additionalProperties: false
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        slug:
                          type: string
                        locales:
                          type: object
            examples:
              create-hierarchy:
                value:
                  data:
                    type: hierarchy
                    attributes:
                      name: Shoes
                      description: Shoes Category
                      slug: shoes
                      locales:
                        fr-FR:
                          name: Chaussures
                          description: Catégorie de chaussures
      responses:
        '201':
          description: Successfully returns the created hierarchy
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - hierarchy
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                          description:
                            type: string
                          slug:
                            type: string
                          locales:
                            type: object
              examples:
                created-hierarchy:
                  value:
                    data:
                      id: 84b4d579-aa6c-4bed-814f-135d5048474a
                      type: hierarchy
                      attributes:
                        name: Shoes
                        description: Shoes Category
                        slug: shoes
                        locales:
                          fr-FR:
                            name: Chaussures
                            description: Catégorie de chaussures
      security:
        - bearerAuthentication: []
  '/pcm/hierarchies/{hierarchyID}':
    get:
      parameters:
        - name: hierarchyID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the hierarchy
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
      summary: Get a hierarchy
      tags:
        - Hierarchy Management
      responses:
        '200':
          description: Successfully returns the hierarchy
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - hierarchy
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                          description:
                            type: string
                          slug:
                            type: string
                          locales:
                            type: object
              examples:
                get-hierarchy:
                  value:
                    data:
                      id: 84b4d579-aa6c-4bed-814f-135d5048474a
                      type: hierarchy
                      attributes:
                        name: Shoes
                        description: Shoes Category
                        slug: shoes
                        locales:
                          fr-FR:
                            name: Chaussures
                            description: Catégorie de chaussures
      security:
        - bearerAuthentication: []
    put:
      parameters:
        - name: hierarchyID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the hierarchy
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
      summary: Update a hierarchy
      tags:
        - Hierarchy Management
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - hierarchy
                    attributes:
                      type: object
                      additionalProperties: false
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        slug:
                          type: string
                        locales:
                          type: object
            examples:
              update-hierarchy:
                value:
                  data:
                    type: hierarchy
                    attributes:
                      name: Shoes
                      description: Shoes Category
                      slug: shoes
                      locales:
                        fr-FR:
                          name: Chaussures
                          description: Catégorie de chaussures
      responses:
        '200':
          description: Successfully returns the updated hierarchy
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - hierarchy
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                          description:
                            type: string
                          slug:
                            type: string
                          locales:
                            type: object
              examples:
                updated-hierarchy:
                  value:
                    data:
                      id: 84b4d579-aa6c-4bed-814f-135d5048474a
                      type: hierarchy
                      attributes:
                        name: Shoes
                        description: Shoes Category
                        slug: shoes
                        locales:
                          fr-FR:
                            name: Chaussures
                            description: Catégorie de chaussures
      security:
        - bearerAuthentication: []
    delete:
      parameters:
        - name: hierarchyID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the hierarchy
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
      summary: Delete a hierarchy
      tags:
        - Hierarchy Management
      responses:
        '204':
          description: No Content
      security:
        - bearerAuthentication: []
  '/pcm/hierarchies/{hierarchyID}/duplicate':
    post:
      parameters:
        - name: hierarchyID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the hierarchy
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
      summary: Duplicate a Hierachy
      tags:
        - Hierarchy Management
      responses:
        '200':
          description: Returns the duplicated hierarchy
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - hierarchy
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                          description:
                            type: string
                          slug:
                            type: string
                          locales:
                            type: object
              examples:
                get-hierarchy:
                  value:
                    data:
                      id: 84b4d579-aa6c-4bed-814f-135d5048474a
                      type: hierarchy
                      attributes:
                        name: Shoes
                        description: Shoes Category
                        slug: shoes
                        locales:
                          fr-FR:
                            name: Chaussures
                            description: Catégorie de chaussures
      security:
        - bearerAuthentication: []
  '/pcm/hierarchies/{hierarchyID}/children':
    get:
      parameters:
        - name: hierarchyID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the hierarchy
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
      summary: Get a Hierarchies children
      tags:
        - Hierarchy Management
      responses:
        '200':
          description: Successfully returns the hierarchies children
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                          enum:
                            - node
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                            description:
                              type: string
                            slug:
                              type: string
                            locales:
                              type: object
              examples:
                get-hierarchy-children:
                  value:
                    data:
                      - id: 84b4d579-aa6c-4bed-814f-135d5048474a
                        type: node
                        attributes:
                          name: Ballet Shoes
                          description: All Ballet Shoes
                          slug: ballet-shoes
                          locales:
                            fr-FR:
                              name: Chaussons de ballet
                              description: Toutes les chaussures de ballet
                      - id: 24b4d579-aa6c-4bed-814f-135d5048474a
                        type: node
                        attributes:
                          name: Winter Jackets
                          description: All Winter Jackets
                          slug: winter-jackets
                          locales:
                            fr-FR:
                              name: Vestes d'hiver
                              description: Toutes les vestes d'hiver
      security:
        - bearerAuthentication: []
  '/pcm/hierarchies/{hierarchyID}/nodes':
    post:
      parameters:
        - name: hierarchyID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the hierarchy
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
      summary: Create a node
      tags:
        - Nodes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - node
                    attributes:
                      type: object
                      additionalProperties: false
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        slug:
                          type: string
                        locales:
                          type: object
            examples:
              create-node:
                value:
                  data:
                    type: node
                    attributes:
                      name: Ballet Shoes
                      description: All Ballet Shoes
                      slug: ballet-shoes
                      locales:
                        fr-FR:
                          name: Chaussons de ballet
                          description: Toutes les chaussures de ballet
      responses:
        '201':
          description: Successfully returns the created node
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - node
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                          description:
                            type: string
                          slug:
                            type: string
                          locales:
                            type: object
              examples:
                created-node:
                  value:
                    data:
                      id: 84b4d579-aa6c-4bed-814f-135d5048474a
                      type: node
                      attributes:
                        name: Ballet Shoes
                        description: All Ballet Shoes
                        slug: ballet-shoes
                        locales:
                          fr-FR:
                            name: Chaussons de ballet
                            description: Toutes les chaussures de ballet
      security:
        - bearerAuthentication: []
  '/pcm/hierarchies/{hierarchyID}/nodes/{nodeID}':
    get:
      parameters:
        - name: hierarchyID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the hierarchy
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: nodeID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the node
          example: 5be50bb6-db7f-4712-93e9-90bc4a05574d
      summary: Get a node
      tags:
        - Nodes
      responses:
        '200':
          description: Successfully returns the node
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - node
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                          description:
                            type: string
                          slug:
                            type: string
                          locales:
                            type: object
              examples:
                get-node:
                  value:
                    data:
                      id: 84b4d579-aa6c-4bed-814f-135d5048474a
                      type: node
                      attributes:
                        name: Ballet Shoes
                        description: All Ballet Shoes
                        slug: ballet-shoes
                        locales:
                          fr-FR:
                            name: Chaussons de ballet
                            description: Toutes les chaussures de ballet
      security:
        - bearerAuthentication: []
    put:
      parameters:
        - name: hierarchyID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the hierarchy
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: nodeID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the node
          example: 5be50bb6-db7f-4712-93e9-90bc4a05574d
      summary: Update a node
      tags:
        - Nodes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - node
                    attributes:
                      type: object
                      additionalProperties: false
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        slug:
                          type: string
                        locales:
                          type: object
            examples:
              update-node:
                value:
                  data:
                    type: node
                    attributes:
                      name: Ballet Shoes
                      description: All Ballet Shoes
                      slug: ballet-shoes
                      locales:
                        fr-FR:
                          name: Chaussons de ballet
                          description: Toutes les chaussures de ballet
      responses:
        '200':
          description: Successfully returns the updated node
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - node
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                          description:
                            type: string
                          slug:
                            type: string
                          locales:
                            type: object
              examples:
                updated-node:
                  value:
                    data:
                      id: 84b4d579-aa6c-4bed-814f-135d5048474a
                      type: node
                      attributes:
                        name: Ballet Shoes
                        description: All Ballet Shoes
                        slug: ballet-shoes
                        locales:
                          fr-FR:
                            name: Chaussons de ballet
                            description: Toutes les chaussures de ballet
      security:
        - bearerAuthentication: []
    delete:
      parameters:
        - name: hierarchyID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the hierarchy
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: nodeID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the node
          example: 5be50bb6-db7f-4712-93e9-90bc4a05574d
      summary: Deletes a node
      tags:
        - Nodes
      responses:
        '204':
          description: No Content
      security:
        - bearerAuthentication: []
  '/pcm/hierarchies/{hierarchyID}/nodes/{nodeID}/children':
    get:
      parameters:
        - name: hierarchyID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the hierarchy
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: nodeID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the node
          example: 5be50bb6-db7f-4712-93e9-90bc4a05574d
      summary: Get a node's children
      tags:
        - Node Relationships
      responses:
        '200':
          description: Successfully returns the node's children
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                          enum:
                            - node
                        attributes:
                          type: object
                          properties:
                            name:
                              type: string
                            description:
                              type: string
                            slug:
                              type: string
                            locales:
                              type: object
              examples:
                get-node-children:
                  value:
                    data:
                      - id: 84b4d579-aa6c-4bed-814f-135d5048474a
                        type: node
                        attributes:
                          name: Ballet Shoes
                          description: All Ballet Shoes
                          slug: ballet-shoes
                          locales:
                            fr-FR:
                              name: Chaussons de ballet
                              description: Toutes les chaussures de ballet
                      - id: 24b4d579-aa6c-4bed-814f-135d5048474a
                        type: node
                        attributes:
                          name: Winter Jackets
                          description: All Winter Jackets
                          slug: winter-jackets
                          locales:
                            fr-FR:
                              name: Vestes d'hiver
                              description: Toutes les vestes d'hiver
      security:
        - bearerAuthentication: []
  '/pcm/hierarchies/{hierarchyID}/nodes/{nodeID}/products':
    get:
      parameters:
        - name: hierarchyID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the hierarchy
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: nodeID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the node
          example: 5be50bb6-db7f-4712-93e9-90bc4a05574d
      summary: Get a node's products
      tags:
        - Node Relationships
      responses:
        '200':
          description: Successfully returns the node's products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                          enum:
                            - product
                        attributes:
                          type: object
                          additionalProperties: false
                          properties:
                            name:
                              type: string
                            description:
                              type: string
                            slug:
                              type: string
                            sku:
                              type: string
                            status:
                              type: string
                              enum:
                                - live
                                - draft
                            commodity_type:
                              type: string
                              enum:
                                - physical
                                - digital
                            upc_ean:
                              type: string
                            mpn:
                              type: string
                            locales:
                              type: object
              examples:
                get-node-products:
                  value:
                    data:
                      - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                        type: product
                        attributes:
                          name: Hungry Hippos
                          description: >-
                            Nom! Nom! Nom! It’s Hungry Hungry Hippo time!
                            Whichever happy hippo eats the most marbles wins the
                            game! From Henry to Harry and Homer to Happy Hippo,
                            these toothy creatures are hungry to play! For 2 to
                            4 players.
                          sku: hungry-hippos
                          slug: hungry-hippos
                          commodity_type: physical
                          upc_ean: '234567899992'
                          mpn: 1234-5678-ABCD
                          locales:
                            fr-FR:
                              name: Hippopotames affamés
                              description: >-
                                Nom! Nom! Nom! C'est l'heure de l'hippopotame
                                affamé! L'hippopotame heureux qui mange le plus
                                de billes remporte la partie! De Henry à Harry
                                et Homer à Happy Hippo, ces créatures à pleines
                                dents ont faim de jouer! Pour 2 à 4 joueurs.
                      - id: 6fa85f64-5717-4562-b3fc-2c963f66afa6
                        type: product
                        attributes:
                          name: Mouse Trap
                          description: >-
                            The Mouse Trap game, a longtime family favourite, is
                            always good for zany action and lots of laughs.
                            Scurry around the board collecting cheese and
                            stealing cheese from other players…but watch out for
                            the trap! While kids are engaged in playing the
                            Mouse Trap game, they can also practice valuable
                            skills in construction, cause and effect and
                            decision-making. As they interact with the trap, a
                            working, multi-part machine, kids can practice
                            construction skills. They can also work on
                            understanding cause and effect as they understand
                            that each action causes a reaction. Players can also
                            practice decision making as they analyse the
                            situation and determine the next best step. Most
                            importantly, kids can have so much fun playing this
                            wacky game!
                          sku: mouse-trap
                          slug: mouse-trap
                          commodity_type: physical
                          upc_ean: '234567899992'
                          mpn: 1234-5678-ABCD
      security:
        - bearerAuthentication: []
  '/pcm/hierarchies/{hierarchyID}/nodes/{nodeID}/relationships/parent':
    put:
      parameters:
        - name: hierarchyID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the hierarchy
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: nodeID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the node
          example: 5be50bb6-db7f-4712-93e9-90bc4a05574d
      summary: Change a node's parent
      tags:
        - Node Relationships
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    type:
                      type: string
                      enum:
                        - node
            examples:
              update-node-parent:
                value:
                  data:
                    id: 43903bfa-5352-4a3d-9496-c9ab1229a175
                    type: node
      responses:
        '204':
          description: No Content
      security:
        - bearerAuthentication: []
    delete:
      parameters:
        - name: hierarchyID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the hierarchy
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: nodeID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the node
          example: 5be50bb6-db7f-4712-93e9-90bc4a05574d
      summary: Delete a node's parent
      tags:
        - Node Relationships
      responses:
        '204':
          description: No Content
      security:
        - bearerAuthentication: []
  '/pcm/hierarchies/{hierarchyID}/nodes/{nodeID}/relationships/children':
    post:
      parameters:
        - name: hierarchyID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the hierarchy
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: nodeID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the node
          example: 5be50bb6-db7f-4712-93e9-90bc4a05574d
      summary: Set node's as children
      tags:
        - Node Relationships
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    type:
                      type: string
                      enum:
                        - node
            examples:
              set-node-children:
                value:
                  data:
                    id: 43903bfa-5352-4a3d-9496-c9ab1229a175
                    type: node
      responses:
        '200':
          description: Successfully returns the node's children
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - node
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                          description:
                            type: string
                          slug:
                            type: string
                          locales:
                            type: object
              examples:
                set-node-children:
                  value:
                    data:
                      id: 84b4d579-aa6c-4bed-814f-135d5048474a
                      type: node
                      attributes:
                        name: Ballet Shoes
                        description: All Ballet Shoes
                        slug: ballet-shoes
                        locales:
                          fr-FR:
                            name: Chaussons de ballet
                            description: Toutes les chaussures de ballet
      security:
        - bearerAuthentication: []
  '/pcm/hierarchies/{hierarchyID}/nodes/{nodeID}/relationships/products':
    post:
      parameters:
        - name: hierarchyID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the hierarchy
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: nodeID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the node
          example: 5be50bb6-db7f-4712-93e9-90bc4a05574d
      summary: Create a node's product relationship(s)
      tags:
        - Node Relationships
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - product
            examples:
              create-node-product-relationships:
                value:
                  data:
                    id: 43903bfa-5352-4a3d-9496-c9ab1229a175
                    type: product
      responses:
        '201':
          description: Successfully returns the updated node
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - node
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                          description:
                            type: string
                          slug:
                            type: string
                          locales:
                            type: object
                      relationships:
                        type: object
                        properties:
                          products:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
              examples:
                created-node-product-relationships:
                  value:
                    data:
                      id: 84b4d579-aa6c-4bed-814f-135d5048474a
                      type: node
                      attributes:
                        name: Ballet Shoes
                        description: All Ballet Shoes
                        slug: ballet-shoes
                        locales:
                          fr-FR:
                            name: Chaussons de ballet
                            description: Toutes les chaussures de ballet
                      relationships:
                        products:
                          - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                            type: product
      security:
        - bearerAuthentication: []
    delete:
      parameters:
        - name: hierarchyID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the hierarchy
          example: 7059aa02-9d44-4ffc-b3f7-a2779c6a1bf2
        - name: nodeID
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the node
          example: 5be50bb6-db7f-4712-93e9-90bc4a05574d
      summary: Deletes a node's product relationship(s)
      tags:
        - Node Relationships
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        enum:
                          - product
            examples:
              delete-node-product-relationships:
                value:
                  data:
                    id: 43903bfa-5352-4a3d-9496-c9ab1229a175
                    type: product
      responses:
        '204':
          description: No Content
      security:
        - bearerAuthentication: []
  /pcm/pricebooks:
    get:
      tags:
        - PCM Price Books
      summary: Gets the list of price books.
      operationId: getPricebooks
      parameters:
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: The list of price books.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PricebookListData'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    post:
      tags:
        - PCM Price Books
      summary: >-
        Creates a new price book. The price book may already contain product
        prices, or these can be omitted and populated later.
      operationId: createPricebook
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PricebookCreateData'
        description: The price book to create.
        required: true
      responses:
        '201':
          description: The created price book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PricebookData'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/pricebooks/{id}':
    get:
      tags:
        - PCM Price Books
      summary: Gets a price book by its id.
      operationId: getPricebookById
      parameters:
        - description: Price book ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - name: include
          in: query
          description: Prices may be included by using the query parameter include=prices
          required: false
          allowEmptyValue: true
          schema:
            type: string
            enum:
              - prices
      responses:
        '200':
          description: The price book.
          content:
            application/json:
              schema:
                type: object
                title: PricebookWithPricesData
                description: >-
                  Json-api style data object containing a price book and its
                  prices.
                properties:
                  data:
                    $ref: '#/components/schemas/Pricebook'
                  links:
                    $ref: '#/components/schemas/Links'
                  included:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductPrice'
                required:
                  - data
                additionalProperties: false
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    put:
      tags:
        - PCM Price Books
      summary: Updates a price book.
      operationId: updatePricebook
      parameters:
        - description: Price book ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PricebookUpdateData'
        description: Updated price book.
        required: true
      responses:
        '200':
          description: Updated price book response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PricebookData'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    delete:
      tags:
        - PCM Price Books
      summary: Deletes a price book.
      operationId: deletePricebookById
      parameters:
        - description: Price book ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: A 204 response indicates that the price book has been deleted.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/pricebooks/{id}/replicate':
    post:
      tags:
        - PCM Price Books
      summary: >-
        Creates a new price book based on an existing price book. The new and
        existing price books may already contain product prices, or these can be
        omitted and populated later.
      operationId: replicatePricebook
      parameters:
        - description: Existing price book ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PricebookReplicateData'
        description: The price book created based on an existing price book.
      responses:
        '201':
          description: The newly created price book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PricebookData'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/pricebooks/{id}/prices':
    get:
      tags:
        - PCM Prices
      summary: Gets all product prices in a price book.
      operationId: getProductPrices
      parameters:
        - in: query
          description: A filter specification
          name: filter
          required: false
          schema:
            type: string
        - description: Price book ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: The product price list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPriceListData'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    post:
      tags:
        - PCM Prices
      summary: >-
        The server will create a new price in a price book. If the product ID of
        the price already exists in the price book, this operation will fail.
      operationId: createProductPrice
      parameters:
        - description: Price book ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPriceCreateData'
        description: The product price to create within a price book.
        required: true
      responses:
        '201':
          description: The created product price
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPriceData'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/pricebooks/{id}/prices/{priceId}':
    delete:
      tags:
        - PCM Prices
      summary: >-
        The server will delete the specified product price from the price book.
        If it does not exist, an error will be returned.
      operationId: deleteProductPrice
      parameters:
        - description: Price book id.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: Price ID.
          name: priceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: A 204 response indicates that the product prices have been deleted
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    get:
      summary: Retrieve a specific product price from a price book by its ID.
      tags:
        - PCM Prices
      operationId: getProductPriceByID
      parameters:
        - description: Price book ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: The ID of the product price entity.
          name: priceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The product price.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPriceData'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    put:
      summary: The server will update the specified product price in the price book.
      tags:
        - PCM Prices
      operationId: updateProductPrice
      parameters:
        - description: Price book ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: The product price ID.
          name: priceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPriceData'
        description: The updated product price
        required: true
      responses:
        '200':
          description: Updated product price.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPriceData'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/pricebooks/{id}/modifiers':
    get:
      tags:
        - PCM Price Modifiers
      summary: Gets all price modifiers in a price book.
      operationId: getPriceModifiers
      parameters:
        - in: query
          description: A filter specification
          name: filter
          required: false
          schema:
            type: string
        - description: Price book ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: The price modifier list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceModifierListData'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    post:
      tags:
        - PCM Price Modifiers
      summary: >-
        The server will create a new price modifier in a price book. If the name
        of the modifier already exists in the price book, this operation will
        fail.
      operationId: createPriceModifier
      parameters:
        - description: Price book ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceModifierCreateData'
        description: The price modifier to create within a price book.
        required: true
      responses:
        '201':
          description: The created price modifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceModifierData'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  '/pcm/pricebooks/{id}/modifiers/{modifierId}':
    delete:
      tags:
        - PCM Price Modifiers
      summary: >-
        The server will delete the specified price modifier from the price book.
        If it does not exist, an error will be returned.
      operationId: deletePriceModifier
      parameters:
        - description: Price book id.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: Modifier ID.
          name: modifierId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: A 204 response indicates that the price modifiers have been deleted
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    get:
      summary: Retrieve a specific price modifier from a price book by its ID.
      tags:
        - PCM Price Modifiers
      operationId: getPriceModifierByID
      parameters:
        - description: Price book ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: The ID of the price modifier entity.
          name: modifierId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The price modifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceModifierData'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
    put:
      summary: The server will update the specified price modifier in the price book.
      tags:
        - PCM Price Modifiers
      operationId: updatePriceModifier
      parameters:
        - description: Price book ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: The price modifier ID.
          name: modifierId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceModifierUpdateData'
        description: The updated price modifier
        required: true
      responses:
        '200':
          description: Updated price modifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceModifierData'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuthentication: []
  /oauth/access_token:
    post:
      tags:
        - Authentication
      summary: Authentication
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                client_secret:
                  type: string
                grant_type:
                  type: string
                  enum:
                    - implicit
                    - client_credentials
      responses:
        '200':
          description: Get an implicit token
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                  expires:
                    type: integer
                  access_token:
                    type: string
                  token_type:
                    type: string
                  expires_in:
                    type: integer
              examples:
                implicitToken:
                  value:
                    expires: 1635503319
                    identifier: implicit
                    access_token: 0da6c3e991aede6e09e98dc9f80aa793241e4d63
                    token_type: Bearer
                    expires_in: 3600
                explicitToken:
                  value:
                    expires: 1635503319
                    identifier: client_credentials
                    access_token: 0da6c3e991aede6e09e98dc9f80aa793241e4d63
                    token_type: Bearer
                    expires_in: 3600
