---
openapi: 3.0.0
servers:
  - url: https://judge.me/api/v1
    description: Judge.me API server
info:
  version: v1
  title: Judge.me API
  x-logo:
    url: https://s3.amazonaws.com/me.judge.public-static-assets/jm-logo-green.png
    altText: Judge.me Logo
  contact:
    name: Judge.me Support
    url: https://support.judge.me/
    email: support@judge.me
  description: |
    Our REST API lets you access to resources and perform actions on behalf of a shop.

    # Authentication
    Our API v1 uses API key to authenticate. You can get the API key of a shop from our
    [app settings page](/settings?jump_to=judge.me+api) > Integrations > Developers > Judge.me API.
    You also need to supply domain of the shop.

    In every request, you will need to supply both `api_token` and `shop_domain` in the request params.
    Most of the endpoints require the Private API token, while Widgets endpoints can also work with the Public API token.
    Please keep the Private API token secretly, and only share it with those whom you trust.

    Examle how to authenticate with cURL:
    ```
    curl -X GET 'https://judge.me/api/v1/reviews?api_token=your_token&shop_domain=your_shop_domain' -H 'accept: application/json'
    ```
x-tagGroups:
  - name: ''
    tags:
      - Judge.me ID vs External ID
      - Find by ID or other fields
  - name: Displaying Widgets
    tags:
      - Main Widgets
      - Other Widgets
  - name: Reviews management
    tags:
      - Reviews
      - Webhooks
  - name: Review Requests
    tags:
      - Orders
      - Line Items
      - Delivery Trackings
  - name: General
    tags:
      - Products
      - Reviewers
      - Shops
      - Settings
  - name: Others
    tags:
      - Comments
tags:
  - name: Judge.me ID vs External ID
    description: |
      Most of the API endpoints here have 2 different kinds of `id`, one is Judge.me internal ID, the other is External ID from the e-commerce platform (e.g. Shopify).
      Please see each endpoint's document to know which one the `id` attribute represents.

      Generally, in Judge.me's responses and in query parameters, `id` is Judge.me internal ID and `external_id` is the External ID of the resource;
      while in the request body of your update/create requests', `id` is the External ID of the resource.
  - name: Find by ID or other fields
    description: |
      In many of our API endpoints, we allow to find a resource not only by `id`, but also by other fields (e.g. product's `handle`, reviewer's `email`, `external_id`).
      Please see each endpoint's document for more details.

      When `id` is a required param (usually required in the request URL), and you want to find by another field, please set `id` to any negative number,`-1`,
      and then set value to the other field that you want to find by.
  - name: Main Widgets
    description: Response of the following widget endpoints contains the complete, sanitied,
      XSS-safe HTML for each widget, that can be embedded inside a storefront page.
  - name: Other Widgets
    description: These widgets are rarely used alone, and mostly used together with
      others to make a more meaningful widget.
  - name: Reviews
    description: |
      These endpoints respond **raw** review info. So they may respond **unpublished** reviews, or review's content that is **not sanitized** yet (so risks of XSS).
      So to render review content on storefront, please use widget endpoints instead.
  - name: Webhooks
    description: |
      To subscribe to an event happens in Judge.me.
      You can register a webhook `review/created` or `review/created_fail` to know when a review is created, or not.
      You can also register a widget-update webhook to know when Judge.me updates a widget.

      Judge.me will send a POST request to the registered `url` containing relevant information for each event.
paths:
  "/widgets/product_review":
    get:
      security:
        - PrivateAPIKey: []
          ShopDomain: []
        - PublicAPIKey: []
          ShopDomain: []
      summary: Product Review Widget
      description: |
        Review Widget for a product, usually placed at the bottom of the product page. Either product's handle,
        external ID, or Judge.me ID is required to specify which product.
      operationId: widgets#product_review
      parameters:
        - "$ref": "#/components/parameters/product__handle"
        - "$ref": "#/components/parameters/product__external_id"
        - "$ref": "#/components/parameters/product__id"
        - "$ref": "#/components/parameters/page"
        - "$ref": "#/components/parameters/per_page_5"
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  widget:
                    type: string
                  product_external_id:
                    type: string
      tags:
        - Main Widgets
  "/widgets/preview_badge":
    get:
      security:
        - PrivateAPIKey: []
          ShopDomain: []
        - PublicAPIKey: []
          ShopDomain: []
      summary: Product Preview Badge
      description: |
        Preview Badge for a product, usually placed below product titles on product pages or inside product thumbnails on collection pages.
        Either product's handle, external ID, or Judge.me ID is required to specify which product.
      operationId: widgets#preview_badge
      parameters:
        - "$ref": "#/components/parameters/product__handle"
        - "$ref": "#/components/parameters/product__external_id"
        - "$ref": "#/components/parameters/product__id"
      responses:
        '200':
          description: ''
          headers: {}
      tags:
        - Main Widgets
  "/widgets/featured_carousel":
    get:
      security:
        - PrivateAPIKey: []
          ShopDomain: []
        - PublicAPIKey: []
          ShopDomain: []
      summary: Featured Reviews Carousel
      description: 'Featured Reviews Carousel for the current shop, usually placed
        on the shop''s homepage to showcase specific reviews featured by the shop.

        '
      operationId: widgets#featured_carousel
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  featured_carousel:
                    type: string
      tags:
        - Main Widgets
  "/widgets/reviews_tab":
    get:
      security:
        - PrivateAPIKey: []
          ShopDomain: []
        - PublicAPIKey: []
          ShopDomain: []
      summary: Floating Reviews Tab
      description: 'Floating Reviews Tab for the current shop, usually placed on all
        pages of the shop.

        '
      operationId: widgets#reviews_tab
      parameters:
        - "$ref": "#/components/parameters/page"
        - "$ref": "#/components/parameters/per_page_5"
        - "$ref": "#/components/parameters/widget_review_type"
      responses:
        '200':
          description: ''
          headers: {}
      tags:
        - Main Widgets
  "/widgets/all_reviews_page":
    get:
      security:
        - PrivateAPIKey: []
          ShopDomain: []
        - PublicAPIKey: []
          ShopDomain: []
      summary: All Reviews Page
      description: 'All Reviews Page for the current shop, usually a standalone `/pages/reviews`
        page.

        '
      operationId: widgets#all_reviews_page
      parameters:
        - "$ref": "#/components/parameters/page"
        - "$ref": "#/components/parameters/widget_review_type"
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  all_reviews:
                    type: string
                  all_reviews_header:
                    type: string
      tags:
        - Main Widgets
  "/widgets/verified_badge":
    get:
      security:
        - PrivateAPIKey: []
          ShopDomain: []
        - PublicAPIKey: []
          ShopDomain: []
      summary: Verified Reviews Count Badge
      description: |
        Verified Reviews Count Badge of the shop, shows the number of verified buyer reviews and their average rating,
        usually placed in the footer. [See more](https://support.judge.me/support/solutions/articles/44001257415-verified-reviews-count-badge).
      operationId: widgets#verified_badge
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified_badge:
                    type: string
      tags:
        - Main Widgets
  "/widgets/all_reviews_count":
    get:
      security:
        - PrivateAPIKey: []
          ShopDomain: []
        - PublicAPIKey: []
          ShopDomain: []
      summary: Total number of all reviews
      description: |
        Return a single total number of product reviews and shop reviews of the shop.
        This is rarely useful by itself and is usually used together with others to make a more meaningful widget.
      operationId: widgets#all_reviews_count
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  all_reviews_count:
                    type: integer
      tags:
        - Other Widgets
  "/widgets/all_reviews_rating":
    get:
      security:
        - PrivateAPIKey: []
          ShopDomain: []
        - PublicAPIKey: []
          ShopDomain: []
      summary: Average rating of all reviews
      description: |
        Return a single number, average rating of product reviews and shop reviews of the shop.
        This is rarely useful by itself and is usually used together with others to make a more meaningful widget.
      operationId: widgets#all_reviews_rating
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  all_reviews_rating:
                    type: string
      tags:
        - Other Widgets
  "/widgets/shop_reviews_count":
    get:
      security:
        - PrivateAPIKey: []
          ShopDomain: []
        - PublicAPIKey: []
          ShopDomain: []
      summary: Total number of shop-level reviews
      description: |
        Return a single total number of shop-level reviews of the shop.
        This is rarely useful by itself and is usually used together with others to make a more meaningful widget.
      operationId: widgets#shop_reviews_count
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  shop_reviews_count:
                    type: integer
      tags:
        - Other Widgets
  "/widgets/shop_reviews_rating":
    get:
      security:
        - PrivateAPIKey: []
          ShopDomain: []
        - PublicAPIKey: []
          ShopDomain: []
      summary: Average rating of shop-level reviews
      description: |
        Return a single number, average rating of shop-level reviews of the shop.
        This is rarely useful by itself and is usually used together with others to make a more meaningful widget.
      operationId: widgets#shop_reviews_rating
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  shop_reviews_rating:
                    type: string
      tags:
        - Other Widgets
  "/widgets/settings":
    get:
      security:
        - PrivateAPIKey: []
          ShopDomain: []
        - PublicAPIKey: []
          ShopDomain: []
      summary: Widget settings of the shop
      description: 'Widget settings of the shop, under HTML format, containing a `<script>`
        tag and a `<style>` tag.

        '
      operationId: widgets#settings
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  settings:
                    type: string
      tags:
        - Other Widgets
  "/widgets/html_miracle":
    get:
      security:
        - PrivateAPIKey: []
          ShopDomain: []
        - PublicAPIKey: []
          ShopDomain: []
      summary: "Miracle HTML \U0001FA84"
      description: 'Special HTML that helps show essential parts of widgets before
        the JS and CSS files are loaded.

        '
      operationId: widgets#html_miracle
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  html_miracle:
                    type: string
      tags:
        - Other Widgets
  "/widgets/checkout_comments_widget":
    get:
      security:
        - PrivateAPIKey: []
          ShopDomain: []
        - PublicAPIKey: []
          ShopDomain: []
      summary: Product Checkout Comments widget
      description: 'Checkout Comments widget for a product (for Checkout Comments
        app only). Either product''s handle, external ID, or Judge.me ID is required
        to specify which product.

        '
      operationId: widgets#checkout_comments_widget
      parameters:
        - "$ref": "#/components/parameters/product__handle"
        - "$ref": "#/components/parameters/product__external_id"
        - "$ref": "#/components/parameters/product__id"
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_external_id:
                    type: integer
                  checkout_comments_widget:
                    type: string
      tags:
        - Other Widgets
  "/reviews":
    get:
      summary: Index
      operationId: reviews#index
      parameters:
        - "$ref": "#/components/parameters/per_page"
        - "$ref": "#/components/parameters/page"
        - "$ref": "#/components/parameters/reviewer_id"
        - "$ref": "#/components/parameters/product_id"
        - "$ref": "#/components/parameters/rating"
      responses:
        '200':
          description: Array of reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  current_page:
                    "$ref": "#/components/parameters/page/schema"
                  per_page:
                    "$ref": "#/components/parameters/per_page/schema"
                  reviews:
                    type: array
                    items:
                      "$ref": "#/components/schemas/ResponseReview"
      tags:
        - Reviews
    post:
      security: []
      summary: Create
      description: |
        Create a `web` review in background. Note: This **doesn't** require authentication, just as how anyone can leave a review in the public form on product pages.
        Note: this endpoint doesn't create any review if the shop [disables Web Reviews](https://judge.me/settings?jump_to=web+reviews).
      operationId: reviews#create
      responses:
        '200':
          description: ''
          headers: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestCreateReview"
      tags:
        - Reviews
  "/reviews/count":
    get:
      summary: Count
      operationId: reviewers#count
      parameters:
        - "$ref": "#/components/parameters/reviewer_id"
        - "$ref": "#/components/parameters/product_id"
        - "$ref": "#/components/parameters/rating"
      responses:
        '200':
          description: ''
          headers: {}
      tags:
        - Reviews
  "/reviews/{id}":
    parameters:
      - "$ref": "#/components/parameters/review__id_in_path"
    get:
      summary: Get
      operationId: reviews#get
      responses:
        '200':
          description: Review info
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviewer:
                    "$ref": "#/components/schemas/ResponseReview"
      tags:
        - Reviews
  "/products":
    get:
      summary: Index
      operationId: products#index
      parameters:
        - "$ref": "#/components/parameters/page"
        - "$ref": "#/components/parameters/per_page"
      responses:
        '200':
          description: Array of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  current_page:
                    "$ref": "#/components/parameters/page/schema"
                  per_page:
                    "$ref": "#/components/parameters/per_page/schema"
                  products:
                    type: array
                    items:
                      "$ref": "#/components/schemas/ResponseProduct"
      tags:
        - Products
    post:
      summary: Create
      operationId: products#create
      responses:
        '200':
          description: Product info
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    "$ref": "#/components/schemas/ResponseProduct"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestCreateProduct"
      tags:
        - Products
  "/products/count":
    get:
      summary: Count
      operationId: products#count
      responses:
        '200':
          description: ''
          headers: {}
      tags:
        - Products
  "/products/{id}":
    parameters:
      - "$ref": "#/components/parameters/product__id_in_path"
      - "$ref": "#/components/parameters/product__external_id"
      - "$ref": "#/components/parameters/product__handle"
    get:
      summary: Get
      operationId: products#get
      responses:
        '200':
          description: Product info
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    "$ref": "#/components/schemas/ResponseProduct"
      tags:
        - Products
    put:
      summary: Update
      description: 'Update product info. Note: the new info to update the product
        is nested in `product` attribute'
      operationId: products#update
      parameters: []
      responses:
        '200':
          description: Product info
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    "$ref": "#/components/schemas/ResponseProduct"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product:
                  "$ref": "#/components/schemas/RequestUpdateProduct"
      tags:
        - Products
  "/products/bulk_create":
    post:
      summary: Bulk Create
      description: Similar to `products#create`, this endpoint creates multiple products
        (in background) in one request
      operationId: products#bulk_create
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    "$ref": "#/components/schemas/RequestCreateProduct"
      tags:
        - Products
  "/orders":
    get:
      summary: Index
      operationId: orders#index
      parameters:
        - "$ref": "#/components/parameters/per_page"
        - "$ref": "#/components/parameters/page"
        - "$ref": "#/components/parameters/order_start_date"
        - "$ref": "#/components/parameters/order_end_date"
      responses:
        '200':
          description: Array of orders fulfilled within `start_date` and `end_date`
            (inclusive)
          content:
            application/json:
              schema:
                type: object
                properties:
                  start_date:
                    "$ref": "#/components/parameters/order_start_date/schema"
                  end_date:
                    "$ref": "#/components/parameters/order_end_date/schema"
                  current_page:
                    "$ref": "#/components/parameters/page/schema"
                  per_page:
                    "$ref": "#/components/parameters/per_page/schema"
                  orders:
                    type: array
                    items:
                      "$ref": "#/components/schemas/ResponseOrder"
      tags:
        - Orders
    post:
      summary: Create
      description: |
        Create an order in Judge.me. This has the same behaviors when Judge.me receives a
        fulfilled order of the shop from an ecommerce platform (e.g. Shopify).

        **Note**: orders created here also automatically start Review Request Email sequence. In other words,
        a review request email will be automatically sent after {14} days.
      operationId: orders#create
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema: {
                type: 'object'
              }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestCreateOrder"
      tags:
        - Orders
  "/orders/count":
    get:
      summary: Count
      operationId: orders#count
      parameters:
        - "$ref": "#/components/parameters/order_start_date"
        - "$ref": "#/components/parameters/order_end_date"
      responses:
        '200':
          description: Count of orders fulfilled within `start_date` and `end_date`
            (inclusive)
          content:
            application/json:
              schema:
                type: object
                properties:
                  start_date:
                    "$ref": "#/components/parameters/order_start_date/schema"
                  end_date:
                    "$ref": "#/components/parameters/order_end_date/schema"
                  count:
                    type: number
                    example: 100
      tags:
        - Orders
  "/orders/{id}":
    parameters:
      - "$ref": "#/components/parameters/order__external_id"
      - "$ref": "#/components/parameters/order__id_in_path"
    get:
      summary: Get
      description: 'Get info of an order, by either external (Shopify) ID `external_id`
        or Judge.me internal ID `id`.

        '
      operationId: orders#get
      parameters: []
      responses:
        '200':
          description: Info of the order
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    "$ref": "#/components/schemas/ResponseOrder"
      tags:
        - Orders
    put:
      summary: Update
      description: |
        Update info of an order, by either external (Shopify) ID `external_id` or Judge.me internal ID `id`.

        This is usually to update customer info, or to stop the order from sending RRE (by setting `cancelled_at, or changing `fulfillment_status`, `tags`).
      operationId: orders#update
      parameters: []
      responses:
        '200':
          description: Info of the order
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    "$ref": "#/components/schemas/ResponseOrder"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestUpdateOrder"
      tags:
        - Orders
  "/line_items":
    get:
      summary: Index
      description: Get line items of an order, specified by either order external
        (Shopify) ID `external_id` or Judge.me internal ID `id`.
      operationId: line_items#index
      parameters:
        - "$ref": "#/components/parameters/order__external_id"
        - "$ref": "#/components/parameters/order__id"
      responses:
        '200':
          description: Line Items of the Order
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    "$ref": "#/components/schemas/internal_id"
                  order_external_id:
                    "$ref": "#/components/schemas/external_id"
                  order_name:
                    type: string
                    description: Order name
                    example: "#1234"
                  line_items:
                    type: array
                    items:
                      "$ref": "#/components/schemas/ResponseLineItem"
      tags:
        - Line Items
  "/line_items/{id}":
    parameters:
      - "$ref": "#/components/parameters/line_item__id_in_path"
    get:
      summary: Get
      description: 'Get info of an line item, specified by its Judge.me internal ID.
        Note: we don''t support external (Shopify) ID in this endpoint'
      operationId: line_items#get
      responses:
        '200':
          description: Line Item info
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResponseLineItem"
      tags:
        - Line Items
  "/delivery_trackings":
    get:
      summary: Index
      description: Get delivery_trackings (aka fulfillments) of an order, specified
        by either order external (Shopify) ID `external_id` or Judge.me internal ID
        `id`.
      operationId: delivery_trackings#index
      parameters:
        - "$ref": "#/components/parameters/order__external_id"
        - "$ref": "#/components/parameters/order__id"
      responses:
        '200':
          description: Delivery Trackings of the Order
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    "$ref": "#/components/schemas/internal_id"
                  order_external_id:
                    "$ref": "#/components/schemas/external_id"
                  order_name:
                    type: string
                    description: Order name
                    example: "#1234"
                  delivery_trackings:
                    type: array
                    items:
                      "$ref": "#/components/schemas/ResponseDeliveryTracking"
      tags:
        - Delivery Trackings
  "/delivery_trackings/{id}":
    parameters:
      - "$ref": "#/components/parameters/delivery_tracking__id_in_path"
    get:
      summary: Get
      description: 'Get info of a delivery tracking, specified by its Judge.me internal
        ID. Note: we don''t support external (Shopify) ID in this endpoint'
      operationId: delivery_trackings#get
      responses:
        '200':
          description: Delivery Tracking info
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResponseDeliveryTracking"
      tags:
        - Delivery Trackings
    put:
      summary: Update
      description: |
        Update `courier` and `tracking_number` of the Delivery Tracking. Judge.me will use the 2 updated fields
        to check for `tracking_status` **in background**. Updating `tracking_status` directly is not supported.
      operationId: delivery_trackings#update
      responses:
        '200':
          description: 'Updated Delivery Tracking info. Note: `tracking_status` will
            not be updated immediately in the response, as it is being updated in
            background.'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResponseDeliveryTracking"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestDeliveryTracking"
      tags:
        - Delivery Trackings
  "/reviewers/{id}":
    parameters:
      - "$ref": "#/components/parameters/reviewer__id_in_path"
      - "$ref": "#/components/parameters/reviewer__external_id"
      - "$ref": "#/components/parameters/reviewer__email"
    get:
      summary: Get
      operationId: reviewers#get
      responses:
        '200':
          description: Reviewer info
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviewer:
                    "$ref": "#/components/schemas/ResponseReviewer"
      tags:
        - Reviewers
    put:
      summary: Update
      description: Create or Update reviewer
      operationId: reviewers#update
      responses:
        '200':
          description: Reviewer info
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviewer:
                    "$ref": "#/components/schemas/ResponseReviewer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reviewer:
                  "$ref": "#/components/schemas/RequestReviewer"
      tags:
        - Reviewers
  "/reviewers/data_request":
    post:
      summary: Data Request
      operationId: reviewers#data_request
      responses:
        '200':
          description: ''
          headers: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                customer:
                  email: john@example.com
                orders_requested:
                  - order_external_id_1
                  - order_external_id_2
      tags:
        - Reviewers
  "/webhooks":
    get:
      summary: Index
      operationId: webhooks#index
      responses:
        '200':
          description: Array of webhooks
          content:
            application/json:
              schema:
                type: object
                properties:
                  shop_id:
                    "$ref": "#/components/schemas/internal_id"
                  shop_domain:
                    "$ref": "#/components/schemas/shop_domain"
                  webhooks:
                    type: array
                    items:
                      "$ref": "#/components/schemas/ResponseWebhook"
      tags:
        - Webhooks
    post:
      summary: Create
      description: |
        Create a webhook in Judge.me with a `key` and a `url`. When an event associated with `key` happens,
        Judge.me will send a POST request to the webhook's `url`.
      operationId: webhooks#create
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  shop_id:
                    "$ref": "#/components/schemas/internal_id"
                  shop_domain:
                    "$ref": "#/components/schemas/shop_domain"
                  webhook:
                    "$ref": "#/components/schemas/ResponseWebhook"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                webhook:
                  "$ref": "#/components/schemas/RequestWebhook"
      tags:
        - Webhooks
  "/webhooks/{id}":
    parameters:
      - "$ref": "#/components/parameters/webhook__id_in_path"
    get:
      summary: Get
      operationId: webhooks#get
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  shop_id:
                    "$ref": "#/components/schemas/internal_id"
                  shop_domain:
                    "$ref": "#/components/schemas/shop_domain"
                  webhook:
                    "$ref": "#/components/schemas/ResponseWebhook"
      tags:
        - Webhooks
    put:
      summary: Update
      operationId: webhooks#update
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  shop_id:
                    "$ref": "#/components/schemas/internal_id"
                  shop_domain:
                    "$ref": "#/components/schemas/shop_domain"
                  webhook:
                    "$ref": "#/components/schemas/ResponseWebhook"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                webhook:
                  "$ref": "#/components/schemas/RequestWebhook"
      tags:
        - Webhooks
  "/webhooks/bulk_create":
    post:
      summary: Bulk Create
      operationId: webhooks#bulk_create
      responses:
        '200':
          description: ''
          headers: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                webhooks:
                  type: array
                  items:
                    "$ref": "#/components/schemas/RequestWebhook"
      tags:
        - Webhooks
  "/shops/info":
    get:
      summary: Get current shop's info
      operationId: shops#info
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  shop:
                    "$ref": "#/components/schemas/Shop"
                required:
                  - shop
      tags:
        - Shops
  "/shops":
    put:
      summary: Update current shop
      operationId: shops#update
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  shop:
                    "$ref": "#/components/schemas/Shop"
                required:
                  - shop
      requestBody:
        required: true
        description: New information of the shop
        content:
          application/json:
            schema:
              type: string
            example:
              domain: "{{shop_domain}}"
              custom_domain: "{{shop_domain}}"
              email: john@example.com
              owner: John Smith
              phone: "+123456789"
              name: Shop Name
              country: US
              timezone: "(GMT-05:00) America/New_York"
              plan: basic
      tags:
        - Shops
    delete:
      summary: Uninstall shop from Judge.me
      operationId: shops#destroy
      responses:
        '200':
          description: Uninstalled shop successfully
          content:
            application/json: {}
      tags:
        - Shops
  "/comments":
    post:
      security:
        - PrivateAPIKey: []
          ShopDomain: []
        - PublicAPIKey: []
          ShopDomain: []
      summary: Create
      description: Create a checkout comment. Available in Checkout Comments app only.
      operationId: comments#create
      responses:
        '200':
          description: ''
          headers: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: Comment content
                external_product_id:
                  "$ref": "#/components/schemas/external_id"
                create_from:
                  type: string
                  enum:
                    - checkout_page
                    - email
                  example: checkout_page
                customer:
                  type: object
                  properties:
                    first_name:
                      type: string
                      example: John
                    last_name:
                      type: string
                      example: Smith
                    email:
                      "$ref": "#/components/schemas/email"
                    external_id:
                      "$ref": "#/components/schemas/external_id"
      tags:
        - Comments
  "/settings":
    get:
      summary: Index
      description: Get setting values of the shop
      operationId: settings#index
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  settings:
                    type: object
                    description: An key-value-pair object whose keys are setting keys,
                      values are the value of each setting
                    example:
                      admin_email: support@judge.me
                      autopublish: true
                      widget_star_color: "#339999"
                      enable_review_pictures: true
      parameters:
        - name: setting_keys
          description: Array of keys of settings
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          example:
            - admin_email
            - autopublish
            - widget_star_color
            - enable_review_pictures
      tags:
        - Settings
components:
  schemas:
    shop_domain:
      type: string
      example: example.myshopify.com
    email:
      type: string
      format: email
      example: john@example.com
    external_id:
      type: number
      description: 'External (Shopify) ID of the resource. Note: this is NOT internal
        ID of Judge.me.'
      example: 999999
    internal_id:
      type: number
      description: 'Judge.me internal ID of the resource. Note: this ID is from Judge.me
        internally.'
      example: 111
    unsubscribed_at:
      type: string
      format: date-time
      description: The time when user has unsubscribed to marketing emails. Blank
        if user still subscribes.
      example:
        "$ref": "#/components/examples/datetime_str/value"
    phone:
      type: string
      example: "+123456789"
    person_name:
      type: string
      example: John Smith
    tags:
      type: string
      description: Comma-separated tags
      example: tag1, tag2, tag3
    tags_array:
      type: array
      items:
        type: string
      example:
        - tag1
        - tag2
        - tag3
    rating:
      type: number
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
      example: 5
    webhook_key:
      type: string
      enum:
        - widget/settings/updated
        - widget/review_widget/updated
        - widget/preview_badge/updated
        - widget/all_reviews_count/updated
        - widget/all_reviews_rating/updated
        - widget/shop_reviews_count/updated
        - widget/shop_reviews_rating/updated
        - widget/verified_badge/updated
        - widget/all_reviews_page/updated
        - widget/featured_carousel/updated
        - widget/reviews_tab/updated
        - widget/html_miracle/updated
        - widget/product_comment/updated
        - review/created
        - review/created_fail
      example: review/created
    Order:
      type: object
      required:
        - name
        - cancelled_at
        - fulfillment_status
        - tags
        - customer_locale
        - customer
      properties:
        name:
          type: string
          example: "#1234"
        cancelled_at:
          type: string
          format: date-time
        fulfillment_status:
          type: string
          example: fulfilled
          description: Value other than `fulfilled` means the order is not fulfilled
            yet.
        tags:
          "$ref": "#/components/schemas/tags"
        customer_locale:
          type: string
          example: en
          description: Locale of the buyer, to determine which language to use in
            the review request email Judge.me sends
        customer:
          "$ref": "#/components/schemas/RequestCustomer"
    Product:
      type: object
      required:
        - title
        - handle
        - vendor
        - image_url
        - in_store
        - path
        - tags
        - product_type
        - description
      properties:
        title:
          type: string
          example:
            "$ref": "#/components/examples/product_title/value"
        handle:
          type: string
          example:
            "$ref": "#/components/examples/product_handle/value"
        path:
          type: string
          example: "/p/example-product"
          description: |
            By default, Judge.me constructs product URLs for storefront with this format `/products/[handle]`.
            If the product URL doesn't follow that format, `path` will be used.
        excluded:
          type: boolean
          example: false
          description: Whether Judge.me sends RREs for this product
        vendor:
          type: string
          example: some vendor
        in_store:
          type: boolean
          example: true
          description: Whether the product is published on storefront
        product_type:
          type: string
          example: product type
        description:
          type: string
          example: Some product description
        tags:
          "$ref": "#/components/schemas/tags"
        image_url:
          type: string
          example:
            "$ref": "#/components/examples/image_url/value"
        medium_image_url:
          type: string
          example:
            "$ref": "#/components/examples/image_url/value"
        small_image_url:
          type: string
          example:
            "$ref": "#/components/examples/image_url/value"
    Reviewer:
      type: object
      required:
        - id
        - email
        - name
      properties:
        id:
          "$ref": "#/components/schemas/internal_id"
        email:
          "$ref": "#/components/schemas/email"
        name:
          "$ref": "#/components/schemas/person_name"
        phone:
          "$ref": "#/components/schemas/phone"
        tags:
          "$ref": "#/components/schemas/tags_array"
        accepts_marketing:
          type: boolean
        unsubscribed_at:
          "$ref": "#/components/schemas/unsubscribed_at"
    Review:
      type: object
      required:
        - id
        - email
        - name
      properties:
        id:
          "$ref": "#/components/schemas/internal_id"
        title:
          type: string
          example: Raw review title. This is not sanitized yet so do not print it
            out as-is in frontend.
        body:
          type: string
          example: Raw review body. This is not sanitized yet so do not print it out
            as-is in frontend.
        rating:
          "$ref": "#/components/schemas/rating"
        product_external_id:
          "$ref": "#/components/schemas/external_id"
        product_title:
          type: string
          example:
            "$ref": "#/components/examples/product_title/value"
        product_handle:
          type: string
          example:
            "$ref": "#/components/examples/product_handle/value"
        reviewer:
          "$ref": "#/components/schemas/ResponseReviewer"
        source:
          type: string
          example: email
          description: |
            Where the review originates, e.g. web, imported, email. Some sources (e.g. `email`, `fulfillment`) determine the review
            is verified-buyer, while other sources (e.g. `web`) depends on `verified` attribute to determine the review is verified-buyer.
        curated:
          type: string
          enum:
            - not-yet
            - ok
            - spam
          example: ok
          description: |
            Curated status of the review. `ok` means the review is published on storefront, `spam` means the review is not published (note: it doesn't mean the review is spam.
            If `not-yet`, whether the review is published on storefront depends on autopublish setting of the shop.
        hidden:
          type: boolean
          example: false
          description: |
            Whether the review is **archived** from merchant Reviews dashboard. Note: this doesn't determine
            whether the review is published on storefront or not, refer to `curated` attribute instead.
        verified:
          type: string
          example: buyer
          enum:
            - nothing
            - not-yet
            - unconfirmed-buyer
            - buyer
            - admin
            - verified-buyer
          description: |
            Verified status of the review. `buyer`, `confirmed-buyer`, `admin` mean the review is verified-buyer.
            `buyer` is the legacy status for `confirmed-buyer`.
            `admin` means Judge.me support manually marks the review as verified-buyer upon shop's request with some proof;
            and this may be weighted less than `confirmed-buyer` in Judge.me Medals.
        featured:
          type: boolean
          description: Whether the review is featured in the Featured Carousel widget
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        ip_address:
          type: string
        pictures:
          type: array
          items:
            type: object
            properties:
              hidden:
                type: boolean
              urls:
                type: object
                properties:
                  small:
                    type: string
                    description: URL of the review image
                  compact:
                    type: string
                    description: URL of the review image
                  huge:
                    type: string
                    description: URL of the review image
                  original:
                    type: string
                    description: Original URL of the review image
    Webhook:
      type: object
      description: |
        After a webhook consumer (i.e. a 3rd-party app) create a webhook in Judge.me with a `key` and a `url`,
        Judge.me will send a POST request to the webhook's `url` when an event associated with `key` happens.
      required:
        - key
        - url
      properties:
        key:
          "$ref": "#/components/schemas/webhook_key"
        url:
          type: string
          description: URL that receives the webhook
          example:
            "$ref": "#/components/examples/webhook_url/value"
    RequestCustomer:
      "$ref": "#/components/schemas/RequestReviewer"
    RequestFulfillment:
      type: object
      required:
        - id
        - status
        - created_at
      properties:
        id:
          "$ref": "#/components/schemas/external_id"
        status:
          type: string
          example: success
          description: Value other than 'success' means the fulfillment is not completed
            yet.
        tracking_company:
          type: string
          example: ups
          description: Optional order tracking info, used for integrations with other
            Delivery tracking apps
        tracking_number:
          type: string
          example: 1Z12345E0205271688
          description: Optional order tracking info, used for integrations with other
            Delivery tracking apps
        created_at:
          type: string
          format: date-time
          description: This is used to calculate `fulfilled_at` of the order
          example:
            "$ref": "#/components/examples/datetime_str/value"
      example:
        id: 1
        status: success
        tracking_company: ups
        tracking_number: 1Z12345E0205271688
        created_at: '2020-02-20T20:20:20+00:00'
    RequestLineItem:
      type: object
      required:
        - id
        - product_id
      properties:
        id:
          "$ref": "#/components/schemas/external_id"
        price:
          type: number
        quantity:
          type: number
        product_id:
          "$ref": "#/components/schemas/external_id"
      example:
        id: 1
        price: 15
        quantity: 1
        product_id: 1
    RequestCreateOrder:
      allOf:
        - "$ref": "#/components/schemas/Order"
        - type: object
          required:
            - id
            - fulfillments
            - line_items
          properties:
            shipping_address:
              type: object
              description: Judge.me needs to know shipping-to country of the order to
                apply whether domestic or international wait days when sending review
                request emails.
              example:
                country_code: US
            fulfillments:
              type: array
              items:
                "$ref": "#/components/schemas/RequestFulfillment"
            line_items:
              type: array
              items:
                "$ref": "#/components/schemas/RequestLineItem"
    RequestUpdateOrder:
      "$ref": "#/components/schemas/Order"
    RequestDeliveryTracking:
      type: object
      required:
        - courier
        - tracking_number
      properties:
        courier:
          type: string
          example: ups
          description: Delivery courier name. This is from `tracking_company` of `fulfillments`
            when creating the order
        tracking_number:
          type: string
          example: 1Z12345E0205271688
          description: Delivery tracking number. This is from `tracking_number` of
            `fulfillments` when creating the order
    RequestProductVariant:
      type: object
      required:
        - price
      properties:
        barcode:
          type: string
          example: '00123456789001'
        sku:
          type: string
          example: SKU-1
        mpn:
          type: string
          example: MPN-1
        price:
          type: string
          example: '100.00'
    RequestCreateProduct:
      allOf:
        - "$ref": "#/components/schemas/Product"
        - type: object
          required:
            - id
            - variants
          properties:
            id:
              "$ref": "#/components/schemas/external_id"
            variants:
              type: array
              items:
                "$ref": "#/components/schemas/RequestProductVariant"
    RequestUpdateProduct:
      allOf:
        - "$ref": "#/components/schemas/Product"
        - type: object
          required:
            - variants
          properties:
            variants:
              type: array
              items:
                "$ref": "#/components/schemas/RequestProductVariant"
    RequestReviewer:
      allOf:
        - "$ref": "#/components/schemas/Reviewer"
        - type: object
          properties:
            id:
              "$ref": "#/components/schemas/external_id"
            tags:
              "$ref": "#/components/schemas/tags"
    RequestCreateReview:
      type: object
      required:
        - shop_domain
        - platform
        - name
        - email
        - rating
        - body
      properties:
        shop_domain:
          type: string
          description: Domain of the shop
          example: example.myshopify.com
        platform:
          type: string
          description: Platform of the shop
          enum:
            - shopify
            - woocommerce
            - bigcommerce
          example: shopify
        id:
          type: number
          example: 999999
          description: |
            External (Shopify) ID of the Product. Note: this is NOT internal Product ID of Judge.me.
            If blank, the review is considered as a shop-level review.
        email:
          "$ref": "#/components/schemas/email"
        name:
          "$ref": "#/components/schemas/person_name"
        reviewer_name_format:
          type: string
          description: |
            How the reviewer wants to show their name publicly. Default is showing full name. Note that in shop settings,
            there is a similar option which determines the same behavior but for all reviews in that shop.
            When showing reviews, we will choose the most restrictive option between reviewer's option and shop setting. For example,
            if a review has `all_initials` while the shop setting is `last_initial`, we will show all initials, `J.S.`, but not `John S.`.
          example: ''
          enum:
            - ''
            - last_initial
            - all_initials
            - anonymous
        rating:
          "$ref": "#/components/schemas/rating"
        title:
          type: string
          example: Review title
        body:
          type: string
          example: Review body
        cf_answers:
          type: array
          items:
            type: object
            required:
              - cf_question_id
              - value
            properties:
              cf_question_id:
                type: number
                example: 1
                description: Judge.me ID of the custom form question
              value:
                type: string
                example: Yellow
                description: The answer to the custom form question
          description: Answers to the shop's custom forms
          example:
            - cf_question_id: 1
              value: Yellow
            - cf_question_id: 2
              value: Big
            - cf_question_id: 3
              value: 4/5
            - cf_question_id: 4
              value: Free text answer
        picture_urls:
          type: array
          items:
            type: string
            example:
              "$ref": "#/components/examples/image_url"
            description: URL of the review picture
          example:
            - https://pub-images.judge.me/judgeme/funny/big-pr.jpg
            - "$ref": "#/components/examples/image_url/value"
        ip_addr:
          type: string
          description: |
            IP address of the reviewer, used to display location of the review. If blank,
            Judge.me will use IP address that makes the API request
          example: 123.123.123.123
    RequestWebhook:
      "$ref": "#/components/schemas/Webhook"
    ResponseOrder:
      type: object
      required:
        - id
        - name
        - external_id
        - reviewer_id
        - fulfillment_status
        - fulfilled_at
      properties:
        id:
          "$ref": "#/components/schemas/internal_id"
        name:
          type: string
          example: "#1234"
        external_id:
          "$ref": "#/components/schemas/external_id"
        reviewer_id:
          "$ref": "#/components/schemas/internal_id"
        fulfillment_status:
          type: string
          example: fulfilled
        fulfilled_at:
          type: string
          format: date-time
          example:
            "$ref": "#/components/examples/datetime_str/value"
        cancelled_at:
          type: string
          format: date-time
          example:
        country:
          type: string
          example: US
          description: Code of the country from the order's shipping address
    ResponseLineItem:
      type: object
      required:
        - id
        - external_id
        - status
        - price
        - quantity
        - processed_at
        - product_id
        - product_external_id
      properties:
        id:
          "$ref": "#/components/schemas/internal_id"
        external_id:
          "$ref": "#/components/schemas/external_id"
        status:
          type: string
          example: sent
          description: Status key of the line item in the RRE sequence. Those statuses
            suffixed with `__predicted` mean the line item is not yet processed.
        price:
          type: number
          example: 15
        quantity:
          type: number
          example: 1
        processed_at:
          type: string
          description: The time the line item will be or has been processed (in RRE
            sequence)
          format: date-time
          example:
            "$ref": "#/components/examples/datetime_str/value"
        product_id:
          "$ref": "#/components/schemas/internal_id"
        product_external_id:
          "$ref": "#/components/schemas/external_id"
        review_id:
          "$ref": "#/components/schemas/internal_id"
    ResponseDeliveryTracking:
      type: object
      required:
        - id
        - external_id
        - courier
        - tracking_number
        - tracking_status
      properties:
        id:
          "$ref": "#/components/schemas/internal_id"
        external_id:
          "$ref": "#/components/schemas/external_id"
        courier:
          type: string
          example: ups
          description: Delivery courier name. This is from `tracking_company` of `fulfillments`
            when creating the order
        tracking_number:
          type: string
          example: 1Z12345E0205271688
          description: Delivery tracking number. This is from `tracking_number` of
            `fulfillments` when creating the order
        tracking_status:
          type: string
          example: Delivered
          description: 'Status of the delivery tracking. Judge.me daily fetches this
            info from a delivery tracking integration (e.g. Aftership), using `courier`
            and `tracking_number`.

            '
    ResponseProduct:
      allOf:
        - "$ref": "#/components/schemas/Product"
        - type: object
          required:
            - id
            - external_id
          properties:
            id:
              "$ref": "#/components/schemas/internal_id"
            external_id:
              "$ref": "#/components/schemas/external_id"
            tags:
              "$ref": "#/components/schemas/tags_array"
            mpns:
              type: array
              items:
                type: string
                example: MPN-1
            barcodes:
              type: array
              items:
                type: string
                example: SKU-1
            skus:
              type: array
              items:
                type: string
                example: '00123456789001'
            lowest_price:
              type: number
              example: 100
            highest_price:
              type: number
              example: 100
    ResponseReviewer:
      allOf:
        - "$ref": "#/components/schemas/Reviewer"
        - type: object
          required:
            - external_id
          properties:
            external_id:
              "$ref": "#/components/schemas/external_id"
    ResponseReview:
      allOf:
        - "$ref": "#/components/schemas/Review"
    ResponseWebhook:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              "$ref": "#/components/schemas/internal_id"
            failure_count:
              type: number
              description: Number of consecutive times that Judge.me receives a non-200
                response when sending the webhook.
              example: 0
        - "$ref": "#/components/schemas/Webhook"
    Shop:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
        awesome:
          type: boolean
        country:
          type: string
        created_at:
          type: string
          format: date-time
        currency:
          type: string
        custom_domain:
          type: string
        dmarc_ok:
          type: boolean
        domain:
          type: string
        email:
          type: string
        name:
          type: string
        owner:
          type: string
        phone:
          type: string
        plan:
          type: string
        platform:
          type: string
        timezone:
          type: string
        updated_at:
          type: string
          format: date-time
        widget_version:
          type: string
      required:
        - awesome
        - country
        - created_at
        - currency
        - custom_domain
        - dmarc_ok
        - domain
        - email
        - id
        - name
        - owner
        - phone
        - plan
        - platform
        - timezone
        - updated_at
        - widget_version
      title: Shop
  parameters:
    shop_domain:
      name: shop_domain
      in: query
      schema:
        "$ref": "#/components/schemas/shop_domain"
    api_token:
      name: api_token
      in: query
      schema:
        type: string
        example: "{{api_token}}"
    filter_rating:
      name: filter_rating
      description: Only include reviews with this rating
      in: query
      schema:
        type: number
        enum:
          - 1
          - 2
          - 3
          - 4
          - 5
        example: 5
    widget_review_type:
      name: review_type
      description: Whether to show product reviews, or shop reviews, default to product
        reviews
      in: query
      schema:
        type: string
        enum:
          - product-reviews
          - shop-reviews
        example: product-reviews
    page:
      name: page
      description: For pagination
      in: query
      schema:
        type: number
        example: 1
    per_page_5:
      name: per_page
      description: For pagination
      in: query
      schema:
        type: number
        example: 5
    per_page:
      name: per_page
      description: For pagination
      in: query
      schema:
        type: number
        example: 10
    product__handle:
      name: handle
      in: query
      schema:
        type: string
        example: example-product
    product__external_id:
      name: external_id
      in: query
      schema:
        type: number
        example: 999999
      description: 'External (Shopify) ID of the Product. Note: this is NOT internal
        Product ID of Judge.me.'
    product__id:
      name: id
      in: query
      schema:
        "$ref": "#/components/schemas/internal_id"
      description: Judge.me internal ID of the Product
    product__id_in_path:
      name: id
      in: path
      required: true
      schema:
        type: number
        example: -1
      description: |
        Judge.me internal ID of the Product. Set to `-1` and use `external_id` or `handle` param
        to find Product by external (Shopify) ID or by handle of the Product.
    order__external_id:
      name: external_id
      in: query
      schema:
        "$ref": "#/components/schemas/external_id"
      description: 'External (Shopify) ID of the Order. Note: this is NOT internal
        Order ID of Judge.me.'
    order__id_in_path:
      name: id
      in: path
      required: true
      schema:
        type: number
        example: -1
      description: Judge.me internal ID of the Order. Set to `-1` and use `external_id`
        param to find Order by external (Shopify) ID of the Order.
    order_start_date:
      name: start_date
      in: query
      schema:
        type: string
        example: 20/02/2020
      description: Find orders fulfilled since `start_date`, inclusive (dd/mm/yyyy)
    order_end_date:
      name: end_date
      in: query
      schema:
        type: string
        example: 20/03/2020
      description: Find orders fulfilled until `end_date`, inclusive (dd/mm/yyyy)
    order__id:
      name: id
      in: query
      schema:
        "$ref": "#/components/schemas/internal_id"
      description: Judge.me internal ID of the Order
    line_item__id_in_path:
      name: id
      in: path
      required: true
      schema:
        "$ref": "#/components/schemas/internal_id"
      description: Judge.me internal ID of the Line Item
    delivery_tracking__id_in_path:
      name: id
      in: path
      required: true
      schema:
        "$ref": "#/components/schemas/internal_id"
      description: Judge.me internal ID of the Delivery Tracking (aka Fulfillment)
    reviewer__id_in_path:
      name: id
      in: path
      required: true
      schema:
        type: number
        example: -1
      description: |
        Judge.me internal ID of the Reviewer. Set to `-1` and use `external_id` or `email` param
        to find Reviewer by external (Shopify) ID or by email of the Reviewer.
    reviewer__external_id:
      name: external_id
      in: query
      schema:
        "$ref": "#/components/schemas/external_id"
      description: 'External (Shopify) ID of the Reviewer. Note: this is NOT internal
        Reviewer ID of Judge.me.'
    reviewer__email:
      name: email
      in: query
      schema:
        "$ref": "#/components/schemas/email"
    reviewer__id:
      name: id
      in: query
      schema:
        "$ref": "#/components/schemas/internal_id"
      description: Judge.me internal ID of the Reviewer
    product_id:
      name: product_id
      in: query
      schema:
        "$ref": "#/components/schemas/internal_id"
      description: Judge.me internal ID of the Product
    reviewer_id:
      name: reviewer_id
      in: query
      schema:
        "$ref": "#/components/schemas/internal_id"
      description: Judge.me internal ID of the Reviewer
    rating:
      name: rating
      description: Only include reviews with this rating
      in: query
      schema:
        type: number
        enum:
          - 1
          - 2
          - 3
          - 4
          - 5
        example: 5
    review__id_in_path:
      name: id
      in: path
      required: true
      schema:
        type: number
        example: -1
      description: 'Judge.me internal ID of the Review

        '
    webhook__id_in_path:
      name: id
      in: path
      required: true
      schema:
        type: number
        example: -1
      description: 'Judge.me internal ID of the Webhook

        '
  securitySchemes:
    PrivateAPIKey:
      type: apiKey
      in: query
      name: api_token
    PublicAPIKey:
      type: apiKey
      in: query
      name: api_token
    ShopDomain:
      type: apiKey
      in: query
      name: shop_domain
  examples:
    datetime_str:
      value: '2020-02-20T20:20:20+00:00'
    image_url:
      value: https://pub-images.judge.me/judgeme/funny/random-number.png
    product_title:
      value: Example product
    product_handle:
      value: example-product
    webhook_url:
      value: https://example.com/webhook/example.myshopify.com/settings/updated

security:
  - PrivateAPIKey: []
    ShopDomain: []
