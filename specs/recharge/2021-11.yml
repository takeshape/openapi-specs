openapi: 3.0.0
info:
  title: Recharge API
  version: 2021-11
  description: API specification for the Recharge REST API
servers:
  - url: https://api.rechargeapps.com
components:
  securitySchemes:
    version:
      type: apiKey
      in: header
      name: X-Recharge-Version
    apiKey:
      type: apiKey
      in: header
      name: X-Recharge-Access-Token
  schemas:
    Address:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - customer_id
        - address1
        - city
        - country_code
        - first_name
        - last_name
        - phone
        - province
        - zip
      properties:
        id:
          type: integer
          format: int56
          description: Unique numeric identifier for the Address.
        payment_method_id:
          type: integer
          description: Unique numeric identifier for the Payment Method associated to the Address.
        address1:
          type: string
          description: The street associated with the Address.
        address2:
          type: string
          description: Any additional information associated with the Address.
        city:
          type: string
          description: The city associated with the address.
        company:
          type: string
          description: The company associated with the address.
        country_code:
          type: string
          description: 2-letter country code.
        customer_id:
          type: integer
          description: Unique numeric identifier for the customer associated with the address.
        discounts:
          type: array
          description: A list of discounts applied on the address. These discounts will apply to future recurring charges associated with this address.
          items:
            $ref: '#/components/schemas/AppliedDiscount'
        first_name:
          type: string
          description: The customer’s first name associated with the address.
        last_name:
          type: string
          description: The customer’s last name associated with the address.
        order_attributes:
          type: array
          description: Extra information that is added to the order.
          items:
            $ref: '#/components/schemas/OrderAttribute'
        order_note:
          type: string
          description: Notes to be added to all orders associated with the address.
        phone:
          type: string
          description: The phone number associated with the address.
        presentment_currency:
          type: string
          description: The currency on the subscription contract in Shopify. Only set if the currency is different from the store-level currency. Else, will default to store-level currency.
        province:
          type: string
          description: The state or province associated with the address.
        shipping_lines_conserved:
          type: array
          description: Shipping rates that have previously been overridden via shipping_lines_override but are currently inactive.
          items:
            $ref: '#/components/schemas/ShippingLineReference'
        shipping_lines_override:
          type: array
          description: Used when shipping rates need to be overridden. If this parameter has value null, rates will be fetched when Charge is created or regenerated.
          items:
            $ref: '#/components/schemas/ShippingLineReference'
        zip:
          type: string
          description: The zip or postal code associated with the address.
        created_at:
          type: string
          format: date-time
          description: The date and time when the address was created.
        updated_at:
          type: string
          format: date-time
          description: The date and time when the address was last updated.
    InlineAddress:
      type: object
      properties:
        address1:
          type: string
          description: The street associated with the Address.
        address2:
          type: string
          description: Any additional information associated with the Address.
        city:
          type: string
          description: The city associated with the address.
        company:
          type: string
          description: The company associated with the address.
        country_code:
          type: string
          description: 2-letter country code.
        first_name:
          type: string
          description: The customer’s first name associated with the address.
        last_name:
          type: string
          description: The customer’s last name associated with the address.
        phone:
          type: string
          description: The phone number associated with the address.
        province:
          type: string
          description: The state or province associated with the address.
        zip:
          type: string
          description: The zip or postal code associated with the address.
    GiftAddress:
      type: object
      properties:
        address1:
          type: string
          description: The street associated with the Address.
        address2:
          type: string
          description: Any additional information associated with the Address.
        city:
          type: string
          description: The city associated with the address.
        company:
          type: string
          description: The company associated with the address.
        country_code:
          type: string
          description: 2-letter country code.
        first_name:
          type: string
          description: The customer’s first name associated with the address.
        last_name:
          type: string
          description: The customer’s last name associated with the address.
        phone:
          type: string
          description: The phone number associated with the address.
        province:
          type: string
          description: The state or province associated with the address.
        zip:
          type: string
          description: The zip or postal code associated with the address.
        email:
          type: string
          description: Email address for the giftee. It is required for sending the notification to the giftee.
    CreateAddressInput:
      type: object
      required:
        - customer_id
        - address1
        - city
        - country_code
        - first_name
        - last_name
        - phone
        - province
        - zip
      properties:
        payment_method_id:
          type: integer
          description: Unique numeric identifier for the Payment Method associated to the Address.
        address1:
          type: string
          description: The street associated with the Address.
        address2:
          type: string
          description: Any additional information associated with the Address.
        city:
          type: string
          description: The city associated with the address.
        company:
          type: string
          description: The company associated with the address.
        country_code:
          type: string
          description: 2-letter country code.
        customer_id:
          type: integer
          description: Unique numeric identifier for the customer associated with the address.
        discounts:
          type: array
          description: A list of discounts applied on the address. These discounts will apply to future recurring charges associated with this address.
          items:
            $ref: '#/components/schemas/Reference'
        first_name:
          type: string
          description: The customer’s first name associated with the address.
        last_name:
          type: string
          description: The customer’s last name associated with the address.
        order_attributes:
          type: array
          description: Extra information that is added to the order.
          items:
            $ref: '#/components/schemas/OrderAttribute'
        order_note:
          type: string
          description: Notes to be added to all orders associated with the address.
        phone:
          type: string
          description: The phone number associated with the address.
        presentment_currency:
          type: string
          description: The currency on the subscription contract in Shopify. Only set if the currency is different from the store-level currency. Else, will default to store-level currency.
        province:
          type: string
          description: The state or province associated with the address.
        shipping_lines_override:
          type: array
          description: Used when shipping rates need to be overridden. If this parameter has value null, rates will be fetched when Charge is created or regenerated.
          items:
            $ref: '#/components/schemas/ShippingLineReference'
        zip:
          type: string
          description: The zip or postal code associated with the address.
    UpdateAddressInput:
      type: object
      properties:
        payment_method_id:
          type: integer
          description: Unique numeric identifier for the Payment Method associated to the Address.
        address1:
          type: string
          description: The street associated with the Address.
        address2:
          type: string
          description: Any additional information associated with the Address.
        city:
          type: string
          description: The city associated with the address.
        company:
          type: string
          description: The company associated with the address.
        country_code:
          type: string
          description: 2-letter country code.
        discounts:
          type: array
          description: A list of discounts applied on the address. These discounts will apply to future recurring charges associated with this address.
          items:
            $ref: '#/components/schemas/Reference'
        first_name:
          type: string
          description: The customer’s first name associated with the address.
        last_name:
          type: string
          description: The customer’s last name associated with the address.
        order_attributes:
          type: array
          description: Extra information that is added to the order.
          items:
            $ref: '#/components/schemas/OrderAttribute'
        order_note:
          type: string
          description: Notes to be added to all orders associated with the address.
        phone:
          type: string
          description: The phone number associated with the address.
        province:
          type: string
          description: The state or province associated with the address.
        shipping_lines_override:
          type: array
          description: Used when shipping rates need to be overridden. If this parameter has value null, rates will be fetched when Charge is created or regenerated.
          items:
            $ref: '#/components/schemas/ShippingLineReference'
        zip:
          type: string
          description: The zip or postal code associated with the address.
    AddressResponse:
      type: object
      required:
        - address
      properties:
        address:
          $ref: '#/components/schemas/Address'
    BundleSelection:
      type: object
      properties:
        id:
          type: integer
          format: int56
          description: The unique numeric identifier for the BundleSelection.
        bundle_variant_id:
          type: integer
          description: The ID of the BundleVariant associated with the BundleSelection.
        purchase_item_id:
          type: integer
          description: The ID of the PurchaseItem associated with the BundleSelection.
        created_at:
          type: string
          format: date-time
          description: The date and time when the contents were selected.
        updated_at:
          type: string
          format: date-time
          description: The date and time at which the BundleSelection was most recently updated.
        external_product_id:
          type: string
          description: The product id as it appears in the external e-commerce platform. The external_product_id of the Product record in Recharge, linking the BundleSelection to a Product associated with a Bundle.
        external_variant_id:
          type: string
          description: The variant id as it appears in the external e-commerce platform. The external_variant_id of the Product record in Recharge, linking the BundleSelection to a Product associated with a Bundle.
        items:
          type: array
          items:
            $ref: '#/components/schemas/BundleSelectionItem'
    BundleSelectionItem:
      type: object
      properties:
        id:
          type: integer
          format: int56
          description: The unique numeric identifier for the item selection.
        collection_id:
          type: string
          description: The collection id as it appears in the external e-commerce platform.
        collection_source:
          type: string
          description: The identifier of the external e-commerce platform.
        created_at:
          type: string
          format: date-time
          description: The date and time when this item was selected.
        external_product_id:
          type: string
          description: The product id as it appears in the external e-commerce platform. This is the item which is going to be extracted when the Bundle is processed.
        external_variant_id:
          type: string
          description: The variant id as it appears in the external e-commerce platform. This is the item which is going to be extracted when the Bundle is processed.
        quantity:
          type: integer
          description: The quantity of this product.
        updated_at:
          type: string
          format: date-time
          description: The date and time at which the item selection was most recently updated.
    BundleSelectionResponse:
      type: object
      required:
        - bundle_selection
      properties:
        bundle_selection:
          $ref: '#/components/schemas/BundleSelection'
    BundleSelectionInput:
      type: object
      required:
        - purchase_item_id
        - items
      properties:
        purchase_item_id:
          type: integer
          description: The ID of the PurchaseItem associated with the BundleSelection.
        items:
          type: array
          items:
            $ref: '#/components/schemas/BundleSelectionItemInput'
    BundleSelectionItemInput:
      type: object
      properties:
        collection_id:
          type: string
          description: The collection id as it appears in the external e-commerce platform.
        collection_source:
          type: string
          description: The identifier of the external e-commerce platform.
        external_product_id:
          type: string
          description: The product id as it appears in the external e-commerce platform. This is the item which is going to be extracted when the Bundle is processed.
        external_variant_id:
          type: string
          description: The variant id as it appears in the external e-commerce platform. This is the item which is going to be extracted when the Bundle is processed.
        quantity:
          type: integer
          description: The quantity of this product.
    AppliedDiscount:
      type: object
      description: Represents a discount applied to an address.
      properties:
        id:
          type: integer
          format: int56
          description: Unique numeric identifier for the Discount.
        code:
          type: string
          description: The discount code.
        value:
          type: number
          description: The discount value.
        value_type:
          type: string
          description: The type of discount value (e.g., fixed_amount).
    DiscountInput:
      type: object
      properties:
        discount_code:
          type: string
    CheckoutDiscount:
      type: object
      properties:
        amount:
          type: string
          description: Financial amount of the Discount applied.
        applicable:
          type: boolean
          description: Whether the Discount can be applied to the Checkout.
        discount_code:
          type: string
          description: The code for the Discount, e.g. 25_PERCENT_OFF.
        non_redeemable_reason:
          type: string
          description: Reason why the Discount could not be redeemed, if applicable.
        value:
          type: string
          description: The value of the Discount, used in combination with value_type to determine the amount.
        value_type:
          type: string
          enum:
            - fixed_amount
            - percentage
          description: The way the Discount amount is calculated.
    OrderAttribute:
      type: object
      description: Represents extra information added to an order.
      properties:
        name:
          type: string
        value:
          type: string
    ShippingLine:
      type: object
      properties:
        code:
          type: string
        price:
          type: string
        source:
          type: string
        title:
          type: string
        taxable:
          type: boolean
        tax_lines:
          type: array
          items:
            $ref: '#/components/schemas/TaxLine'
    ShippingLineReference:
      type: object
      properties:
        code:
          type: string
        price:
          type: string
        title:
          type: string
    CustomShippingRate:
      type: object
      description: Represents a shipping rate.
      properties:
        code:
          type: string
          description: The shipping rate code.
        price:
          type: string
          description: The shipping rate price.
        title:
          type: string
          description: The shipping rate title.
        handle:
          type: string
          description: Unique identifier for the shipping rate
    ShippingRateInput:
      type: object
      properties:
        handle:
          type: string
          description: Unique identifier for the shipping rate that should be applied.
    MergeAddresses:
      type: object
      description: Represents the details required to merge addresses.
      properties:
        delete_source_addresses:
          type: boolean
          description: Indicates whether source addresses should be deleted.
        next_charge_date:
          type: string
          format: date-time
          description: Specifies the next charge date of the associated subscriptions on the target address.
        target_address:
          $ref: '#/components/schemas/Reference'
        source_addresses:
          type: array
          items:
            $ref: '#/components/schemas/Reference'
          description: The list of addresses that the subscriptions should move from.
      required:
        - target_address
        - source_addresses
    Reference:
      type: object
      properties:
        id:
          type: integer
          format: int56
          description: The id of the address.
      required:
        - id
    Charge:
      type: object
      properties:
        id:
          type: integer
          format: int56
          description: The unique numeric identifier for the Charge.
        address_id:
          type: integer
          description: The ID of the shipping Address tied to the Charge.
        analytics_data:
          $ref: '#/components/schemas/AnalyticsData'
        billing_address:
          $ref: '#/components/schemas/InlineAddress'
        client_details:
          $ref: '#/components/schemas/ClientDetails'
        created_at:
          type: string
          format: date-time
          description: The date and time when the transaction was created.
        currency:
          type: string
          description: The code of the currency for this Charge, such as USD.
        customer:
          $ref: '#/components/schemas/InlineAddress'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/AppliedDiscount'
          description: An array of Discounts associated with the Charge.
        error:
          type: string
          description: 'Error reason as sentence text (typically returned direct from the payment processor). e.g. "error": "Customer needs to update credit card"'
        error_type:
          type: string
          description: Structured reason why the charge failed such as CUSTOMER_NEEDS_TO_UPDATE_CARD.
        charge_attempts:
          type: integer
          description: Shows how many times an attempt to charge was placed.
        external_variant_id_not_found:
          type: boolean
          description: Indicates if Recharge was able to find the external_variant_id from the Charge.
        external_order_id:
          $ref: '#/components/schemas/ExternalOrderId'
        external_transaction_id:
          $ref: '#/components/schemas/ExternalTransactionId'
        has_uncommited_changes:
          type: boolean
          description: Specifies whether the Charge is scheduled for a regeneration (if the Subscription related to the charge was updated in the last 5 seconds using commit=false).
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
          description: A list of line_item objects, each containing information about a distinct purchase item.
        note:
          type: string
          description: Notes associated with the Charge.
        order_attributes:
          type: array
          items:
            $ref: '#/components/schemas/OrderAttribute'
        orders_count:
          type: integer
          description: The number of Orders generated from this Charge (>1 for prepaid Subscriptions).
        payment_processor:
          type: string
          description: The payment processor used for this Charge.
        processed_at:
          type: string
          format: date-time
          description: The date and time when the transaction was processed.
        retry_date:
          type: string
          format: date
          description: The date when the next attempt will be placed.
        scheduled_at:
          type: string
          format: date
          description: The date time of when the Charge is/was scheduled to process.
        shipping_address:
          $ref: '#/components/schemas/InlineAddress'
        shipping_lines:
          type: array
          items:
            $ref: '#/components/schemas/ShippingLine'
        status:
          type: string
          enum:
            - success,
            - error,
            - queued,
            - skipped,
            - refunded,
            - partially_refunded,
            - pending_manual_payment,
            - pending
        subtotal_price:
          type: string
          description: The combined price of all line_items without taxes and shipping.
        tags:
          type: string
          description: A comma-separated list of tags on the Charge.
        tax_lines:
          type: array
          description: An array of tax lines that apply to the Charge.
          items:
            $ref: '#/components/schemas/TaxLine'
        taxable:
          type: boolean
          description: A boolean indicator of the taxability of the Charge.
        taxes_included:
          type: boolean
          description: Whether taxes are included in the order subtotal.
        total_discounts:
          type: string
          description: The sum of the Discounts applied to the Charge.
        total_line_items_price:
          type: string
          description: The total price of all line items of the Charge.
        total_price:
          type: string
          description: The sum of all the prices of all the items in the Charge, taxes and discounts included (must be positive).
        total_refunds:
          type: string
          description: The sum of all refunds that were applied to the Charge.
        total_tax:
          type: string
          description: The total tax due associated with the Charge.
        total_weight_grams:
          type: integer
          description: The total weight of the Charge’s line items in grams.
        type:
          type: string
          description: An indicator of the Charge’s type, either checkout or recurring.
          enum:
            - checkout
            - recurring
        updated_at:
          type: string
          format: date-time
    ChargeResponse:
      type: object
      required:
        - charge
      properties:
        charge:
          $ref: '#/components/schemas/Charge'
    LineItem:
      type: object
      properties:
        purchase_item_id:
          type: integer
          description: The Subscription or Onetime ID associated with the line_item.
        external_product_id:
          $ref: '#/components/schemas/ExternalProductId'
        external_variant_id:
          $ref: '#/components/schemas/ExternalVariantId'
        grams:
          type: integer
          description: The weight of the item in grams.
        handle:
          type: string
          description: A unique, human-friendly string for the Product.
        images:
          $ref: '#/components/schemas/Images'
        original_price:
          type: string
          description: The original price of the line_item without discounts or taxes.
        properties:
          type: array
          description: An array of name value pairs of additional line_item attributes.
          items:
            $ref: '#/components/schemas/OrderAttribute'
        purchase_item_type:
          type: string
          description: An indicator of the type of the purchase item.
          enum:
            - subscription
            - onetime
        quantity:
          type: integer
          description: The quantity of the line_item.
        sku:
          type: string
          description: The SKU (stock keeping unit) of the Product associated with the line_item.
        tax_due:
          type: string
          description: The total tax due associated with the line_item.
        tax_lines:
          type: array
          items:
            $ref: '#/components/schemas/TaxLine'
        taxable:
          type: boolean
          description: A boolean indicating if the line_item is taxable or non-taxable.
        taxable_amount:
          type: string
          description: The taxable revenue associated with the line_item.
        title:
          type: string
          description: The title of the Product of this line_item.
        total_price:
          type: string
          description: The total price of the line_item including tax.
        unit_price:
          type: string
          description: The unit price of the line_item.
        unit_price_includes_tax:
          type: boolean
          description: A boolean indicator if tax is included in the price of an item.
        variant_title:
          type: string
          description: The name of a variant of the Product of this line_item.
    CheckoutLineItem:
      type: object
      properties:
        id:
          type: integer
          format: int56
          description: Unique identifier of the line_item
        purchase_item_id:
          type: integer
          description: The Subscription or Onetime ID associated with the line_item.
        external_product_id:
          $ref: '#/components/schemas/ExternalProductId'
        external_variant_id:
          $ref: '#/components/schemas/ExternalVariantId'
        weight:
          type: integer
          description: The total weight of the line_item
        weight_unit:
          type: string
          enum:
            - lb
            - oz
            - kg
            - g
            - t
        handle:
          type: string
          description: A unique, human-friendly string for the Product.
        images:
          $ref: '#/components/schemas/Images'
        properties:
          type: array
          description: An array of name value pairs of additional line_item attributes.
          items:
            $ref: '#/components/schemas/OrderAttribute'
        purchase_item_type:
          type: string
          description: An indicator of the type of the purchase item.
          enum:
            - subscription
            - onetime
        quantity:
          type: integer
          description: The quantity of the line_item.
        requires_shipping:
          type: boolean
          description: Whether the item requires shipping
        recurring_unit_price:
          type: string
          description: The price of a single unit of the Product associated with the line_item that will be charged in recurring orders.
        sku:
          type: string
          description: The SKU (stock keeping unit) of the Product associated with the line_item.
        subscription_preferences:
          $ref: '#/components/schemas/SubscriptionPreferences'
        tax_lines:
          type: array
          items:
            $ref: '#/components/schemas/TaxLine'
        taxable:
          type: boolean
          description: A boolean indicating if the line_item is taxable or non-taxable.
        title:
          type: string
          description: The title of the Product of this line_item.
        total_price:
          type: string
          description: The total price of the line_item including tax.
        unit_price:
          type: string
          description: The unit price of the line_item.
        variant_title:
          type: string
          description: The name of a variant of the Product of this line_item.
    CheckoutLineItemInput:
      type: object
      properties:
        external_product_id:
          $ref: '#/components/schemas/ExternalProductId'
        external_variant_id:
          $ref: '#/components/schemas/ExternalVariantId'
        handle:
          type: string
          description: A unique, human-friendly string for the Product.
        images:
          $ref: '#/components/schemas/Images'
        properties:
          type: array
          description: An array of name value pairs of additional line_item attributes.
          items:
            $ref: '#/components/schemas/OrderAttribute'
        purchase_item_type:
          type: string
          description: An indicator of the type of the purchase item.
          enum:
            - subscription
            - onetime
        quantity:
          type: integer
          description: The quantity of the line_item.
        sku:
          type: string
          description: The SKU (stock keeping unit) of the Product associated with the line_item.
        subscription_preferences:
          $ref: '#/components/schemas/SubscriptionPreferences'
        tax_lines:
          type: array
          items:
            $ref: '#/components/schemas/TaxLine'
        title:
          type: string
          description: The title of the Product of this line_item.
        unit_price:
          type: string
          description: The unit price of the line_item.
        variant_title:
          type: string
          description: The name of a variant of the Product of this line_item.
        weight:
          type: integer
          description: The total weight in grams of the line_item
    SubscriptionPreferences:
      type: object
      properties:
        charge_interval_frequency:
          type: integer
          description: Frequency at which the subscriber will be charged
        cutoff_day_of_month:
          type: integer
          description: Day of the month the plan should be charged. Only valid for interval_unit:month
        cutoff_day_of_week:
          type: integer
          description: Day of the month the plan should be charged. Only valid for interval_unit:week
        expire_after_specific_number_of_charges:
          type: integer
          description: A maximum number of charges on which the subscription should appear before automatic cancellation
        order_day_of_month:
          type: integer
          description: Day of the month an order should be generated when the customer is subscribed.
        order_day_of_week:
          type: integer
          description: Day of the week an order should be generated when the customer is subscribed.
        order_interval_frequency:
          type: integer
          description: Frequency at which the subscriber will receive shipments when subscribed to this plan.
        interval_unit:
          type: string
          description: The unit applied to charge_interval_frequency and order_interval_frequency
          enum:
            - day
            - week
            - month
    TaxLine:
      type: object
      properties:
        price:
          type: string
          description: The total tax associated with the listed jurisdiction.
        rate:
          type: string
          description: The tax rate associated with the listed jurisdiction.
        title:
          type: string
          description: The title/name of the taxing jurisdiction.
    Images:
      type: object
      properties:
        large:
          type: string
          description: The url where a large image file is located.
        medium:
          type: string
          description: The url where a medium image file is located.
        small:
          type: string
          description: The url where a small image file is located.
        original:
          type: string
          description: The url where a original image file is located.
        sort_order:
          type: integer
          description: The sort order in which the x image from the array should appear when displayed.
    CustomerReference:
      type: object
      properties:
        id:
          type: integer
          format: int56
          description: The ID of the associated customer record.
        email:
          type: string
          description: The user email.
        external_customer_id:
          $ref: '#/components/schemas/InlineAddress'
        hash:
          type: string
          description: The hash of the Customer associated with the Charge.
    ExternalVariantId:
      type: object
      description: An object containing the associated variant ID as it appears in the external system.
      properties:
        ecommerce:
          type: string
          description: The variant id as it appears in the external e-commerce platform. The external_variant_id of the Product record in Recharge, linking a Plan to a Product.
    ExternalProductId:
      type: object
      description: An object containing the associated product ID as it appears in the external system.
      properties:
        ecommerce:
          type: string
          description: The product id as it appears in the external e-commerce platform. The external_product_id of the Product record in Recharge, linking a Plan to a Product.
    ExternalDiscountId:
      type: object
      description: An object containing external ids of the discount.
      properties:
        ecommerce:
          type: string
          description: The discount id as it appears in the external e-commerce platform
    ExternalTransactionId:
      type: object
      properties:
        payment_processor:
          type: integer
          description: The ID of the associated transaction in a payment processor system (like Stripe).
    ExternalOrderId:
      type: object
      description: An object containing the associated external order ID.
      properties:
        ecommerce:
          type: string
          description: The order ID as it appears in the external e-commerce platform.
    ExternalCustomerId:
      type: object
      description: The customer ID as it appears in the external e-commerce platform.
      properties:
        ecommerce:
          type: string
    ClientDetails:
      type: object
      properties:
        browser_ip:
          type: string
          description: The IP address of the buyer as detected
        user_agent:
          type: string
          description: The user agent detected during
    AnalyticsData:
      type: object
      properties:
        utm_params:
          type: array
          items:
            $ref: '#/components/schemas/UtmParam'
    UtmParam:
      type: object
      properties:
        utm_campaign:
          type: string
          description: The UTM campaign.
        utm_content:
          type: string
          description: The UTM content.
        utm_data_source:
          type: string
          description: The source of the campaign parameter.
        utm_source:
          type: string
          description: The UTM source.
        utm_medium:
          type: string
          description: The UTM medium.
        utm_term:
          type: string
          description: The UTM term.
        utm_timestamp:
          type: string
          description: The UTM timestamp
    SkipCharge:
      type: object
      description: Represents the details required to skip a future charge for an address.
      required:
        - date
        - subscription_ids
      properties:
        date:
          type: string
          format: date-time
          description: The date in the future of the Charge to be skipped.
        subscription_ids:
          type: array
          description: A list containing the Subscription IDs to be skipped.
          items:
            type: integer
    Checkout:
      type: object
      required:
        - token
        - created_at
        - updated_at
        - line_items
      properties:
        charge_id:
          type: integer
          description: ID for the Charge resulting from processing the Checkout.
        analytics_data:
          $ref: '#/components/schemas/AnalyticsData'
        applied_discounts:
          type: array
          items:
            $ref: '#/components/schemas/CheckoutDiscount'
        applied_shipping_rate:
          $ref: '#/components/schemas/AppliedShippingRate'
        applied_shipping_rates:
          type: array
          items:
            $ref: '#/components/schemas/AppliedShippingRate'
        billing_address:
          $ref: '#/components/schemas/InlineAddress'
        completed_at:
          type: string
          format: date-time
          description: Timestamp for when the Checkout was processed.
        created_at:
          type: string
          format: date-time
          description: Timestamp for when the Checkout was created
        currency:
          type: string
          description: Currency of the Checkout
        email:
          type: string
        external_checkout_id:
          type: string
          description: External checkout reference, if one exists.
        external_checkout_source:
          type: string
          description: External checkout platform, if one exists.
        external_customer_id:
          $ref: '#/components/schemas/ExternalCustomerId'
        external_transaction_id:
          $ref: '#/components/schemas/ExternalTransactionId'
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/CheckoutLineItem'
        note:
          type: string
          description: Custom note
        notification_preferences:
          $ref: '#/components/schemas/NotificationPreferences'
        order_attributes:
          type: array
          items:
            $ref: '#/components/schemas/OrderAttribute'
        payment_processor:
          type: string
        requires_shipping:
          type: boolean
          description: Whether or not the Checkout contains items that require shipping.
        shipping_address:
          $ref: '#/components/schemas/InlineAddress'
        shipping_lines:
          type: array
          items:
            $ref: '#/components/schemas/ShippingLine'
        subtotal_price:
          type: string
          description: Value of the Checkout minus shipping and tax.
        tax_lines:
          type: array
          items:
            $ref: '#/components/schemas/TaxLine'
        taxes_included:
          type: boolean
          description: Whether the tax is included in the price of the items.
        token:
          type: string
          description: Unique token for the Checkout.
        total_price:
          type: string
          description: Full price of the Checkout including shipping and tax.
        total_tax:
          type: string
          description: Tax charged on the Checkout.
        updated_at:
          type: string
          format: date-time
          description: Timestamp for the latest Checkout update.
    CheckoutResponse:
      type: object
      required:
        - checkout
      properties:
        checkout:
          $ref: '#/components/schemas/Checkout'
    CheckoutCharge:
      type: object
      properties:
        charge_id:
          type: string
          description: Unique identifier for the charge resulting from the processing of the checkout
        authorization_token:
          type: string
          description: Unique identifier for the authorization of the charge
        free:
          type: boolean
          description: Boolean to identify if the checkout was free
        payment_processor:
          type: string
          description: Payment processor used for the checkout
        payment_type:
          type: string
          description: Payment type used for the checkout
        processor_customer_token:
          type: string
          description: Unique identifier for the customer created in the payment service provider platform (aka PSP)
        processor_payment_method_token:
          type: string
          description: Payment method token used for the transaction
        payment_processor_transaction_id:
          type: string
          description: Unique transaction id used for the transaction
        status:
          type: string
          description: Status of the checkout
    CheckoutChargeResponse:
      type: object
      required:
        - checkout_charge
      properties:
        checkout_charge:
          $ref: '#/components/schemas/CheckoutCharge'
    CreateCheckoutInput:
      type: object
      required:
        - line_items
      properties:
        analytics_data:
          $ref: '#/components/schemas/AnalyticsData'
        applied_discounts:
          type: array
          items:
            $ref: '#/components/schemas/DiscountInput'
        applied_shipping_rate:
          $ref: '#/components/schemas/ShippingRateInput'
        custom_shipping_rate_options:
          type: array
          items:
            $ref: '#/components/schemas/CustomShippingRate'
        billing_address:
          $ref: '#/components/schemas/InlineAddress'
        currency:
          type: string
          description: Currency of the Checkout
        email:
          type: string
        external_checkout_id:
          type: string
          description: External checkout reference, if one exists.
        external_checkout_source:
          type: string
          description: External checkout platform, if one exists.
        external_transaction_id:
          $ref: '#/components/schemas/ExternalTransactionId'
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/CheckoutLineItemInput'
        note:
          type: string
          description: Custom note
        order_attributes:
          type: array
          items:
            $ref: '#/components/schemas/OrderAttribute'
        shipping_address:
          $ref: '#/components/schemas/InlineAddress'
    UpdateCheckoutInput:
      type: object
      properties:
        analytics_data:
          $ref: '#/components/schemas/AnalyticsData'
        applied_shipping_rate:
          $ref: '#/components/schemas/ShippingRateInput'
        billing_address:
          $ref: '#/components/schemas/InlineAddress'
        buyer_accepts_marketing:
          type: boolean
          description: Does the buyer accept marketing, newsletters etc
        discount_code:
          type: string
          description: Discount code to be used on the checkout, e.g. “DISCOUNT20”.
        currency:
          type: string
          description: Currency of the Checkout
        email:
          type: string
          description: Email address for the customer.
        external_checkout_id:
          type: string
          description: External checkout reference, if one exists.
        external_checkout_source:
          type: string
          description: External checkout platform, if one exists.
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/CheckoutLineItemInput'
        note:
          type: string
          description: Custom note
        order_attributes:
          type: array
          items:
            $ref: '#/components/schemas/OrderAttribute'
        shipping_address:
          $ref: '#/components/schemas/InlineAddress'
    NotificationPreferences:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/CheckoutLineItem'
        sms:
          $ref: '#/components/schemas/CheckoutLineItem'
    NotificationPreferencesChannel:
      type: object
      properties:
        promotional:
          $ref: '#/components/schemas/NotificationPreferencesChannelDetails'
        replenishment:
          $ref: '#/components/schemas/NotificationPreferencesChannelDetails'
        transactional:
          $ref: '#/components/schemas/NotificationPreferencesChannelDetails'
    NotificationPreferencesChannelDetails:
      type: object
      properties:
        last_opt_in_at:
          type: string
          format: date-time
          description: The timestamp marking the last time the user opted in for the notification channel and type. null if the person never opted in.
        last_opt_in_source:
          type: string
          description: Details of the source interface or process of the last opt in. null if the person never opted in.
          enum:
            - sms_reminder
            - store_opt_in_widget
            - replenishment_checkout
            - script
            - rechargesms_app
            - customer_sms
            - subscription_checkout_extension
            - recharge_checkout
            - sci_cart
        last_opt_out_at:
          type: string
          format: date-time
          description: The timestamp marking the last time the user opted out for the notification channel and type.
        last_opt_out_source:
          type: string
          description: Details of the source interface or process of the last opt in. null if the person never opted in.
          enum:
            - sms_reminder
            - store_opt_in_widget
            - replenishment_checkout
            - script
            - rechargesms_app
            - customer_sms
            - subscription_checkout_extension
            - recharge_checkout
            - sci_cart
        status:
          type: string
          description: Status of the notification preferences.
          enum:
            - accepted
            - declined
    AppliedShippingRate:
      type: object
      properties:
        checkout:
          $ref: '#/components/schemas/CheckoutPrice'
        code:
          type: string
          description: Code corresponding to the category of shipping
        delivery_rate:
          type: string
        description:
          type: string
        handle:
          type: string
          description: Unique string identifying the shipping/
        name:
          type: string
        phone_required:
          type: string
          description: Whether a phone is required for this shipping
        price:
          type: string
          description: Price of shipping
        title:
          type: string
    CheckoutShippingRatesResponse:
      type: object
      required:
        - shipping_rates
      properties:
        previous_cursor:
          type: string
        next_cursor:
          type: string
        shipping_rates:
          type: array
          items:
            $ref: '#/components/schemas/AppliedShippingRate'
    CheckoutPrice:
      type: object
      properties:
        subtotal_price:
          type: string
          description: Price excluding shipping and tax, including discounts.
        total_price:
          type: string
          description: Total price including tax and shipping cost for that particular shipping rate.
        total_tax:
          type: string
          description: Total tax value for the checkout.
    Collection:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - description
        - title
      properties:
        id:
          type: integer
          format: int56
          description: Unique numeric identifier for the Collection
        created_at:
          type: string
          format: date-time
          description: The date and time when the Collection was created.
        description:
          type: string
          description: The Collection description. Used to store a detailed explanation of the Collection content and its purpose.
        sort_order:
          type: string
          enum:
            - id-asc
            - id-desc
            - title-asc
            - title-desc
            - created_at-asc
            - created_at-desc
        title:
          type: string
          description: The title of the Collection. A short descriptive definition of the Collection.
        type:
          type: string
          description: The type of the Collection. manual stands for Collections which were manually created ie. when the products where explicitly selected to be part of the Collection.
          enum:
            - manual
        updated_at:
          type: string
          format: date-time
    CollectionResponse:
      type: object
      required:
        - collection
      properties:
        collection:
          $ref: '#/components/schemas/Collection'
    CreateCollectionInput:
      type: object
      required:
        - description
        - title
      properties:
        description:
          type: string
          description: The Collection description. Used to store a detailed explanation of the Collection content and its purpose.
        sort_order:
          type: string
          enum:
            - id-asc
            - id-desc
            - title-asc
            - title-desc
            - created_at-asc
            - created_at-desc
        title:
          type: string
          description: The title of the Collection. A short descriptive definition of the Collection.
    UpdateCollectionInput:
      type: object
      properties:
        description:
          type: string
          description: The Collection description. Used to store a detailed explanation of the Collection content and its purpose.
        sort_order:
          type: string
          enum:
            - id-asc
            - id-desc
            - title-asc
            - title-desc
            - created_at-asc
            - created_at-desc
        title:
          type: string
          description: The title of the Collection. A short descriptive definition of the Collection.
    CollectionProduct:
      type: object
      properties:
        collection_id:
          type: integer
          description: Unique numeric identifier for a Collection
        created_at:
          type: string
          format: date-time
          description: The date and time when the Product was added to the collection.
        external_product_id:
          type: string
          description: The external_product_id.ecommerce of the Product.
        updated_at:
          type: string
          format: date-time
          description: The date and time when the Product entry for this Collection was last updated.
    CollectionProductInput:
      type: object
      required:
        - external_product_id
      properties:
        external_product_id:
          type: string
          description: The external_product_id.ecommerce of the Product
    CollectionProductsInput:
      type: object
      required:
        - collection_products
      properties:
        collection_products:
          type: array
          description: 'An array of products and their collection definition to be added to the Collection. Important: there is a set limit of 250 products that can be added per request.'
          items:
            $ref: '#/components/schemas/CollectionProductInput'
    CollectionProductResponse:
      type: object
      required:
        - collection_products
      properties:
        previous_cursor:
          type: string
        next_cursor:
          type: string
        collection_products:
          type: array
          items:
            $ref: '#/components/schemas/CollectionProduct'
    Customer:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - email
        - first_name
        - last_name
      properties:
        id:
          type: integer
          format: int56
          description: Unique numeric identifier for the Customer
        analytics_data:
          $ref: '#/components/schemas/AnalyticsData'
        created_at:
          type: string
          format: date-time
          description: The date and time when the customer was created
        email:
          type: string
          description: The email address of the customer
        external_customer_id:
          $ref: '#/components/schemas/ExternalProductId'
        first_charge_processed_at:
          type: string
          format: date-time
          description: Date when first charge was processed for the customer
        first_name:
          type: string
          description: The customer’s first name
        has_payment_method_in_dunning:
          type: boolean
          description: A boolean that indicates if the customer has a payment method that is in dunning (failed charge)
        has_valid_payment_method:
          type: boolean
          description: Is the payment method valid or not
        hash:
          type: string
          description: The unique string identifier used in a customers portal link
        last_name:
          type: string
          description: The customer’s last name
        phone:
          type: string
          description: The customer’s phone number
        subscriptions_active_count:
          type: integer
          description: The number of active subscriptions on addresses associated with the customer
        subscriptions_total_count:
          type: integer
          description: The total number of subscriptions created on addresses associated with the customer
        tax_exempt:
          type: boolean
          description: Whether the customer tax exempt or not
        updated_at:
          type: string
          format: date-time
          description: The date and time when the customer was last updated
    CustomerResponse:
      type: object
      required:
        - customer
      properties:
        customer:
          $ref: '#/components/schemas/Customer'
    CreateCustomerInput:
      type: object
      required:
        - email
        - first_name
        - last_name
      properties:
        email:
          type: string
          description: The email address of the customer
        external_customer_id:
          $ref: '#/components/schemas/ExternalProductId'
        first_name:
          type: string
          description: The customer’s first name
        last_name:
          type: string
          description: The customer’s last name
        phone:
          type: string
          description: The customer’s phone number
        tax_exempt:
          type: boolean
          description: Whether the customer tax exempt or not
    UpdateCustomerInput:
      type: object
      properties:
        email:
          type: string
          description: The email address of the customer
        external_customer_id:
          $ref: '#/components/schemas/ExternalProductId'
        first_name:
          type: string
          description: The customer’s first name
        last_name:
          type: string
          description: The customer’s last name
        phone:
          type: string
          description: The customer’s phone number
        tax_exempt:
          type: boolean
          description: Whether the customer tax exempt or not
    DeliverySchedule:
      type: object
      properties:
        customer:
          $ref: '#/components/schemas/DeliveryScheduleCustomer'
        deliveries:
          type: array
          items:
            $ref: '#/components/schemas/Delivery'
    DeliveryScheduleResponse:
      type: object
      required:
        - deliverySchedule
      properties:
        deliverySchedule:
          $ref: '#/components/schemas/DeliverySchedule'
    Delivery:
      type: object
      properties:
        date:
          type: string
          format: date
          description: Date for the scheduled deliveries in Eastern Standard Time
        orders:
          type: 'array'
          description: The order details for a given delivery.
          items:
            $ref: '#/components/schemas/DeliveryOrder'
    DeliveryOrder:
      type: object
      properties:
        id:
          type: integer
          format: int56
          description: Unique numeric identifier for the order. Defaults to null if the Charge linked to this order has not been processed yet
        address_id:
          type: integer
          description: Unique numeric identifier for the customer’s address for which the delivery is due.
        charge_id:
          type: integer
          description: Unique numeric identifier for the Charge linked to the order. May be null for projected orders with no charge yet created.
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/DeliveryOrderLineItem'
        order_subtotal:
          type: string
          description: The order subtotal price (sum of all individual order subtotals). May be “0.00” for subsequent prepaid orders not attributed to a charge.
        payment_method:
          $ref: '#/components/schemas/InlinePaymentMethod'
        shipping_address:
          $ref: '#/components/schemas/InlineAddress'
    InlinePaymentMethod:
      type: object
      properties:
        id:
          type: integer
          format: int56
          description: The unique payment method id for a customer
        billing_address:
          $ref: '#/components/schemas/InlineAddress'
        payment_details:
          $ref: '#/components/schemas/PaymentDetails'
    PaymentDetails:
      type: object
      properties:
        brand:
          type: string
          description: Payment_method brand or company powering it. valid for CREDIT_CARD only.
        exp_month:
          type: string
          description: Payment_method expiry month. valid for CREDIT_CARD only.
        exp_year:
          type: string
          description: Payment_method expiry year. valid for CREDIT_CARD only.
        last4:
          type: string
          description: last 4-digits of the identifier. valid for CREDIT_CARD only.
        paypal_email:
          type: string
          description: email linked to. valid for PAYPAL only.
        paypal_payer_id:
          type: string
          description: paypal user identifier. valid for PAYPAL only.
        wallet_type:
          type: string
          description: If a digital wallet.
        funding_type:
          type: string
          description: Type of funding for the Payment Method.
    DeliveryOrderLineItem:
      type: object
      properties:
        subscription_id:
          type: integer
          description: Unique numeric identifier for the subscription linked to this line_item in the order
        external_product_id:
          $ref: '#/components/schemas/ExternalProductId'
        external_variant_id:
          $ref: '#/components/schemas/ExternalVariantId'
        images:
          $ref: '#/components/schemas/Images'
        is_prepaid:
          type: boolean
          description: Value is set to true if it is a prepaid item
        is_skippable:
          type: boolean
          description: Value is set to true if the order is skipped
        original_price:
          type: string
          description: The original price of the line_item without discounts or taxes.
        plan_type:
          type: string
          enum:
            - subscription
            - onetime
        product_title:
          type: string
          description: The name of the product in a store’s catalog
        properties:
          type: array
          description: A list of line item objects, each one containing information about the subscription. Custom key-value pairs can be installed here, they will appear on the connected queued charge and after it is processed on the order itself.
          items:
            $ref: '#/components/schemas/OrderAttribute'
        quantity:
          type: integer
          description: The number of items in the subscription.
        subtotal_price:
          type: string
          description: The subtotal price (sum of all line items * their quantity) of the order less discounts.
        unit_price:
          type: string
          description: The unit price of the variant
        variant_title:
          type: string
          description: The name of the variant in a store’s catalog
    DeliveryScheduleCustomer:
      type: object
      description: Customer details relevant for deliveries.
      properties:
        id:
          type: integer
          format: int56
          description: Unique numeric identifier of the customer
        email:
          type: string
          description: Email address of the customer
        first_name:
          type: string
          description: The customer’s first name
        last_name:
          type: string
          description: The customer’s last name
    CustomerCreditSummary:
      type: object
      properties:
        customer_id:
          type: integer
          description: Unique numeric identifier for the Customer.
        total_available_balance:
          type: string
          description: The total balance of the customer’s credit accounts.
        currency_code:
          type: string
          description: The currency of the customer’s credit balance.
    CustomerCreditSummaryResponse:
      type: object
      required:
        - credit_summary
      properties:
        credit_summary:
          $ref: '#/components/schemas/CustomerCreditSummary'
    DiscountType:
      type: string
      description: Type of discount mechanic
      enum:
        - fixed_amount
        - percentage
        - shipping
    DiscountStatus:
      type: string
      enum:
        - enabled
        - disabled
        - fully_disabled
      description: |
        The status of the discount. Value can be:
        * `enabled discount` is active to be applied
        * `disabled discount` can’t be applied on new purchases. Discount will remain on existing charges to which it has already been applied.
        * `fully_disabled` discount can no longer be applied. In addition, Discount is removed from every queued charge.

        `disabled` and `fully_disabled` can both be reverted to `enabled`. However once a Discount has been updated to `fully_disabled` it will be removed from all Charges it had been applied to. This removal from Charges is irreversible.
    Discount:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - code
        - value
        - value_type
      properties:
        id:
          type: integer
          format: int56
          description: Unique numeric identifier for the discount
        applies_to:
          $ref: '#/components/schemas/DiscountAppliesTo'
        channel_settings:
          $ref: '#/components/schemas/DiscountChannelSettings'
        code:
          type: string
          description: The code used to apply the discount
        created_at:
          type: string
          format: date-time
          description: The date and time when the discount was created
        starts_at:
          type: string
          format: date-time
          description: The date when the discount becomes active. When not specified on creation starts_at will default to null which translates into no restrictions.
        ends_at:
          type: string
          format: date-time
          description: The expiration timestamp of the discount. Past this time the Discount can no longer be redeemed. After ends_at the status of the Discount will go from active to disabled. Recurring discounts applied prior to their ends_at time will still apply.
        external_discount_id:
          $ref: '#/components/schemas/ExternalDiscountId'
        first_time_customer_restriction:
          type: boolean
          description: Discount can be used on checkout for customer that still don’t exist in Recharge database
        prerequisite_subtotal_min:
          type: string
          description: The minimum cart subtotal needed for the discount to be applicable. duration has to be single_use and the discount must apply to the entire order.
        status:
          $ref: '#/components/schemas/DiscountStatus'
        usage_limits:
          $ref: '#/components/schemas/DiscountUsageLimits'
        updated_at:
          type: string
          format: date-time
          description: The date and time when the discount was last updated
        value:
          type: string
          description: The discounted value to be applied
        value_type:
          $ref: '#/components/schemas/DiscountType'
    DiscountResponse:
      type: object
      required:
        - discount
      properties:
        discount:
          $ref: '#/components/schemas/Discount'
    CreateDiscountInput:
      type: object
      required:
        - code
        - value
        - value_type
      properties:
        applies_to:
          $ref: '#/components/schemas/DiscountAppliesTo'
        channel_settings:
          $ref: '#/components/schemas/DiscountChannelSettings'
        code:
          type: string
          description: The code used to apply the discount
        starts_at:
          type: string
          format: date-time
          description: The date when the discount becomes active. When not specified on creation starts_at will default to null which translates into no restrictions.
        ends_at:
          type: string
          format: date-time
          description: The expiration timestamp of the discount. Past this time the Discount can no longer be redeemed. After ends_at the status of the Discount will go from active to disabled. Recurring discounts applied prior to their ends_at time will still apply.
        prerequisite_subtotal_min:
          type: string
          description: The minimum cart subtotal needed for the discount to be applicable. duration has to be single_use and the discount must apply to the entire order.
        status:
          $ref: '#/components/schemas/DiscountStatus'
        usage_limits:
          $ref: '#/components/schemas/DiscountUsageLimits'
        value:
          type: string
          description: The discounted value to be applied
        value_type:
          $ref: '#/components/schemas/DiscountType'
    UpdateDiscountInput:
      type: object
      properties:
        applies_to:
          $ref: '#/components/schemas/DiscountAppliesTo'
        channel_settings:
          $ref: '#/components/schemas/DiscountChannelSettings'
        code:
          type: string
          description: The code used to apply the discount
        starts_at:
          type: string
          format: date-time
          description: The date when the discount becomes active. When not specified on creation starts_at will default to null which translates into no restrictions.
        ends_at:
          type: string
          format: date-time
          description: The expiration timestamp of the discount. Past this time the Discount can no longer be redeemed. After ends_at the status of the Discount will go from active to disabled. Recurring discounts applied prior to their ends_at time will still apply.
        prerequisite_subtotal_min:
          type: string
          description: The minimum cart subtotal needed for the discount to be applicable. duration has to be single_use and the discount must apply to the entire order.
        status:
          $ref: '#/components/schemas/DiscountStatus'
        usage_limits:
          $ref: '#/components/schemas/DiscountUsageLimits'
        value:
          type: string
          description: The discounted value to be applied
        value_type:
          $ref: '#/components/schemas/DiscountType'
    DiscountUsageLimits:
      type: object
      properties:
        one_application_per_customer:
          type: boolean
          description: The discount can only be used once for a given customer checkout or manually applied once on the customer portal (irrespective of which address). Once applied, it will continue being re-applied to each new charge on the address.
        first_time_customer_restriction:
          type: boolean
          description: Discount can be used on checkout for customer that still don’t exist in Recharge database.
        max_subsequent_redemptions:
          type: integer
          description: The number of Charges the Discount will apply to besides the initial redemption for a given Customer. For example, if you want a discount to apply for 5 consecutive charges max_subsequent_redemptions should be 4.
        redemptions:
          type: integer
          description: Sets the limit on the number of times a discount can be used by all customers.
    DiscountChannelSettings:
      type: object
      properties:
        api:
          $ref: '#/components/schemas/DiscountChannelSettingsDetails'
        customer_portal:
          $ref: '#/components/schemas/DiscountChannelSettingsDetails'
        merchant_portal:
          $ref: '#/components/schemas/DiscountChannelSettingsDetails'
        checkout_page:
          $ref: '#/components/schemas/DiscountChannelSettingsDetails'
    DiscountChannelSettingsDetails:
      type: object
      properties:
        can_apply:
          type: boolean
          default: true
          description: A boolean to indicate if the discount may be applied using the associated channel (defaults to true for all channels).
    DiscountAppliesTo:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
          description: A list of ids of the type indicated in applies_to.resource for which the discount can be applied. Currently only supports a list with one value.
        purchase_item_type:
          type: string
          enum:
            - ALL,
            - ONETIME
            - SUBSCRIPTION
          description: An indicator of whether the discount applies to onetimes, subscriptions, or all purchase item types.
        resource:
          type: string
          enum:
            - product
              shopify_collection_id
          description: An indicator of the type of resource to which applies_to_id refers.
    MetafieldOwnerResource:
      type: string
      enum:
        - store
        - customer
        - subscription
        - order
        - charge
      description: Objects which support Metafields
    Metafield:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - key
        - namespace
        - owner_id
        - owner_resource
        - value
        - value_type
      properties:
        id:
          type: integer
          format: int56
          description: Unique numeric identifier for the metafield.
        created_at:
          type: string
          format: date-time
          description: The date and time when the metafield was created.
        description:
          type: string
          description: Description of the metafield.
        key:
          type: string
          description: The name of the metafield.
        namespace:
          type: string
          description: A category or container that differentiates your metadata from other metafields.
        owner_id:
          type: string
          description: Unique numeric identifier of the owner_resource.
        owner_resource:
          $ref: '#/components/schemas/MetafieldOwnerResource'
        updated_at:
          type: string
          format: date-time
          description: The date and time when the metafield was last updated
        value:
          type: string
          description: The content of the metafield
        value_type:
          type: string
          enum:
            - string
            - integer
            - json_string
    MetafieldResponse:
      type: object
      required:
        - metafield
      properties:
        metafield:
          $ref: '#/components/schemas/Metafield'
    CreateMetafieldInput:
      type: object
      required:
        - key
        - namespace
        - owner_id
        - owner_resource
        - value
        - value_type
      properties:
        description:
          type: string
          description: Description of the metafield.
        key:
          type: string
          description: The name of the metafield.
        namespace:
          type: string
          description: A category or container that differentiates your metadata from other metafields.
        owner_id:
          type: string
          description: Unique numeric identifier of the owner_resource.
        owner_resource:
          $ref: '#/components/schemas/MetafieldOwnerResource'
        updated_at:
          type: string
          format: date-time
          description: The date and time when the metafield was last updated
        value:
          type: string
          description: The content of the metafield
        value_type:
          type: string
          enum:
            - string
            - integer
            - json_string
    UpdateMetafieldInput:
      type: object
      properties:
        description:
          type: string
          description: Description of the metafield.
        owner_id:
          type: string
          description: Unique numeric identifier of the owner_resource.
        owner_resource:
          $ref: '#/components/schemas/MetafieldOwnerResource'
        value:
          type: string
          description: The content of the metafield
        value_type:
          type: string
          enum:
            - string
            - integer
            - json_string
    Onetime:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - address_id
        - external_variant_id
        - next_charge_scheduled_at
        - price
        - product_title
        - quantity
      properties:
        id:
          type: integer
          format: int56
          description: Unique numeric identifier for the Onetime purchase
        address_id:
          type: integer
          description: Unique numeric identifier for the address the Onetime Purchase is associated with (cannot be used with next_charge_scheduled_at)
        created_at:
          type: string
          format: date-time
          description: The time the Onetime item was first created.
        customer_id:
          type: integer
          description: Unique numeric identifier for the customer the Onetime purchase is tied to.
        external_product_id:
          $ref: '#/components/schemas/ExternalProductId'
        external_variant_id:
          $ref: '#/components/schemas/ExternalVariantId'
        is_cancelled:
          type: boolean
          description: Flag indicating if the the onetime is cancelled.
        next_charge_scheduled_at:
          type: string
          format: date-time
          description: Date of the Onetime purchase execution. Cannot be used with add_to_next_charge
        price:
          type: string
          description: The price of the item before discounts, taxes, or shipping have been applied.
        product_title:
          type: string
          description: The name of the product in a shop’s catalog.
        properties:
          type: array
          description: An array containing key value pairs for any supplementary data.
          items:
            $ref: '#/components/schemas/OrderAttribute'
        quantity:
          type: integer
          description: The number of items in the Onetime purchase.
        sku:
          type: string
          description: A unique identifier of the item in the fulfillment.
        sku_override:
          type: boolean
          description: |
            Flag that is automatically updated to true when SKU is passed on POST or PUT.
            
            When sku_override is true, the sku on the Onetime will be used to generate Charges and Orders.
            When sku_override is false, Recharge will dynamically fetch the sku from the corresponding external_platform_variant.
        updated_at:
          type: string
          description: The time the Onetime purchase was last updated.
        variant_title:
          type: string
          description: The name of the variant in a shop’s catalog.
    OnetimeResponse:
      type: object
      required:
        - onetime
      properties:
        onetime:
          $ref: '#/components/schemas/Onetime'
    CreateOnetimeInput:
      type: object
      required:
        - address_id
        - external_variant_id
        - next_charge_scheduled_at
        - price
        - product_title
        - quantity
      properties:
        address_id:
          type: integer
          description: Unique numeric identifier for the address the Onetime Purchase is associated with (cannot be used with next_charge_scheduled_at)
        add_to_next_charge:
          type: boolean
          description: Instructs to add the Onetime to the next charge scheduled under this Address.
        external_product_id:
          $ref: '#/components/schemas/ExternalProductId'
        external_variant_id:
          $ref: '#/components/schemas/ExternalVariantId'
        next_charge_scheduled_at:
          type: string
          format: date-time
          description: Date of the Onetime purchase execution. Cannot be used with add_to_next_charge
        price:
          type: string
          description: The price of the item before discounts, taxes, or shipping have been applied.
        product_title:
          type: string
          description: The name of the product in a shop’s catalog.
        properties:
          type: array
          description: An array containing key value pairs for any supplementary data.
          items:
            $ref: '#/components/schemas/OrderAttribute'
        quantity:
          type: integer
          description: The number of items in the Onetime purchase.
        sku:
          type: string
          description: A unique identifier of the item in the fulfillment.
    UpdateOnetimeInput:
      type: object
      properties:
        address_id:
          type: integer
          description: Unique numeric identifier for the address the Onetime Purchase is associated with (cannot be used with next_charge_scheduled_at)
        external_product_id:
          $ref: '#/components/schemas/ExternalProductId'
        external_variant_id:
          $ref: '#/components/schemas/ExternalVariantId'
        next_charge_scheduled_at:
          type: string
          format: date-time
          description: Date of the Onetime purchase execution. Cannot be used with add_to_next_charge
        price:
          type: string
          description: The price of the item before discounts, taxes, or shipping have been applied.
        product_title:
          type: string
          description: The name of the product in a shop’s catalog.
        properties:
          type: array
          description: An array containing key value pairs for any supplementary data.
          items:
            $ref: '#/components/schemas/OrderAttribute'
        quantity:
          type: integer
          description: The number of items in the Onetime purchase.
        sku:
          type: string
          description: A unique identifier of the item in the fulfillment.
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int56
          description: The unique numeric identifier for the order
        address_id:
          type: integer
          description: The id of the associated Address within Recharge
        billing_address:
          $ref: '#/components/schemas/InlineAddress'
        charge:
          $ref: '#/components/schemas/OrderCharge'
        client_details:
          $ref: '#/components/schemas/ClientDetails'
        created_at:
          type: string
          format: date-time
          description: The date when the order was created
        currency:
          type: string
          description: The currency of the payment used to create the order
        customer:
          $ref: '#/components/schemas/CustomerReference'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/OrderDiscount'
        external_cart_token:
          type: string
          description: The cart token as it appears in an external system
        external_order_id:
          $ref: '#/components/schemas/ExternalOrderId'
        external_order_number:
          $ref: '#/components/schemas/ExternalOrderId'
        is_prepaid:
          type: boolean
          description: A boolean representing if this Order is generated from a prepaid purchase
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        note:
          type: string
          description: Notes associated with the Order
        order_attributes:
          type: array
          items:
            $ref: '#/components/schemas/OrderAttribute'
        processed_at:
          type: string
          format: date-time
          description: The date time that the associated charge was processed at
        scheduled_at:
          type: string
          format: date-time
          description: The date time of when the associated charge is/was scheduled to process
        shipping_address:
          $ref: '#/components/schemas/InlineAddress'
        shipping_lines:
          type: array
          items:
            $ref: '#/components/schemas/ShippingLine'
        status:
          $ref: '#/components/schemas/OrderStatus'
        subtotal_price:
          type: string
          description: The subtotal price (sum of all line items * their quantity) of the order less discounts
        tags:
          type: string
          description: A comma separated list of tags
        tax_lines:
          type: array
          items:
            $ref: '#/components/schemas/TaxLine'
        taxable:
          type: boolean
        total_discounts:
          type: string
          description: The total discounted dollar value of the Order
        total_duties:
          type: string
          description: The total cost of duties for the Order
        total_line_items_price:
          type: integer
          description: The total price of all line items of the Order
        total_price:
          type: string
          description: The total amount due of the Order
        total_refunds:
          type: string
          description: The total dollar amount of refunds associated with the Order
        total_tax:
          type: string
          description: The total tax due associated with the Order
        total_weight_grams:
          type: integer
          description: The total weight of the order in grams
        type:
          $ref: '#/components/schemas/OrderType'
        updated_at:
          type: string
          format: date-time
    OrderResponse:
      type: object
      required:
        - order
      properties:
        order:
          $ref: '#/components/schemas/Order'
    UpdateOrderInput:
      type: object
      properties:
        billing_address:
          $ref: '#/components/schemas/InlineAddress'
        customer:
          $ref: '#/components/schemas/CustomerReference'
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        external_order_id:
          $ref: '#/components/schemas/ExternalOrderId'
        scheduled_at:
          type: string
          format: date-time
          description: The date when the order will be shipped
        shipping_address:
          $ref: '#/components/schemas/InlineAddress'
        status:
          $ref: '#/components/schemas/OrderStatus'
    OrderType:
      type: string
      enum:
        - checkout
        - recurring
    OrderStatus:
      type: string
      enum:
        - success
        - error
        - queued
        - cancelled
    OrderShippingLine:
      type: object
      description: Represents a shipping rate.
      properties:
        code:
          type: string
          description: The shipping rate code.
        price:
          type: string
          description: The shipping rate price.
        title:
          type: string
          description: The shipping rate title.
    OrderCharge:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int56
          description: The id of the charge associated with this order.
        external_transaction_id:
          $ref: '#/components/schemas/ExternalTransactionId'
    OrderDiscount:
      type: object
      properties:
        id:
          type: integer
          format: int56
        code:
          type: string
        value:
          type: number
        value_type:
          type: string
          enum:
            - percentage
            - fixed_amount
    PaymentType:
      type: string
      enum:
        - CREDIT_CARD
        - PAYPAL
        - APPLE_PAY
        - GOOGLE_PAY
        - SEPA_DEBIT
    ProcessorName:
      type: string
      enum:
        - stripe,
        - braintree
        - authorize
        - shopify_payments
        - mollie
    PaymentMethod:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - customer_id
        - payment_type
        - processor_customer_token
        - processor_name
      properties:
        id:
          type: integer
          format: int56
          description: The unique payment method id for a customer.
        customer_id:
          type: integer
          description: The Recharge customer_id.
        created_at:
          type: string
          format: date-time
        default:
          type: boolean
          description: >
            If this is the default Payment_method for the Customer. 
            Customer must have 1 and only 1 default payment Payment_method.
        payment_details:
          $ref: '#/components/schemas/PaymentDetails'
        payment_type:
          $ref: '#/components/schemas/PaymentType'
        processor_customer_token:
          type: string
          description: The customer token at the processor
        processor_name:
          $ref: '#/components/schemas/ProcessorName'
        processor_payment_method_token:
          type: string
          description: The payment token at the processor
        status:
          type: string
          enum:
            - unvalidated
            - valid
            - invalid
            - empty
        status_reason:
          type: string
          description: |
            The status reason for the payment method.

            Often used when invalid to provide background details in invalidity.
        updated_at:
          type: string
          format: date-time
        billing_address:
          $ref: '#/components/schemas/InlineAddress'
    PaymentMethodResponse:
      type: object
      required:
        - payment_method
      properties:
        payment_method:
          $ref: '#/components/schemas/PaymentMethod'
    CreatePaymentMethodInput:
      type: object
      required:
        - customer_id
        - payment_type
        - processor_customer_token
        - processor_name
      properties:
        customer_id:
          type: integer
          description: The Recharge customer_id.
        default:
          type: boolean
          description: >
            If this is the default Payment_method for the Customer. 
            Customer must have 1 and only 1 default payment Payment_method.
        payment_type:
          $ref: '#/components/schemas/PaymentType'
        processor_customer_token:
          type: string
          description: The customer token at the processor
        processor_name:
          $ref: '#/components/schemas/ProcessorName'
        processor_payment_method_token:
          type: string
          description: The payment token at the processor
        billing_address:
          $ref: '#/components/schemas/InlineAddress'
    UpdatePaymentMethodInput:
      type: object
      properties:
        default:
          type: boolean
          description: >
            If this is the default Payment_method for the Customer. 
            Customer must have 1 and only 1 default payment Payment_method.
        processor_name:
          $ref: '#/components/schemas/ProcessorName'
        billing_address:
          $ref: '#/components/schemas/InlineAddress'
    PlanType:
      type: string
      enum:
        - subscription
        - prepaid
        - onetime
      description: The type of the plan. Products with a prepaid plan cannot have plans of other types.
    Plan:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - external_product_id
        - subscription_preferences
        - title
        - type
      properties:
        id:
          type: integer
          format: int56
          description: Unique numeric identifier for the Plan.
        channel_settings:
          $ref: '#/components/schemas/DiscountChannelSettings'
        created_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          description: If deleted, the time the plan was deleted.
        discount_amount:
          type: string
          description: >-
            The discount amount applied to the product price when purchased through this Plan. 
            All Plans for a product must have the same discount amount.
        discount_type:
          $ref: '#/components/schemas/DiscountType'
        external_product_id:
          $ref: '#/components/schemas/ExternalProductId'
        sort_order:
          type: integer
          description: The number indicating the order which the plan will be in a list of related plans.
        subscription_preferences:
          $ref: '#/components/schemas/SubscriptionPreferences'
        title:
          type: string
          description: The title of the plan. All Plans for a product must have the same title.
        type:
          $ref: '#/components/schemas/PlanType'
        updated_at:
          type: string
          format: date-time
    PlanResponse:
      type: object
      properties:
        plan:
          $ref: '#/components/schemas/Plan'
      required:
        - plan
    ListPlansResponse:
      type: object
      required:
        - plans
      properties:
        previous_cursor:
          type: string
        next_cursor:
          type: string
        plans:
          type: array
          items:
            $ref: '#/components/schemas/Plan'
    CreatePlanInput:
      type: object
      required:
        - external_product_id
        - subscription_preferences
        - title
        - type
      properties:
        channel_settings:
          $ref: '#/components/schemas/DiscountChannelSettings'
        discount_amount:
          type: string
          description: >-
            The discount amount applied to the product price when purchased through this Plan. 
            All Plans for a product must have the same discount amount.
        discount_type:
          $ref: '#/components/schemas/DiscountType'
        external_product_id:
          $ref: '#/components/schemas/ExternalProductId'
        sort_order:
          type: integer
          description: The number indicating the order which the plan will be in a list of related plans.
        subscription_preferences:
          $ref: '#/components/schemas/SubscriptionPreferences'
        title:
          type: string
          description: The title of the plan. All Plans for a product must have the same title.
        type:
          $ref: '#/components/schemas/PlanType'
    UpdatePlanInput:
      type: object
      properties:
        channel_settings:
          $ref: '#/components/schemas/DiscountChannelSettings'
        discount_amount:
          type: string
          description: >-
            The discount amount applied to the product price when purchased through this Plan. 
            All Plans for a product must have the same discount amount.
        discount_type:
          $ref: '#/components/schemas/DiscountType'
        external_product_id:
          $ref: '#/components/schemas/ExternalProductId'
        sort_order:
          type: integer
          description: The number indicating the order which the plan will be in a list of related plans.
        subscription_preferences:
          $ref: '#/components/schemas/SubscriptionPreferences'
        title:
          type: string
          description: The title of the plan. All Plans for a product must have the same title.
    BulkCreatePlanInput:
      type: object
      required:
        - plans
      properties:
        plans:
          type: array
          items:
            $ref: '#/components/schemas/CreatePlanInput'
    BulkUpdatePlanInput:
      type: object
      required:
        - plans
      properties:
        plans:
          type: array
          items:
            $ref: '#/components/schemas/UpdatePlanInput'
    Product:
      type: object
      required:
        - external_product_id
        - external_updated_at
        - external_created_at
        - options
        - title
        - variants
        - vendor
      properties:
        external_product_id:
          type: string
          description: Unique numeric identifier of the product record in Recharge. The primary id of the record.
        brand:
          type: string
          description: The brand name of the product.
        external_created_at:
          type: string
          format: date-time
          description: The date and time at which the product was created in an external product catalog.
        external_updated_at:
          type: string
          format: date-time
          description: The date and time at which the product was updated in an external product catalog.
        images:
          type: array
          items:
            $ref: '#/components/schemas/Images'
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
        published_at:
          type: string
          format: date-time
          description: >-
            The datetime at which the product became available for purchase. To make the product available, 
            this should be set in the past.
        requires_shipping:
          type: boolean
          description: Indicator of shipping requirement. Dictates the default for the variants. Can be overridden at the variant level.
        title:
          type: string
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
        vendor:
          type: string
          description: The vendor of the product
    ProductDimensions:
      type: object
      description: A container of variant dimensions.
      properties:
        weight:
          type: integer
          description: The weight of the product in the weight unit configured for your store.
        weight_unit:
          type: string
          description: Read only. The weight unit specified for your store.
    ProductVariant:
      type: object
      properties:
        dimensions:
          $ref: '#/components/schemas/ProductDimensions'
        external_variant_id:
          type: string
          description: The variant id in your PIM. The primary key for the variant.
        image:
          $ref: '#/components/schemas/Images'
        sort_order:
          type: integer
          description: The sort order in which the x image from the array should appear when displayed.
        option_values:
          type: array
          description: An array of option values, linking the variant to the options listed at the product level.
          items:
            $ref: '#/components/schemas/ProductVariantOptionValue'
        prices:
          $ref: '#/components/schemas/ProductVariantPrice'
        requires_shipping:
          type: boolean
          description: |
            Indicator of shipping requirement. If true the product associated to the variant needs to be shipped.
            
            Default value is what is set at the Product level for requires_shipping.
        sku:
          type: string
          description: The stock keeping unit of the variant.
        tax_code:
          type: string
          description: The tax code of the variant. This value will be used when calculating tax with a third party tax service.
        taxable:
          type: boolean
          description: A boolean indicator of the variant’s taxability.
        title:
          type: string
          description: The title of the variant.
    ProductVariantPrice:
      type: object
      description: An object containing prices for the variant.
      properties:
        compare_at_price:
          type: string
          description: The compare-at price for the variant.
        unit_price:
          type: string
          description: The unit price for the variant.
    ProductOption:
      type: object
      required:
        - name
        - position
        - values
      properties:
        name:
          type: string
          description: The name of the option, such as size, color, etc
        position:
          type: integer
          description: The position in which the x option from the array should appear when displayed
        values:
          type: array
          description: An array of values for the x option in the options array
          items:
            $ref: '#/components/schemas/ProductOptionValue'
    ProductOptionValue:
      type: object
      required:
        - label
        - position
      properties:
        label:
          type: string
          description: >-
            The label of the option value. For example, if the option name is size, 
            this value may be small, medium, large, etc.
        position:
          type: integer
          description: The position in which the y option value from the array should appear when displayed
    ProductVariantOptionValue:
      type: object
      properties:
        label:
          type: string
          description: The label of the option value. Maps to a value specified in the product options list
    ProductResponse:
      type: object
      required:
        - product
      properties:
        product:
          $ref: '#/components/schemas/Product'
    CreateProductInput:
      type: object
      required:
        - external_created_at
        - options
        - title
        - variants
        - vendor
      properties:
        external_product_id:
          type: string
          description: Unique numeric identifier of the product record in Recharge. The primary id of the record.
        brand:
          type: string
          description: The brand name of the product.
        external_created_at:
          type: string
          format: date-time
          description: The date and time at which the product was created in an external product catalog.
        external_updated_at:
          type: string
          format: date-time
          description: The date and time at which the product was updated in an external product catalog.
        images:
          type: array
          items:
            $ref: '#/components/schemas/Images'
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
        published_at:
          type: string
          format: date-time
          description: >-
            The datetime at which the product became available for purchase. To make the product available, 
            this should be set in the past.
        requires_shipping:
          type: boolean
          description: Indicator of shipping requirement. Dictates the default for the variants. Can be overridden at the variant level.
        title:
          type: string
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
        vendor:
          type: string
          description: The vendor of the product
    UpdateProductInput:
      type: object
      properties:
        brand:
          type: string
          description: The brand name of the product.
        external_created_at:
          type: string
          format: date-time
          description: The date and time at which the product was created in an external product catalog.
        external_updated_at:
          type: string
          format: date-time
          description: The date and time at which the product was updated in an external product catalog.
        images:
          type: array
          items:
            $ref: '#/components/schemas/Images'
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
        published_at:
          type: string
          format: date-time
          description: >-
            The datetime at which the product became available for purchase. To make the product available, 
            this should be set in the past.
        requires_shipping:
          type: boolean
          description: Indicator of shipping requirement. Dictates the default for the variants. Can be overridden at the variant level.
        title:
          type: string
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
        vendor:
          type: string
          description: The vendor of the product
    RetentionStrategy:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - prevention_text
        - reason
      properties:
        id:
          type: integer
          format: int56
          description: Unique numeric identifier for the RetentionStrategy
        created_at:
          type: string
          format: date-time
          description: The date and time the RetentionStrategy was created
        discount_code:
          type: string
          description: Discount code to offer customer when used with an incentive_type of discount
        incentive_type:
          $ref: '#/components/schemas/IncentiveType'
        prevention_text:
          type: string
          description: short phrase or question to ask for more details or to provide an alternative to canceling.
        reason:
          type: string
          description: The reason for canceling.
        updated_at:
          type: string
          format: date-time
          description: The date and time the RetentionStrategy was last updated.
    RetentionStrategyResponse:
      type: object
      required:
        - retention_strategy
      properties:
        retention_strategy:
          $ref: '#/components/schemas/RetentionStrategy'
    CreateRetentionStrategyInput:
      type: object
      required:
        - prevention_text
        - reason
      properties:
        discount_code:
          type: string
          description: Discount code to offer customer when used with an incentive_type of discount
        incentive_type:
          $ref: '#/components/schemas/IncentiveType'
        prevention_text:
          type: string
          description: short phrase or question to ask for more details or to provide an alternative to canceling.
        reason:
          type: string
          description: The reason for canceling. z
    UpdateRetentionStrategyInput:
      type: object
      properties:
        discount_code:
          type: string
          description: Discount code to offer customer when used with an incentive_type of discount
        incentive_type:
          $ref: '#/components/schemas/IncentiveType'
        prevention_text:
          type: string
          description: short phrase or question to ask for more details or to provide an alternative to canceling.
        reason:
          type: string
          description: The reason for canceling. z
    IncentiveType:
      type: string
      enum:
        - delay_subscription
        - discount
        - skip_charge
        - swap_product
      description: Type of incentive to offer customer
    Store:
      type: object
      properties:
        id:
          type: integer
          format: int56
          description: Unique number identifier of the store
        checkout_logo_url:
          type: string
          description: Checkout logo url
        checkout_platform:
          type: string
          description: Checkout platform
        created_at:
          type: string
          format: date-time
          description: Date and time when the store is created
        currency:
          type: string
          description: Currency of the store
        customer_portal_base_url:
          type: string
          description: Customer Portal Base URL
        default_api_version:
          type: string
          description: Default API version
        email:
          type: string
          description: E-mail address of the store owner
        enabled_presentment_currencies:
          type: array
          description: Enabled currencies the store sells in.
          items:
            type: string
        enabled_presentment_currencies_symbols:
          type: array
          description: Currency symbol used for enabled currencies the store sells in
          items:
            $ref: '#/components/schemas/CurrencySymbol'
        disabled_currencies_historical:
          type: array
          description: >-
            A ledger of currencies that the store no longer sells in. If a currency is present in both the 
            enabled_presentment_currencies and disabled_currencies_historical ledger it is because it was 
            disabled at one point in time but is now enabled.
          items:
            type: string
        external_platform:
          type: string
          description: External platform connected to Recharge
          enum:
            - shopify
            - big_commerce
            - headless
            - magento
        identifier:
          type: string
          description: Unique identifier of the store on the external platform
        merchant_portal_base_url:
          type: string
          description: Merchant portal base URL
        name:
          type: string
        phone:
          type: string
          description: Phone number of the store owner
        timezone:
          $ref: '#/components/schemas/Timezone'
        updated_at:
          type: string
          format: date-time
          description: The date and time when the address was last updated
        weight_unit:
          type: string
          description: Weight unit for the store
    StoreResponse:
      type: object
      properties:
        store:
          $ref: '#/components/schemas/Store'
      required:
        - store
    Timezone:
      type: object
      required:
        - iana_timezone
        - name
      properties:
        iana_timezone:
          type: string
          description: Iana database timezone format
        name:
          type: string
          description: Timezone for the Store
    CurrencySymbol:
      type: object
      properties:
        currency:
          type: string
          description: Currency used
        location:
          type: string
          description: Describes if the symbol appears before or after currency
        suffix:
          type: string
          description: Suffix appended to symbol.
        symbol:
          type: string
          description: The symbol of the currency.
    Subscription:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - address_id
        - charge_interval_frequency
        - next_charge_scheduled_at
        - order_interval_frequency
        - order_interval_unit
        - quantity
        - external_variant_id
      properties:
        id:
          type: integer
          format: int56
          description: Unique numeric identifier for the subscription.
        address_id:
          type: integer
          description: Unique numeric identifier for the address the subscription is associated with.
        customer_id:
          type: integer
          description: Unique numeric identifier for the customer the subscription is tied to.
        analytics_data:
          $ref: '#/components/schemas/AnalyticsData'
        cancellation_reason:
          type: string
          description: Reason provided for cancellation.
        cancellation_reason_comments:
          type: string
          description: Additional comment for cancellation. Maximum length is 1024 characters.
          maxLength: 1024
        cancelled_at:
          type: string
          format: date-time
          description: The time the subscription was cancelled.
        charge_interval_frequency:
          type: string
          description: The number of units (specified in order_interval_unit) between each Charge. For example, order_interval_unit=month and charge_interval_frequency=3, indicate charge every 3 months.
        created_at:
          type: string
          format: date-time
        expire_after_specific_number_of_charges:
          type: integer
          description: Set the number of charges until subscription expires.
        external_product_id:
          $ref: '#/components/schemas/ExternalProductId'
        external_variant_id:
          $ref: '#/components/schemas/ExternalVariantId'
        has_queued_charges:
          type: boolean
          description: Retrieves true if there is queued charge. Otherwise, retrieves false.
        is_prepaid:
          type: boolean
          description: Value is set to true if it is a prepaid item.
        is_skippable:
          type: boolean
          description: Value is set to true if it is not a prepaid item
        is_swappable:
          type: boolean
          description: Value is set to true if it is not a prepaid item and if in Customer portal settings swap is allowed for customers.
        max_retries_reached:
          type: boolean
          description: Retrieves true if charge has an error max retries reached. Otherwise, retrieves false.
        next_charge_scheduled_at:
          type: string
          format: date-time
          description: Date of the next charge for the subscription.
        order_day_of_month:
          type: integer
          description: The set day of the month order is created. Default is that there isn’t a strict day of the month when the order is created. This is only applicable to subscriptions with order_interval_unit:“month”.
        order_day_of_week:
          type: integer
          description: The set day of the week order is created. Default is that there isn’t a strict day of the week order is created. This is only applicable to subscriptions with order_interval_unit = “week”. Value of 0 equals to Monday, 1 to Tuesday etc.
        order_interval_frequency:
          type: integer
          maximum: 1000
          description: 'The number of units (specified in order_interval_unit) between each order. For example, order_interval_unit=month and order_interval_frequency=3, indicate order every 3 months. Max value: 1000'
        order_interval_unit:
          type: string
          enum:
            - day
            - week
            - month
          description: The frequency unit used to determine when a subscription’s order is created.
        presentment_currency:
          type: string
          description: The presentment currency of the subscription.
        price:
          type: string
          description: The price of the item before discounts, taxes, or shipping have been applied.
        product_title:
          type: string
          description: The name of the product in a store’s catalog.
        properties:
          type: array
          items:
            $ref: '#/components/schemas/OrderAttribute'
        quantity:
          type: integer
          description: The number of items in the subscription.
        sku:
          type: string
          description: A unique identifier of the item in the fulfillment. In cases where SKU is blank, it will be dynamically pulled whenever it is used.
        sku_override:
          type: boolean
          description: Flag that is automatically updated to true when SKU is passed on create or update. When sku_override is true, the SKU on the subscription will be used to generate charges and orders. When sku_override is false, Recharge will dynamically fetch the SKU from the corresponding external platform variant.
        status:
          type: string
          enum:
            - active,
            - cancelled,
            - expired
          description: The status of the subscription. EXPIRED - This status occurs when the maximum number of charges for a product has been reached.
        updated_at:
          type: string
          format: date-time
          description: The date time at which the purchase_item record was last updated.
        variant_title:
          type: string
          description: The name of the variant in a shop’s catalog.
    SubscriptionResponse:
      type: object
      required:
        - subscription
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'
    CreateSubscriptionInput:
      type: object
      required:
        - address_id
        - charge_interval_frequency
        - next_charge_scheduled_at
        - order_interval_frequency
        - order_interval_unit
        - quantity
        - external_variant_id
      properties:
        address_id:
          type: integer
          description: Unique numeric identifier for the address the subscription is associated with.
        charge_interval_frequency:
          type: string
          description: The number of units (specified in order_interval_unit) between each Charge. For example, order_interval_unit=month and charge_interval_frequency=3, indicate charge every 3 months.
        expire_after_specific_number_of_charges:
          type: integer
          description: Set the number of charges until subscription expires.
        next_charge_scheduled_at:
          type: string
          format: date-time
          description: Date of the next charge for the subscription.
        order_day_of_month:
          type: integer
          description: The set day of the month order is created. Default is that there isn’t a strict day of the month when the order is created. This is only applicable to subscriptions with order_interval_unit:“month”.
        order_day_of_week:
          type: integer
          description: The set day of the week order is created. Default is that there isn’t a strict day of the week order is created. This is only applicable to subscriptions with order_interval_unit = “week”. Value of 0 equals to Monday, 1 to Tuesday etc.
        order_interval_frequency:
          type: integer
          maximum: 1000
          description: 'The number of units (specified in order_interval_unit) between each order. For example, order_interval_unit=month and order_interval_frequency=3, indicate order every 3 months. Max value: 1000'
        order_interval_unit:
          type: string
          enum:
            - day
            - week
            - month
          description: The frequency unit used to determine when a subscription’s order is created.
        price:
          type: string
          description: The price of the item before discounts, taxes, or shipping have been applied.
        product_title:
          type: string
          description: The name of the product in a store’s catalog.
        properties:
          type: array
          items:
            $ref: '#/components/schemas/OrderAttribute'
        quantity:
          type: integer
          description: The number of items in the subscription.
        external_product_id:
          $ref: '#/components/schemas/ExternalProductId'
        external_variant_id:
          $ref: '#/components/schemas/ExternalVariantId'
        status:
          type: string
          enum:
            - active,
            - cancelled,
            - expired
          description: The status of the subscription. EXPIRED - This status occurs when the maximum number of charges for a product has been reached.
        variant_title:
          type: string
          description: The name of the variant in a shop’s catalog.
    UpdateSubscriptionInput:
      type: object
      properties:
        charge_interval_frequency:
          type: string
          description: The number of units (specified in order_interval_unit) between each Charge. For example, order_interval_unit=month and charge_interval_frequency=3, indicate charge every 3 months.
        expire_after_specific_number_of_charges:
          type: integer
          description: Set the number of charges until subscription expires.
        order_day_of_month:
          type: integer
          description: The set day of the month order is created. Default is that there isn’t a strict day of the month when the order is created. This is only applicable to subscriptions with order_interval_unit:“month”.
        order_day_of_week:
          type: integer
          description: The set day of the week order is created. Default is that there isn’t a strict day of the week order is created. This is only applicable to subscriptions with order_interval_unit = “week”. Value of 0 equals to Monday, 1 to Tuesday etc.
        order_interval_frequency:
          type: integer
          maximum: 1000
          description: 'The number of units (specified in order_interval_unit) between each order. For example, order_interval_unit=month and order_interval_frequency=3, indicate order every 3 months. Max value: 1000'
        order_interval_unit:
          type: string
          enum:
            - day
            - week
            - month
          description: The frequency unit used to determine when a subscription’s order is created.
        price:
          type: string
          description: The price of the item before discounts, taxes, or shipping have been applied.
        product_title:
          type: string
          description: The name of the product in a store’s catalog.
        properties:
          type: array
          items:
            $ref: '#/components/schemas/OrderAttribute'
        quantity:
          type: integer
          description: The number of items in the subscription.
        plan_id:
          type: integer
          description: 'A Recharge Plan id that provides interval information. Automatically fills the following properties from the plan if they were not provided directly: charge_interval_frequency, expire_after_specific_number_of_charges, order_day_of_month, order_day_of_week, order_interval_frequency, order_interval_unit.'
        sku:
          type: string
          description: A unique identifier of the item in the fulfillment.
        sku_override:
          type: boolean
          description: Flag is automatically updated to true when SKU is passed on create or update. When sku_override is true, the SKU on the subscription will be used to generate charges and orders. When sku_override is false, Recharge will dynamically fetch the sku from the corresponding external platform variant.
        external_variant_id:
          $ref: '#/components/schemas/ExternalVariantId'
        use_external_variant_defaults:
          type: boolean
          description: Flag instructing to pull the price from the product variant passed. You need to pass the variant_id under external_variant_id.ecommerce and set this attribute to true in the request for the flag to work.
        variant_title:
          type: string
          description: The name of the variant in a shop’s catalog.
security:
  - version: []
    apiKey: []

paths:
  /addresses:
    post:
      summary: Create a new address for a customer.
      operationId: create-address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAddressInput'
      responses:
        '201':
          description: Address created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
    get:
      summary: List all addresses.
      operationId: list-addresses
      parameters:
        - name: created_at_max
          in: query
          description: Returns addresses created before the given time.
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: Returns addresses created after the given time.
          schema:
            type: string
            format: date-time
        - name: customer_id
          in: query
          description: Unique identifier of the customer.
          schema:
            type: integer
        - name: discount_code
          in: query
          description: Returns addresses that have the provided discount_code.
          schema:
            type: string
        - name: discount_id
          in: query
          description: Returns addresses that have the provided discount_id.
          schema:
            type: string
        - name: ids
          in: query
          description: Filter addresses by id. If passing multiple values, must be comma separated. Non-integer values will result in a 422 error
          schema:
            type: array
            items:
              type: integer
          style: form
          explode: false
        - name: limit
          in: query
          description: The amount of results. Default is 50 while the maximum is 250.
          schema:
            type: integer
            default: 50
            maximum: 250
        - name: cursor
          in: query
          description: Cursor for pagination
          schema:
            type: string
            default: 1
        - name: updated_at_max
          in: query
          description: Returns addresses updated before the given date.
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: Returns addresses updated after the given date.
          schema:
            type: string
            format: date-time
        - name: is_active
          in: query
          description: Returns active addresses
          schema:
            type: boolean
      responses:
        '200':
          description: List of addresses retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - addresses
                properties:
                  previous_cursor:
                    type: string
                  next_cursor:
                    type: string
                  addresses:
                    type: array
                    items:
                      $ref: '#/components/schemas/Address'
  /addresses/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the address
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve an address by its ID.
      operationId: get-address
      responses:
        '200':
          description: Address retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
    put:
      summary: Update an address by its ID.
      operationId: update-address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressInput'
      responses:
        '200':
          description: Address updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
    delete:
      summary: Delete an address by its ID.
      operationId: delete-address
      responses:
        '204':
          description: Address deleted successfully.
  /addresses/merge:
    post:
      summary: Merge addresses.
      operationId: merge-addresses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeAddresses'
      responses:
        '200':
          description: Addresses merged successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
  /addresses/{id}/charges/skip:
    parameters:
      - name: id
        in: path
        description: ID of the address
        required: true
        schema:
          type: integer
    post:
      summary: Skip future charge for an address.
      operationId: skip-future-charge-for-address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkipCharge'
      responses:
        '200':
          description: Future charge for address skipped successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeResponse'
  /bundle_selections:
    post:
      summary: Create a bundle selection.
      operationId: create-bundle-selection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BundleSelectionInput'
      responses:
        '200':
          description: Bundle selection created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BundleSelectionResponse'
    put:
      summary: Update an bundle selection by its ID.
      operationId: update-bundle-selection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BundleSelectionInput'
      responses:
        '200':
          description: Bundle selection updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BundleSelectionResponse'
    get:
      summary: Returns a list of BundleSelections.
      operationId: list-bundle-selections
      parameters:
        - name: purchase_item_ids
          in: query
          description: Filter BundleSelections by Subscription or Onetime ID.
          schema:
            type: array
            items:
              type: integer
          style: form
          explode: false
        - name: bundle_variant_ids
          in: query
          description: Filter BundleSelections by BundleVariants.
          schema:
            type: array
            items:
              type: integer
          style: form
          explode: false
        - name: limit
          in: query
          description: The amount of results. Default is 50 while the maximum is 250.
          schema:
            type: integer
            default: 50
            maximum: 250
        - name: cursor
          in: query
          description: Cursor for pagination
          schema:
            type: string
            default: 1
        - name: sort_by
          in: query
          description: Sort listed BundleSelections in a specific order.
          schema:
            type: string
            enum:
              - id-asc
              - id-desc
              - updated_at-asc
              - updated_at-desc

      responses:
        '200':
          description: List of bundle selections retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - bundle_selections
                properties:
                  previous_cursor:
                    type: string
                  next_cursor:
                    type: string
                  bundle_selections:
                    type: array
                    items:
                      $ref: '#/components/schemas/BundleSelection'
  /bundle_selections/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the bundle selection
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve a bundle selection by its ID.
      operationId: get-bundle-selection
      responses:
        '200':
          description: Bundle selection retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BundleSelectionResponse'
    delete:
      summary: Delete a bundle selection by its ID.
      operationId: delete-bundle-selection
      responses:
        '204':
          description: Bundle selection deleted successfully.
  /charges:
    get:
      summary: List all charges.
      operationId: list-charges
      parameters:
        - name: address_id
          in: query
          description: Filter Charges by Address.
          schema:
            type: string
        - name: created_at_max
          in: query
          description: Returns Charges created before the given time.
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: Returns Charges created after the given time.
          schema:
            type: string
            format: date-time
        - name: customer_id
          in: query
          description: Unique identifier of the customer.
          schema:
            type: integer
        - name: discount_code
          in: query
          description: Returns Charges that have the provided discount_code.
          schema:
            type: string
        - name: discount_id
          in: query
          description: Returns Charges that have the provided discount_id.
          schema:
            type: string
        - name: ids
          in: query
          description: Filter Charges by id. If passing multiple values, must be comma separated. Non-integer values will result in a 422 error
          schema:
            type: array
            items:
              type: integer
          style: form
          explode: false
        - name: limit
          in: query
          description: The amount of results. Default is 50 while the maximum is 250.
          schema:
            type: integer
            default: 50
            maximum: 250
        - name: cursor
          in: query
          description: Cursor for pagination
          schema:
            type: string
            default: 1
        - name: purchase_item_id
          in: query
          description: Filter Charges by a Subscription or Onetime ID.
          schema:
            type: string
        - name: purchase_item_ids
          in: query
          description: Filter Charges by a comma-separated list of Subscription or Onetime IDs.
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
        - name: scheduled_at
          in: query
          description: Filter Charges by specific scheduled charge date.
          schema:
            type: string
            format: date
        - name: scheduled_at_max
          in: query
          description: Show Charges scheduled to be processed before the given date.
          schema:
            type: string
            format: date
        - name: scheduled_at_min
          in: query
          description: Show Charges scheduled to be processed after the given date.
          schema:
            type: string
            format: date
        - name: sort_by
          in: query
          description: Sort listed Charges in a specific order.
          schema:
            type: string
            enum:
              - id-asc
              - id-desc
              - updated_at-asc
              - updated_at-desc
              - scheduled_at-asc
              - scheduled_at-desc
        - name: status
          in: query
          description: Filter charges by status.
          schema:
            type: string
            enum:
              - success
              - queued
              - error
              - refunded
              - partially_refunded
              - skipped
              - pending_manual_payment
              - pending
        - name: updated_at_max
          in: query
          description: Returns charges updated before the given date.
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: Returns charges updated after the given date.
          schema:
            type: string
            format: date-time
        - name: processed_at_max
          in: query
          description: Show charges processed before, and including, the given date.
          schema:
            type: string
            format: date-time
        - name: processed_at_min
          in: query
          description: Show charges processed after, and including, the given date.
          schema:
            type: string
            format: date-time
        - name: is_active
          in: query
          description: Returns active addresses
          schema:
            type: boolean
      responses:
        '200':
          description: List of charges retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - charges
                properties:
                  previous_cursor:
                    type: string
                  next_cursor:
                    type: string
                  charges:
                    type: array
                    items:
                      $ref: '#/components/schemas/Charge'
  /charges/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the Charge
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve a Charge by its ID.
      operationId: get-charge
      responses:
        '200':
          description: Charge retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeResponse'
  /charges/{id}/apply_discount:
    parameters:
      - name: id
        in: path
        description: ID of the Charge
        required: true
        schema:
          type: integer
    post:
      summary: Apply Discount to an existing queued Charge.
      operationId: apply-charge-discount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                discount_code:
                  type: string
                  description: Code of the Discount you want to apply to a Charge.
                discount_id:
                  type: integer
                  description: ID of the Discount you want to apply to a Charge.
      responses:
        '200':
          description: Discount applied to Charge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeResponse'
  /charges/{id}/remove_discount:
    parameters:
      - name: id
        in: path
        description: ID of the Charge
        required: true
        schema:
          type: integer
    post:
      summary: Remove a Discount from a Charge without destroying the Discount.
      operationId: remove-charge-discount
      responses:
        '200':
          description: Discount removed from the Charge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeResponse'
  /charges/{id}/skip:
    parameters:
      - name: id
        in: path
        description: ID of the Charge
        required: true
        schema:
          type: integer
    post:
      summary: Skip a Charge.
      operationId: skip-charge
      responses:
        '200':
          description: Charge skipped
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeResponse'
  /charges/{id}/unskip:
    parameters:
      - name: id
        in: path
        description: ID of the Charge
        required: true
        schema:
          type: integer
    post:
      summary: Unskip a Charge.
      operationId: unskip-charge
      responses:
        '200':
          description: Charge unskipped
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeResponse'
  /charges/{id}/refund:
    parameters:
      - name: id
        in: path
        description: ID of the Charge
        required: true
        schema:
          type: integer
    post:
      summary: Refund a Charge.
      operationId: refund-charge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
              properties:
                amount:
                  type: string
                  description: Amount of money that will be refunded. It can be fully or partially refunded.
                full_refund:
                  type: boolean
                  description: If this parameter has value true, the Charge will be totally refunded.
                retry:
                  type: boolean
                  description: If this parameter has value true and full_refund has value true, the Charge will be retried. The status on the Charge will be returned as “error”.
                error:
                  type: string
                  description: If the retry parameter has value true, this value is required. Valid values are “insufficient_inventory”.
                error_type:
                  type: string
                  description: If the retry parameter has value true, this value is required.
      responses:
        '200':
          description: Charge refunded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeResponse'
  /charges/{id}/process:
    parameters:
      - name: id
        in: path
        description: ID of the Charge
        required: true
        schema:
          type: integer
    post:
      summary: Process a Charge.
      operationId: process-charge
      responses:
        '200':
          description: Charge processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeResponse'
  /charges/{id}/capture_payment:
    parameters:
      - name: id
        in: path
        description: ID of the Charge
        required: true
        schema:
          type: integer
    post:
      summary: If you are leveraging the authorize/capture workflow with Recharge, the charge/{id}/capture_payment endpoint is how to capture the funds of a previously authorized Charge.
      operationId: capture-charge
      responses:
        '200':
          description: Charge processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeResponse'
  /checkouts:
    post:
      summary: Create a Checkout
      operationId: create-checkout
      parameters:
        - name: get_shipping_rates
          in: query
          description: If specified as a query parameter, shipping rates will be retrieved and will allow providing applied_shipping_rate upon checkout creation.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCheckoutInput'
      responses:
        '201':
          description: Checkout created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutResponse'
  /checkouts/{token}:
    get:
      summary: Retrieve an checkout by its token.
      operationId: get-checkout
      parameters:
        - name: token
          in: path
          description: token of the checkout to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Checkout retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutResponse'
    put:
      summary: Update an checkout by its token.
      operationId: update-checkout
      parameters:
        - name: token
          in: path
          description: token of the checkout to update.
          required: true
          schema:
            type: string
        - name: get_shipping_rates
          in: query
          description: If specified as a query parameter, shipping rates will be retrieved and will allow providing applied_shipping_rate upon checkout creation.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCheckoutInput'
      responses:
        '200':
          description: Checkout updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutResponse'
  /checkouts/{token}/shipping_rates:
    get:
      summary: List shipping rates for a checkout
      operationId: list-checkout-shipping-rates
      parameters:
        - name: token
          in: path
          description: checkout token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutShippingRatesResponse'
  /checkouts/{token}/charge:
    post:
      summary: Process a checkout
      operationId: process-checkout
      parameters:
        - name: token
          in: path
          description: token of the checkout to process.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - payment_processor
                - payment_token
              properties:
                payment_processor:
                  type: string
                  enum:
                    - stripe,
                    - braintree
                    - authorize
                  description: The name of payment processor
                payment_token:
                  type: string
                  description: Payment token that will be used in transaction. For Stripe this field needs to be populated with a payment method. For Braintree this field needs to be populated with a payment nonce.
                payment_type:
                  $ref: '#/components/schemas/PaymentType'
      responses:
        '200':
          description: Checkout processed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutChargeResponse'
  /collections:
    post:
      summary: Create a new collection
      operationId: create-collection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCollectionInput'
      responses:
        '201':
          description: Collection created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponse'
    get:
      summary: List all collections
      operationId: list-collections
      parameters:
        - name: title
          in: query
          description: The title of the Collection. A short descriptive definition of the Collection.
          schema:
            type: string
      responses:
        '200':
          description: List of collections retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - collections
                properties:
                  previous_cursor:
                    type: string
                  next_cursor:
                    type: string
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/Collection'
  /collections/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the collection
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve one Collection using collection_id.
      operationId: get-collection
      responses:
        '200':
          description: Collection retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponse'
    put:
      summary: Modify an existing Collection to match the specified parameters.
      operationId: update-collection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCollectionInput'
      responses:
        '200':
          description: Collection updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponse'
    delete:
      summary: Delete a collection by its ID.
      operationId: delete-collection
      responses:
        '204':
          description: Collection deleted successfully.
  /collection_products:
    get:
      summary: Return a list of the product ids included in Collections in your store.
      operationId: list-collection-products
      parameters:
        - name: collection_id
          in: query
          description: The id of the Collection for which you want to see the products
          schema:
            type: integer
      responses:
        '200':
          description: Collection products retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProductResponse'
  /collections/{id}/collection_products-bulk:
    parameters:
      - name: id
        in: path
        description: ID of the collection
        required: true
        schema:
          type: integer
    post:
      summary: Add products to a Collection in Recharge.
      operationId: add-collection-products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionProductsInput'
      responses:
        '201':
          description: Collection updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProductResponse'
    delete:
      summary: Delete a collection by its ID.
      operationId: delete-collection-products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionProductsInput'
      responses:
        '204':
          description: Collection products deleted successfully.
  /customers:
    post:
      summary: Create a customer
      operationId: create-customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerInput'
      responses:
        '200':
          description: Customer created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
    get:
      summary: Return a list of customers in your store.
      operationId: list-customers
      parameters:
        - name: email
          in: query
          description: Returns the user linked to the email address provided.
          schema:
            type: string
        - name: created_at_max
          in: query
          description: Gets all customers created before this date.
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: Gets all customers created after this date.
          schema:
            type: string
            format: date-time
        - name: hash
          in: query
          description: Returns the user linked to the given recharge customer hash
          schema:
            type: string
        - name: ids
          in: query
          description: Filter customers by id. If passing multiple values, must be comma separated. Non-integer values will result in a 422 error
          schema:
            type: array
            items:
              type: integer
          style: form
          explode: false
        - name: limit
          in: query
          description: The amount of results. Default is 50 while the maximum is 250.
          schema:
            type: integer
            default: 50
            maximum: 250
        - name: cursor
          in: query
          description: Cursor for pagination
          schema:
            type: string
            default: 1
        - name: external_customer_id
          in: query
          description: Returns the user linked to the given external_customer_id
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: Gets all customers updated before this date.
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: Gets all customers updated after this date.
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of customers retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - customers
                properties:
                  previous_cursor:
                    type: string
                  next_cursor:
                    type: string
                  customers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
  /customers/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the customer
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve one customer using customer_id.
      operationId: get-customer
      responses:
        '200':
          description: Customer retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
    put:
      summary: Modify an existing Customer to match the specified parameters.
      operationId: update-customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerInput'
      responses:
        '200':
          description: Customer updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
    delete:
      summary: Delete a Customer
      operationId: delete-customer
      responses:
        '204':
          description: Customer deleted successfully.
  /customers/{id}/notifications:
    parameters:
      - name: id
        in: path
        description: ID of the Customer
        required: true
        schema:
          type: integer
    post:
      summary: Sends a notification email to the customer
      operationId: send-email-notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - template_type
              properties:
                type:
                  type: string
                  enum:
                    - email
                  description: Identifies the type of the notifications. Value can be email only.
                template_type:
                  type: string
                  enum:
                    - upcoming_charge
                    - get_account_access
                    - shopify_update_payment_information
                template_vars:
                  type: object
                  properties:
                    address_id:
                      type: integer
                      description: If needed by the template_type, the address_id associated with the indicated Customer, and the object of the Notification.
                    charge_id:
                      type: integer
                      description: If needed by the template_type, the charge_id of the Charge for which the notification should be sent.


      responses:
        '200':
          description: Customer updated successfully.
          content:
            application/json:
              schema: {}
  /customers/{id}/delivery_schedule:
    parameters:
      - name: id
        in: path
        description: ID of the customer
        required: true
        schema:
          type: integer
    get:
      summary: Returns the list of projected deliveries in a specific interval.
      operationId: get-customer-delivery-schedule
      parameters:
        - name: delivery_count_future
          in: query
          description: The count of delivery objects that should be included that reference projected orders. Will not return deliveries past 365 days in the future.
          schema:
            type: integer
        - name: future_interval
          in: query
          description: The count of days forward to report deliveries on. Defaults to store setting or 90. Maximum of 365 days.
          schema:
            type: integer
            maximum: 365
        - name: date_max
          in: query
          description: The end date of the requested delivery schedule. Cannot be in the past. Cannot exceed 365 days in the future.
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Customer delivery schedule retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryScheduleResponse'
  /customers/{id}/credit_summary:
    parameters:
      - name: id
        in: path
        description: ID of the customer
        required: true
        schema:
          type: integer
    get:
      summary: Returns a credit summary for the customer.
      operationId: get-customer-credit-summary
      responses:
        '200':
          description: Customer credit summary retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCreditSummaryResponse'
  /discounts:
    post:
      summary: Create a new discount
      operationId: create-discount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDiscountInput'
      responses:
        '201':
          description: Discount created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountResponse'
    get:
      summary: Return a list of discounts in your store.
      operationId: list-discounts
      parameters:
        - name: created_at_max
          in: query
          description: Returns discounts created before the given time.
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: Returns discounts created after the given time.
          schema:
            type: string
            format: date-time
        - name: discount_code
          in: query
          description: Returns addresses that have the provided discount_code.
          schema:
            type: string
        - name: discount_type
          in: query
          description: Filter based on type of discount.
          schema:
            $ref: '#/components/schemas/DiscountType'
        - name: ids
          in: query
          description: Filter discounts by id. If passing multiple values, must be comma separated. Non-integer values will result in a 422 error
          schema:
            type: array
            items:
              type: integer
          style: form
          explode: false
        - name: limit
          in: query
          description: The amount of results. Default is 50 while the maximum is 250.
          schema:
            type: integer
            default: 50
            maximum: 250
        - name: cursor
          in: query
          description: Cursor for pagination
          schema:
            type: string
            default: 1
        - name: status
          in: query
          description: Returns all discounts with status enabled, disabled or fully_disabled
          schema:
            $ref: '#/components/schemas/DiscountStatus'
        - name: updated_at_max
          in: query
          description: Returns discounts updated before the given date.
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: Returns discounts updated after the given date.
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of discounts retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - discounts
                properties:
                  previous_cursor:
                    type: string
                  next_cursor:
                    type: string
                  discounts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Discount'
  /discounts/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the discount
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve a discount by its ID.
      operationId: get-discount
      responses:
        '200':
          description: Discount retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountResponse'
    put:
      summary: Update an discount by its ID.
      operationId: update-discount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDiscountInput'
      responses:
        '200':
          description: Discount updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountResponse'
    delete:
      summary: Delete an discount by its ID.
      operationId: delete-discount
      responses:
        '204':
          description: Discount deleted successfully.
  /metafields:
    post:
      summary: Create a new metafield
      operationId: create-metafield
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMetafieldInput'
      responses:
        '201':
          description: Metafield created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetafieldResponse'
    get:
      summary: List all metafields.
      operationId: list-metafields
      parameters:
        - name: limit
          in: query
          description: The amount of results. Default is 50 while the maximum is 250.
          schema:
            type: integer
            default: 50
            maximum: 250
        - name: namespace
          in: query
          description: A category or container that differentiates your metadata from other metafields.
          schema:
            type: string
        - name: owner_id
          in: query
          description: Unique numeric identifier of the owner resource.
          schema:
            type: string
        - name: owner_resource
          in: query
          description: Objects which support Metafields
          schema:
            $ref: '#/components/schemas/MetafieldOwnerResource'
        - name: cursor
          in: query
          description: Cursor for pagination
          schema:
            type: string
            default: 1
      responses:
        '200':
          description: List of metafields retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - metafields
                properties:
                  previous_cursor:
                    type: string
                  next_cursor:
                    type: string
                  metafields:
                    type: array
                    items:
                      $ref: '#/components/schemas/Metafield'
  /metafields/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the metafield
        required: true
        schema:
          type: integer
    get:
      summary: Retrieves a single metafield based on a specified id.
      operationId: get-metafield
      responses:
        '200':
          description: Metafield retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetafieldResponse'
    put:
      summary: Update a metafield by its ID.
      operationId: update-metafield
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMetafieldInput'
      responses:
        '200':
          description: Metafield updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetafieldResponse'
    delete:
      summary: Delete a metafield by its ID.
      operationId: delete-metafield
      responses:
        '204':
          description: Metafield deleted successfully.
  /onetimes:
    post:
      summary: Create a new onetime
      operationId: create-onetime
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOnetimeInput'
      responses:
        '201':
          description: Onetime created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnetimeResponse'
    get:
      summary: Returns a list of all Onetime products from store.
      operationId: list-onetimes
      parameters:
        - name: address_id
          in: query
          description: Return the onetimes linked to the given address_id.
          schema:
            type: string
        - name: address_ids
          in: query
          description: Return the onetimes linked to the given comma-separated list of address_ids.
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
        - name: created_at_max
          in: query
          description: Returns onetimes created before the given time.
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: Returns onetimes created after the given time.
          schema:
            type: string
            format: date-time
        - name: customer_id
          in: query
          description: Return the onetimes linked to the given Recharge customer_id.
          schema:
            type: integer
        - name: include_cancelled
          in: query
          description: If true the response will include the cancelled Onetimes as well as the others.
          schema:
            type: boolean
        - name: limit
          in: query
          description: The amount of results. Default is 50 while the maximum is 250.
          schema:
            type: integer
            default: 50
            maximum: 250
        - name: cursor
          in: query
          description: Cursor for pagination
          schema:
            type: string
            default: 1
        - name: external_variant_id
          in: query
          description: Return the one time purchases linked to the given external platform product variant_id.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: Returns addresses updated before the given date.
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: Returns addresses updated after the given date.
          schema:
            type: string
            format: date-time
        - name: ids
          in: query
          description: Comma-separated list of one time purchase ids to filter.
          schema:
            type: array
            items:
              type: integer
          style: form
          explode: false
      responses:
        '200':
          description: List of onetimes retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - onetimes
                properties:
                  previous_cursor:
                    type: string
                  next_cursor:
                    type: string
                  onetimes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Onetime'
  /onetimes/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the onetime
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve a onetime by its ID.
      operationId: get-onetime
      responses:
        '200':
          description: Onetime retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnetimeResponse'
    put:
      summary: Update an existing Onetime item.
      operationId: update-onetime
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOnetimeInput'
      responses:
        '200':
          description: Onetime updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnetimeResponse'
    delete:
      summary: Delete a Onetime
      operationId: delete-onetime
      responses:
        '204':
          description: Onetime deleted successfully.
  /orders:
    get:
      summary: List all orders
      operationId: list-orders
      parameters:
        - name: address_id
          in: query
          description: Filter orders by address
          schema:
            type: string
        - name: charge_id
          in: query
          description: Filter orders by charge
          schema:
            type: string
        - name: created_at_max
          in: query
          description: Returns orders created before the given time.
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: Returns order created after the given time.
          schema:
            type: string
            format: date-time
        - name: customer_id
          in: query
          description: Filter orders by customer
          schema:
            type: integer
        - name: external_customer_id
          in: query
          description: Filter orders by external_customer_id
          schema:
            type: string
        - name: external_order_id
          in: query
          description: Filter orders by external_order_id
          schema:
            type: string
        - name: ids
          in: query
          description: Filter addresses by id. If passing multiple values, must be comma separated. Non-integer values will result in a 422 error
          schema:
            type: array
            items:
              type: integer
          style: form
          explode: false
        - name: limit
          in: query
          description: The amount of results. Default is 50 while the maximum is 250.
          schema:
            type: integer
            default: 50
            maximum: 250
        - name: cursor
          in: query
          description: Cursor for pagination
          schema:
            type: string
            default: 1
        - name: scheduled_at_max
          in: query
          description: Show orders scheduled before the given date
          schema:
            type: string
            format: date-time
        - name: scheduled_at_min
          in: query
          description: Show orders scheduled after the given date
          schema:
            type: string
            format: date-time
        - name: has_external_order
          in: query
          description: Filter orders with/without external_order_id
          schema:
            type: boolean
        - name: status
          in: query
          description: Filter orders by status
          schema:
            $ref: '#/components/schemas/OrderStatus'
        - name: type
          in: query
          description: Filter orders by type
          schema:
            $ref: '#/components/schemas/OrderType'
        - name: purchase_item_id
          in: query
          description: Filter orders by subscription or onetime
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: Show orders updated before the given date
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: Show orders updated after the given date
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of orders retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - orders
                properties:
                  previous_cursor:
                    type: string
                  next_cursor:
                    type: string
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
  /orders/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the order
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve one Order using the Recharge order_id
      operationId: get-order
      responses:
        '200':
          description: Order retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
    put:
      summary: Updating existing Order using the order_id
      operationId: update-order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderInput'
      responses:
        '200':
          description: Order updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
    delete:
      summary: Delete an order
      operationId: delete-order
      responses:
        '204':
          description: Order deleted successfully.
  /orders/{id}/clone:
    parameters:
      - name: id
        in: path
        description: ID of the order
        required: true
        schema:
          type: integer
    post:
      summary: Clone an Order
      operationId: clone-order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - scheduled_at
              properties:
                scheduled_at:
                  type: string
                  format: date-time
                  description: Date in future when this order will be sent
      responses:
        '201':
          description: Order updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
  /orders/{id}/delay:
    parameters:
      - name: id
        in: path
        description: ID of the order
        required: true
        schema:
          type: integer
    post:
      summary: Delay a prepaid Order by one interval
      operationId: delay-order
      responses:
        '200':
          description: Order updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
  /payment_methods:
    post:
      summary: Create a Payment Method
      operationId: create-payment-method
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentMethodInput'
      responses:
        '201':
          description: Payment method created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodResponse'
    get:
      summary: Return a list of payment methods in your store
      operationId: list-payment-methods
      parameters:
        - name: customer_id
          in: query
          description: Gets all Payment methods for this customer
          schema:
            type: string
      responses:
        '200':
          description: List of payment method retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - payment_methods
                properties:
                  previous_cursor:
                    type: string
                  next_cursor:
                    type: string
                  payment_methods:
                    type: array
                    items:
                      $ref: '#/components/schemas/PaymentMethod'
  /payment_methods/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the payment method
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve an payment method by its ID.
      operationId: get-payment-method
      responses:
        '200':
          description: Payment method retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodResponse'
    put:
      summary: Modify an existing Payment Method.
      operationId: update-payment-method
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePaymentMethodInput'
      responses:
        '200':
          description: Payment method updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodResponse'
    delete:
      summary: Delete an payment method by its ID.
      operationId: delete-payment-method
      responses:
        '204':
          description: Payment method deleted successfully.
  /plans:
    post:
      summary: Create a Plan for a Product
      operationId: create-plan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlanInput'
      responses:
        '200':
          description: Plan created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanResponse'
    get:
      summary: List all plans
      operationId: list-plans
      parameters:
        - name: limit
          in: query
          description: The amount of results. Default is 50 while the maximum is 250.
          schema:
            type: integer
            default: 50
            maximum: 250
        - name: cursor
          in: query
          description: Cursor for pagination
          schema:
            type: string
            default: 1
        - name: external_product_id
          in: query
          description: Return the Plans linked to the Product record in Recharge with the indicated external_product_id
          schema:
            type: string
        - name: ids
          in: query
          description: Filter plans by id. If passing multiple values, must be comma separated. Non-integer values will result in a 422 error
          schema:
            type: array
            items:
              type: integer
          style: form
          explode: false
        - name: updated_at_max
          in: query
          description: Returns plans updated before the given date.
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: Returns plans updated after the given date.
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of addresses retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPlansResponse'
  /plans/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the plan
        required: true
        schema:
          type: integer
    put:
      summary: Update a Plan
      operationId: update-plan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePlanInput'
      responses:
        '200':
          description: Plan updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanResponse'
    delete:
      summary: Delete a Plan
      operationId: delete-plane
      responses:
        '204':
          description: Plan deleted successfully.
  /products:
    post:
      summary: Create a Product
      operationId: create-product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductInput'
      responses:
        '202':
          description: Product created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
    get:
      summary: List products from store’s product catalog.
      operationId: list-products
      parameters:
        - name: external_product_ids
          in: query
          description: Filter products by external product ids
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
      responses:
        '200':
          description: List of addresses retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - products
                properties:
                  previous_cursor:
                    type: string
                  next_cursor:
                    type: string
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
  /products/{external_product_id}:
    parameters:
      - name: external_product_id
        in: path
        description: external_product_id of the Product
        required: true
        schema:
          type: string
    get:
      summary: Retrieves a Product from store’s product catalog using the external_product_id as lookup id
      operationId: get-product
      responses:
        '200':
          description: Product retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
    put:
      summary: Update an existing product
      operationId: update-product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductInput'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
    delete:
      summary: Delete product from Store
      operationId: delete-product
      responses:
        '204':
          description: Product deleted successfully.
  /products/{external_product_id}/plans-bulk:
    parameters:
      - name: external_product_id
        in: path
        description: external_product_id of the Product
        required: true
        schema:
          type: string
    post:
      summary: Bulk create new plans.There is a limit of 20 plans per request.
      operationId: bulk-create-plans
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkCreatePlanInput'
      responses:
        '200':
          description: Plans created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPlansResponse'
    put:
      summary: Bulk update existing plans. There is a limit of 20 plans per request
      operationId: bulk-update-plans
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpdatePlanInput'
      responses:
        '200':
          description: Plans updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPlansResponse'
    delete:
      summary: Bulk delete existing plans. There is a limit of 20 plans per request
      operationId: bulk-delete-plans
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - plans
              properties:
                plans:
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      type: string
      responses:
        '204':
          description: Product deleted successfully.
  /retention_strategies:
    post:
      summary: Create a retention strategy
      operationId: create-retention-strategy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRetentionStrategyInput'
      responses:
        '201':
          description: Retention strategy created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetentionStrategyResponse'
    get:
      summary: Retrieve all retention strategies
      operationId: list-retention-strategies
      responses:
        '200':
          description: List of retention strategies retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - retention_strategies
                properties:
                  previous_cursor:
                    type: string
                  next_cursor:
                    type: string
                  retention_strategies:
                    type: array
                    items:
                      $ref: '#/components/schemas/RetentionStrategy'
  /retention_strategies/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the retention strategy
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve a retention strategy using the Recharge retention_strategy_id.
      operationId: get-retention-strategy
      responses:
        '200':
          description: Retention strategy retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetentionStrategy'
    put:
      summary: Update an existing retention strategy
      operationId: update-retention-strategy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRetentionStrategyInput'
      responses:
        '200':
          description: Retention strategy updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetentionStrategyResponse'
    delete:
      summary: Delete a retention strategy
      operationId: delete-retention-strategy
      responses:
        '204':
          description: Retention strategy deleted successfully.
  /store:
    get:
      summary: Retrieve a store
      operationId: get-store
      responses:
        '200':
          description: Store retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreResponse'
  /subcriptions:
    post:
      summary: Create a new subscription
      operationId: create-subscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscriptionInput'
      responses:
        '201':
          description: Subscription created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
    get:
      summary: List all subscriptions.
      operationId: list-subscriptions
      parameters:
        - name: created_at_max
          in: query
          description: Returns subscriptions created before the given time.
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: Returns subscriptions created after the given time.
          schema:
            type: string
            format: date-time
        - name: customer_id
          in: query
          description: Unique identifier of the customer.
          schema:
            type: integer
        - name: address_id
          in: query
          description: Return the subscriptions linked to the given address_id.
          schema:
            type: integer
        - name: address_ids
          in: query
          description: Returns subscriptions that have the provided discount_id.
          schema:
            type: array
            items:
              type: integer
          style: form
          explode: false
        - name: external_variant_id
          in: query
          description: Return the subscriptions linked to the given external_variant_id
          schema:
            type: string
        - name: ids
          in: query
          description: Comma-separated list of subscription_ids to filter
          schema:
            type: array
            items:
              type: integer
          style: form
          explode: false
        - name: limit
          in: query
          description: The amount of results. Default is 50 while the maximum is 250.
          schema:
            type: integer
            default: 50
            maximum: 250
        - name: cursor
          in: query
          description: Cursor for pagination
          schema:
            type: string
            default: 1
        - name: cursor
          in: query
          description: Return either the next or previous page of subscriptions using next_cursor or previous_cursor attributes in the response.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: Returns subscriptions updated before the given date.
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: Returns subscriptions updated after the given date.
          schema:
            type: string
            format: date-time
        - name: status
          in: query
          description: Return the subscriptions with specified status.
          schema:
            type: string
            enum:
              - active
              - cancelled
              - expired
      responses:
        '200':
          description: List of subscriptions retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                required:
                  - subscriptions
                properties:
                  previous_cursor:
                    type: string
                  next_cursor:
                    type: string
                  subscriptions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Subscription'
  /subscriptions/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the subscription
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve an subscription by its ID.
      operationId: get-subscription
      responses:
        '200':
          description: Subscription retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
    put:
      summary: Update an subscription by its ID.
      operationId: update-subscription
      parameters:
        - name: commit
          in: query
          description: Controls whether the QUEUED charges linked to the subscription should be regenerated upon subscription update. By default the flag is set to false which will delay charge regeneration 5 seconds. This enables running multiple calls to perform changes and receive responses much faster since the API won’t wait for a charge regeneration to complete. Setting this parameter to true will cause charge regeneration to complete before returning a response.
          schema:
            type: boolean
        - name: force_update
          in: query
          description: If set to True, updates will also be applied to CANCELLED subscriptions. If null or False, only ACTIVE subscriptions will be updated.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSubscriptionInput'
      responses:
        '200':
          description: Subscription updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
    delete:
      summary: Delete an subscription by its ID.
      operationId: delete-subscription
      responses:
        '204':
          description: Subscription deleted successfully.
  /subscriptions/{id}/set_next_charge_date:
    parameters:
      - name: id
        in: path
        description: ID of the subscription
        required: true
        schema:
          type: integer
    post:
      summary: Update an existing subscription’s next charge date.
      operationId: set-subscription-next-charge-date
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - date
              properties:
                date:
                  type: string
                  format: date
                  description: The next charge date desired.
      responses:
        '200':
          description: Subscription updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
  /subscriptions/{id}/change_address:
    parameters:
      - name: id
        in: path
        description: ID of the subscription
        required: true
        schema:
          type: integer
    post:
      summary: Update an existing subscription’s address.
      operationId: set-subscription-address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - address_id
              properties:
                address_id:
                  type: integer
                  description: Unique id of the address that need to be associated with subscription.
                next_charge_scheduled_at:
                  type: string
                  format: date
                  description: The next charge date desired.

      responses:
        '200':
          description: Subscription updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
  /subscriptions/{id}/cancel:
    parameters:
      - name: id
        in: path
        description: ID of the subscription
        required: true
        schema:
          type: integer
    post:
      summary: Cancel an active subscription.
      operationId: cancel-subscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cancellation_reason
              properties:
                cancellation_reason:
                  type: string
                  description: Reason for subscription cancellation.
                cancellation_reason_comments:
                  type: string
                  maxLength: 1024
                  description: Cancellation reason comment. Maximum length is 1024 characters.
                send_email:
                  type: boolean
                  description: If set to false, subscription cancelled email will not be sent to customer and store owner.

      responses:
        '200':
          description: Subscription updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
  /subscriptions/{id}/activate:
    parameters:
      - name: id
        in: path
        description: ID of the subscription
        required: true
        schema:
          type: integer
    post:
      summary: 'Activate a cancelled subscription. When activating subscription, following attributes will be set to null: cancelled_at, cancellation_reason and cancellation_reason_comments.'
      operationId: activate-subscription
      responses:
        '200':
          description: Subscription updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
  /subscriptions/{id}/skip_gift:
    parameters:
      - name: id
        in: path
        description: ID of the subscription
        required: true
        schema:
          type: integer
    post:
      summary: Gift a skipped Subscription to a recipient.
      operationId: gift-skipped-subscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - purchase_item_ids
                - recipient_address
              properties:
                purchase_item_ids:
                  type: array
                  description: A list containing the Subscription IDs to be skipped.
                  items:
                    type: integer
                recipient_address:
                  $ref: '#/components/schemas/GiftAddress'

      responses:
        '200':
          description: Subscription updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
