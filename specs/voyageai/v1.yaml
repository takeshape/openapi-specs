openapi: 3.0.2
info:
  title: Voyage API
  version: '1.1'
servers:
  - url: https://api.voyageai.com/v1
components:
  securitySchemes:
    sec0:
      type: apiKey
      in: header
      name: 'Authorization: Bearer'
      x-default: $VOYAGE_API_KEY
security:
  - sec0: []
tags:
  - name: Endpoints
paths:
  /embeddings:
    post:
      tags:
        - Endpoints
      summary: Embeddings
      description: Voyage embedding endpoint receives as input a string (or a list of strings) and other arguments such as the preferred model name, and returns a response containing a list of embeddings.
      operationId: embeddings-api
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - input
                - model
              properties:
                input:
                  type: object
                  description: 'A single text string, or a list of texts as a list of strings. Currently, we have two constraints on the list: <ul>  <li> <p> The maximum length of the list is 128. </p> </li>  <li> <p> The total number of tokens in the list is at most 320K for `voyage-2`, and 120K for  `voyage-large-2`, `voyage-law-2`, and `voyage-code-2`. </p> </li> <ul>'
                  oneOf:
                    - type: string
                    - type: array
                      items:
                        type: string
                model:
                  type: string
                  description: 'Name of the model. Recommended options: `voyage-2`, `voyage-large-2`, `voyage-law-2`, `voyage-code-2`.'
                input_type:
                  type: string
                  description: 'Type of the input text. Defaults to `null`. Other options: `query`, `document`.'
                  enum:
                    - query
                    - document
                truncation:
                  type: boolean
                  description: Whether to truncate the input texts to fit within the context length. Defaults to `true`. <ul>  <li> <p> If `true`, over-length input texts will be truncated to fit within the context  length, before vectorized by the embedding model. </p> </li>  <li> <p> If `false`, an error will be raised if any given text exceeds the context length.  </p> </li>  </ul>
                encoding_format:
                  type: string
                  description: 'Format in which the embeddings are encoded. We support two options:  <ul> <li> <p> If not specified (defaults to `null`): the embeddings are represented as lists of floating-point numbers; </p> </li>  <li> <p> `base64`: the embeddings are compressed to [base64](https://docs.python.org/3/library/base64.html) encodings. </p> </li>  </ul>'
                  enum:
                    - base64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                properties:
                  object:
                    type: string
                    description: The object type, which is always "list".
                  data:
                    type: array
                    description: An array of embedding objects.
                    items:
                      type: object
                      properties:
                        object:
                          type: string
                          description: The object type, which is always "embedding".
                        embedding:
                          type: array
                          description: The embedding vector consists of a list of floating-point numbers. The length of this  vector varies depending on the specific model.
                          items:
                            type: number
                        index:
                          type: integer
                          description: An integer representing the index of the embedding within the list of embeddings.
                  model:
                    type: string
                    description: Name of the model.
                  usage:
                    type: object
                    properties:
                      total_tokens:
                        type: integer
                        description: The total number of tokens used for computing the embeddings.
              examples:
                Success:
                  value: '{"object":"list","data":[{"object":"embedding","embedding":[0.0038915484,0.010964915,-0.035594109,"...",0.011034692],"index":0}, {"object":"embedding","embedding":[-0.01539533,-0.0011246679,0.021264801,"...",-0.046319865],"index":1}],"model":"voyage-large-2", "usage":{"total_tokens":10}}'
        4XX:
          description: Client error  <p> This indicates an issue with the request format or frequency. Please see our  [Error Codes](https://docs.voyageai.com/docs/error-codes) guide. </p>
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                    description: The error message.
        5XX:
          description: Server Error <p> This indicates our servers are experiencing high traffic or having an unexpected issue. Please see our  [Error Codes](https://docs.voyageai.com/docs/error-codes) guide. </p>
      deprecated: false
      x-readme:
        code-samples:
          - language: shell
            code: |-
              curl --request POST \
                   --url https://api.voyageai.com/v1/embeddings \
                   --header "Authorization: Bearer $VOYAGE_API_KEY" \
                   --header "content-type: application/json" \
                   --data '
              {
                "input": [
                  "Sample text 1",
                  "Sample text 2"
                ],
                "model": "voyage-large-2"
              }
              '
        samples-languages:
          - shell
  /rerank:
    post:
      tags:
        - Endpoints
      summary: Reranker
      description: Voyage reranker endpoint receives as input a query, a list of documents, and other arguments such as the model name, and returns a response containing the reranking results.
      operationId: reranker-api
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - query
                - documents
                - model
              properties:
                query:
                  type: string
                  description: The query as a string. The query can contain a maximum of 1000 tokens.
                documents:
                  type: array
                  description: The documents to be reranked as a list of strings. <ul> <li><p> The number of documents cannot exceed 1000. </p> </li> <li> <p> The sum of the number of tokens in the query and the number of tokens in any single document cannot exceed 4000. </p> </li> <li> <p>The total number of tokens, defined as "the number  of query tokens Ã— the number of documents + sum of the number  of tokens in all documents", cannot exceed 600K. </p> </li> </ul>
                  items:
                    type: string
                model:
                  type: string
                  description: Name of the model to use. Currently, we only have one model named `rerank-lite-1`.
                top_k:
                  type: integer
                  description: The number of most relevant documents to return. If not specified, the reranking results of all documents will be returned.
                return_documents:
                  type: boolean
                  description: Whether to return the documents in the response. Defaults to `false`. <ul> <li> <p> If `false`, the API will return a list of {"index", "relevance_score"} where "index" refers to the index of a document within the input list. </p> </li> <li> <p> If `true`, the API will return a list of {"index", "document", "relevance_score"} where "document" is the corresponding document from the input list.  </p> </li> </ul>
                truncation:
                  type: boolean
                  description: Whether to truncate the input to satisfy the "context length limit" on the query and the documents. Defaults to `true`. <ul> <li> <p> If `true`,  the query and documents will be truncated to fit within the context length limit, before processed by the reranker model. </p> </li> <li> <p> If `false`, an error will be raised when the query exceeds 1000 tokens, or the sum of the number of tokens in the query and the number of tokens in any single document exceeds 4000. </p> </li> </ul>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    description: The object type, which is always "list".
                  data:
                    type: array
                    description: An array of the reranking results, sorted by the descending order of relevance scores.
                    items:
                      type: object
                      properties:
                        index:
                          type: integer
                          description: The index of the document in the input list.
                        relevance_score:
                          type: number
                          description: The relevance score of the document with respect to the query.
                        document:
                          type: string
                          description: The document string. Only returned when return_documents is set to true.
                  model:
                    type: string
                    description: Name of the model.
                  usage:
                    type: object
                    properties:
                      total_tokens:
                        type: integer
                        description: The total number of tokens used for computing the reranking.
              examples:
                Success:
                  value: '{"object":"list","data":[{"relevance_score":0.4375,"index":0},{"relevance_score":0.421875,"index":1}], "model":"rerank-lite-1","usage":{"total_tokens":26}}'
        4XX:
          description: Client error  <p> This indicates an issue with the request format or frequency. Please see our  [Error Codes](https://docs.voyageai.com/docs/error-codes) guide. </p>
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                    description: The error message.
        5XX:
          description: Server Error <p> This indicates our servers are experiencing high traffic or having an unexpected issue. Please see our  [Error Codes](https://docs.voyageai.com/docs/error-codes) guide. </p>
      deprecated: false
      x-readme:
        code-samples:
          - language: shell
            code: |-
              curl --request POST \
                   --url https://api.voyageai.com/v1/rerank \
                   --header "Authorization: Bearer $VOYAGE_API_KEY" \
                   --header "content-type: application/json" \
                   --data '
              {
                "query": "Sample query",
                "documents": [
                  "Sample document 1",
                  "Sample document 2"
                ],
                "model": "rerank-lite-1"
              }
              '
        samples-languages:
          - shell
x-readme:
  headers: []
  explorer-enabled: false
  proxy-enabled: false
  samples-enabled: true
